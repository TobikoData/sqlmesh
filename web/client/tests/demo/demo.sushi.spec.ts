import { test } from '@playwright/test'
import {
  checkFile,
  selectEnvironment,
  addEnvironment,
  goToPlan,
  applyPlan,
  goBackTo,
  checkModelChange,
  changeFileContent,
} from './utils'
import {
  testHeader,
  testFooter,
  testModulesAPI,
  testMetaAPI,
  testEventsAPI,
  testFilesAPI,
  testEnvironmentsAPI,
  testModelsAPI,
  testPlanAPI,
  testHistoryNavigation,
  testEnvironmentDetails,
  testErrors,
  testModuleNavigation,
  testChangesAndBackfills,
  testEditor,
  testEditorTabs,
  testFileExplorer,
} from './help'

test('run sushi demo', async ({ page }) => {
  test.setTimeout(600000)
  console.log('START')
  const apiModulesPromise = page.waitForResponse('/api/modules')
  const apiMetaPromise = page.waitForResponse('/api/meta')
  const apiEventsPromise = page.waitForResponse('/api/events')
  const apiFilesPromise = page.waitForResponse('/api/files')
  const apiEnvironmentsPromise = page.waitForResponse('/api/environments')
  const apiModelsPromise = page.waitForResponse('/api/models')
  const apiPlanPromise = page.waitForResponse('/api/plan')

  await page.goto('/')
  await testModulesAPI(
    page,
    { modules: ['docs', 'editor', 'errors', 'plans', 'files'] },
    apiModulesPromise,
  )
  await page.waitForURL('/editor')
  await testEventsAPI(page, apiEventsPromise)
  await testMetaAPI(page, apiMetaPromise)
  await testHeader(page)
  await testFooter(page)
  await testModelsAPI(page, apiModelsPromise)
  await testEnvironmentsAPI(page, apiEnvironmentsPromise)
  await testFilesAPI(page, { projectName: 'sushi' }, apiFilesPromise)
  await testPlanAPI(page, apiPlanPromise)
  await testHistoryNavigation(page, { hasBack: true, hasForward: true })
  await testEnvironmentDetails(page, {
    env: 'prod',
    isDisabledAction: false,
    isDisabledEnv: true,
  })
  await testChangesAndBackfills(page, { added: 15, backfills: 12 })
  await testErrors(page, { label: 'No Errors' })
  await testModuleNavigation(page)
  await testEditor(page)
  await testEditorTabs(page)
  await testFileExplorer(page)
  await checkFile(page, { path: 'config.py' })
  console.log('1. Initial prod backfill')
  await goToPlan(page, { env: 'prod', action: 'Apply Changes And Backfill' })
  await applyPlan(page, { env: 'prod', action: 'Apply Changes And Backfill' })
  await testErrors(page, { label: 'No Errors' })
  await testEnvironmentDetails(page, { env: 'prod' })
  await testChangesAndBackfills(page, { backfills: 0 })
  await goBackTo(page, { path: '/editor' })
  console.log('2. Add dev')
  await addEnvironment(page, { env: 'dev' })
  console.log('3. Apply changes to dev')
  await testEnvironmentDetails(page, { env: 'dev' })
  await testChangesAndBackfills(page, { backfills: 0 })
  await goToPlan(page, { env: 'dev', action: 'Apply Virtual Update' })
  await applyPlan(page, { env: 'dev', action: 'Apply Virtual Update' })
  await testErrors(page, { label: 'No Errors' })
  await testEnvironmentDetails(page, { env: 'dev' })
  await testChangesAndBackfills(page, { backfills: 0 })
  await goBackTo(page, { path: '/editor' })
  console.log('4. Change model')
  await changeFileContent(page, {
    path: 'models/waiter_revenue_by_day.sql',
    modelName: 'sushi.waiter_revenue_by_day',
    content: `
    /* Table of revenue generated by waiters by day. */
    MODEL (
      name sushi.waiter_revenue_by_day,
      kind incremental_by_time_range (
        time_column event_date,
        batch_size 10,
      ),
      owner jen,
      cron '@daily',
      audits (
        NUMBER_OF_ROWS(threshold=0)
      ),
      grain (waiter_id, event_date)
    );
    
    SELECT
      o.waiter_id::INT AS waiter_id, /* Waiter id */
      SUM(oi.quantity * i.price)::DOUBLE AS revenue, /* Revenue from orders taken by this waiter */
      o.event_date::DATE AS event_date /* Date */
    FROM sushi.orders AS o
    LEFT JOIN sushi.order_items AS oi
      ON o.id = oi.order_id AND o.event_date = oi.event_date
    LEFT JOIN sushi.items AS i
      ON oi.item_id = i.id AND oi.event_date = i.event_date
    WHERE
      o.event_date BETWEEN @start_date AND @end_date and waiter_id > 5
    GROUP BY
      o.waiter_id,
      o.event_date
  `,
  })
  console.log('5. Apply changes to dev')
  await testEnvironmentDetails(page, { env: 'dev' })
  await testChangesAndBackfills(page, { direct: 1, indirect: 1, backfills: 2 })
  await goToPlan(page, { env: 'dev', action: 'Apply Changes And Backfill' })
  await checkModelChange(page, {
    group: 'Modified Directly',
    model: 'sushi__dev.waiter_revenue_by_day',
    change: 'Breaking Change',
  })
  await applyPlan(page, { env: 'dev', action: 'Apply Changes And Backfill' })
  await goBackTo(page, { path: '/editor' })
  await testErrors(page, { label: 'No Errors' })
  await testEnvironmentDetails(page, { env: 'dev' })
  await testChangesAndBackfills(page, { backfills: 0 })
  console.log('6. Select prod')
  await selectEnvironment(page, { env: 'prod' })
  await testEnvironmentDetails(page, { env: 'prod' })
  await testChangesAndBackfills(page, { direct: 1, indirect: 1, backfills: 0 })
  console.log('7. Apply virtual update to prod')
  await goToPlan(page, { env: 'prod', action: 'Apply Virtual Update' })
  await applyPlan(page, {
    env: 'prod',
    action: 'Apply Virtual Update',
    expectConfirmation: true,
  })
  await testErrors(page, { label: 'No Errors' })
  await testEnvironmentDetails(page, { env: 'prod' })
  await testChangesAndBackfills(page, { backfills: 0 })
  await goBackTo(page, { path: '/editor' })
  console.log('8. Select dev')
  await selectEnvironment(page, { env: 'dev' })
  await testEnvironmentDetails(page, { env: 'dev' })
  await testChangesAndBackfills(page, { backfills: 0 })
  console.log('9. Change model')
  await changeFileContent(page, {
    isSelected: true,
    path: 'models/waiter_revenue_by_day.sql',
    modelName: 'sushi.waiter_revenue_by_day',
    content: `
      /* Table of revenue generated by waiters by day. */
      MODEL (
        name sushi.waiter_revenue_by_day,
        kind INCREMENTAL_BY_TIME_RANGE (
          time_column event_date,
          batch_size 10
        ),
        owner jen,
        cron '@daily',
        audits (
          NUMBER_OF_ROWS(threshold = 0)
        ),
        grain (waiter_id, event_date)
      );
      
      SELECT
        o.waiter_id::INT AS waiter_id, /* Waiter id */
        SUM(oi.quantity * i.price)::DOUBLE AS revenue, /* Revenue from orders taken by this waiter */
        o.event_date::DATE AS event_date /* Date */
      FROM sushi.orders AS o
      LEFT JOIN sushi.order_items AS oi
        ON o.id = oi.order_id AND o.event_date = oi.event_date
      LEFT JOIN sushi.items AS i
        ON oi.item_id = i.id AND oi.event_date = i.event_date
      WHERE
        o.event_date BETWEEN @start_date AND @end_date
      GROUP BY
        o.waiter_id,
        o.event_date
    `,
  })
  console.log('10. Apply changes to dev')
  await testEnvironmentDetails(page, { env: 'dev' })
  await testChangesAndBackfills(page, { direct: 1, indirect: 1, backfills: 0 })
  await goToPlan(page, { env: 'dev', action: 'Apply Virtual Update' })
  await checkModelChange(page, {
    group: 'Modified Directly',
    model: 'sushi__dev.waiter_revenue_by_day',
    change: 'Breaking Change',
  })
  await applyPlan(page, { env: 'dev', action: 'Apply Virtual Update' })
  await goBackTo(page, { path: '/editor' })
  await testErrors(page, { label: 'No Errors' })
  await testChangesAndBackfills(page, { backfills: 0 })
  await testEnvironmentDetails(page, { env: 'dev' })
  console.log('END')
})
