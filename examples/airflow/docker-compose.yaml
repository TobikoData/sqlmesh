services:
  airflow-cli:
    command:
    - bash
    - -c
    - airflow
    depends_on: &id001
      postgres: &id002
        condition: service_healthy
      redis: &id003
        condition: service_healthy
    environment:
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      CONNECTION_CHECK_MAX_COUNT: '0'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.3}
    profiles:
    - debug
    user: ${AIRFLOW_UID:-50000}:0
    volumes: &id004
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./spark_conf:/opt/spark/conf
    - ./spark_conf:/opt/hive/conf
    - ./warehouse:/opt/warehouse
    - ../../:/opt/sqlmesh
  airflow-init:
    command:
    - -c
    - "function ver() {\n  printf \"%04d%04d%04d%04d\" $${1//./ }\n}\nairflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO
      && gosu airflow airflow version)\nairflow_version_comparable=$$(ver $${airflow_version})\nmin_airflow_version=2.2.0\nmin_airflow_version_comparable=$$(ver
      $${min_airflow_version})\nif (( airflow_version_comparable < min_airflow_version_comparable
      )); then\n  echo\n  echo -e \"\\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\\e[0m\"\n
      \ echo \"The minimum Airflow version supported: $${min_airflow_version}. Only
      use this or higher!\"\n  echo\n  exit 1\nfi\nif [[ -z \"${AIRFLOW_UID}\" ]];
      then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!: AIRFLOW_UID not set!\\e[0m\"\n
      \ echo \"If you are on Linux, you SHOULD follow the instructions below to set
      \"\n  echo \"AIRFLOW_UID environment variable, otherwise files will be owned
      by root.\"\n  echo \"For other operating systems you can get rid of the warning
      with manually created .env file:\"\n  echo \"    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user\"\n
      \ echo\nfi\none_meg=1048576\nmem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf
      PAGE_SIZE) / one_meg))\ncpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)\ndisk_available=$$(df
      / | tail -1 | awk '{print $$4}')\nwarning_resources=\"false\"\nif (( mem_available
      < 4000 )) ; then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!: Not enough memory
      available for Docker.\\e[0m\"\n  echo \"At least 4GB of memory required. You
      have $$(numfmt --to iec $$((mem_available * one_meg)))\"\n  echo\n  warning_resources=\"true\"\nfi\nif
      (( cpus_available < 2 )); then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!: Not
      enough CPUS available for Docker.\\e[0m\"\n  echo \"At least 2 CPUs recommended.
      You have $${cpus_available}\"\n  echo\n  warning_resources=\"true\"\nfi\nif
      (( disk_available < one_meg * 10 )); then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!:
      Not enough Disk space available for Docker.\\e[0m\"\n  echo \"At least 10 GBs
      recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))\"\n  echo\n
      \ warning_resources=\"true\"\nfi\nif [[ $${warning_resources} == \"true\" ]];
      then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!: You have not enough resources
      to run Airflow (see above)!\\e[0m\"\n  echo \"Please follow the instructions
      to increase amount of resources available:\"\n  echo \"   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin\"\n
      \ echo\nfi\nmkdir -p /sources/logs /sources/dags /sources/plugins\nchown -R
      \"${AIRFLOW_UID}:0\" /sources/{logs,dags,plugins}\nexec /entrypoint airflow
      version\n"
    depends_on: *id001
    entrypoint: /bin/bash
    environment:
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.3}
    user: 0:0
    volumes:
    - .:/sources
  airflow-scheduler:
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres: *id002
      redis: *id003
    environment: &id005
      AIRFLOW_ENGINE_OPERATOR: spark
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD-SHELL
      - airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"
      timeout: 10s
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.3}
    restart: always
    user: ${AIRFLOW_UID:-50000}:0
    volumes: *id004
  airflow-triggerer:
    command: triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres: *id002
      redis: *id003
    environment: *id005
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD-SHELL
      - airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"
      timeout: 10s
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.3}
    restart: always
    user: ${AIRFLOW_UID:-50000}:0
    volumes: *id004
  airflow-webserver:
    command: webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres: *id002
      redis: *id003
    environment: *id005
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8080/health
      timeout: 10s
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.3}
    ports:
    - 8080:8080
    restart: always
    user: ${AIRFLOW_UID:-50000}:0
    volumes: *id004
  airflow-worker:
    command: celery worker
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres: *id002
      redis: *id003
    environment:
      AIRFLOW_ENGINE_OPERATOR: spark
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      DUMB_INIT_SETSID: '0'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD-SHELL
      - celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"
      timeout: 10s
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.3}
    restart: always
    user: ${AIRFLOW_UID:-50000}:0
    volumes: *id004
  create-metastore-db:
    command:
    - psql
    - -U
    - airflow
    - --host
    - airflow-postgres-1
    - -c
    - CREATE DATABASE metastore_db
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: airflow
    image: postgres:13
    profiles:
    - sqlmesh-warehouse-init
  flower:
    command: celery flower
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres: *id002
      redis: *id003
    environment: *id005
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:5555/
      timeout: 10s
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.3}
    ports:
    - 5555:5555
    profiles:
    - flower
    restart: always
    user: ${AIRFLOW_UID:-50000}:0
    volumes: *id004
  postgres:
    environment:
      POSTGRES_DB: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_USER: airflow
    healthcheck:
      interval: 5s
      retries: 5
      test:
      - CMD
      - pg_isready
      - -U
      - airflow
    image: postgres:13
    ports:
    - 5432:5432
    restart: always
    volumes:
    - postgres-db-volume:/var/lib/postgresql/data
  provision-metastore-tables:
    command:
    - -c
    - /opt/hive/bin/schematool -dbType postgres -initSchema
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/bash
    image: airflow-sqlmesh
    profiles:
    - sqlmesh-warehouse-init
    user: airflow
    volumes:
    - ./spark_conf:/opt/spark/conf
    - ./spark_conf:/opt/hive/conf
    - ./warehouse:/opt/warehouse
  redis:
    expose:
    - 6379
    healthcheck:
      interval: 5s
      retries: 50
      test:
      - CMD
      - redis-cli
      - ping
      timeout: 30s
    image: redis:latest
    restart: always
  sqlmesh-tests:
    command:
    - -c
    - make install-dev && pytest -m 'airflow_integration'
    entrypoint: /bin/bash
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      IS_DOCKER: 'true'
    image: airflow-sqlmesh
    profiles:
    - sqlmesh-tests
    user: airflow
    volumes:
    - ./spark_conf:/opt/spark/conf
    - ./spark_conf:/opt/hive/conf
    - ./warehouse:/opt/warehouse
    working_dir: /opt/sqlmesh
version: '3'
volumes:
  postgres-db-volume: null
x-airflow-common:
  depends_on: *id001
  environment: *id005
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.3}
  user: ${AIRFLOW_UID:-50000}:0
  volumes: *id004
