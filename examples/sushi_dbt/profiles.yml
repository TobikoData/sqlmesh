sushi:
  outputs:
    in_memory:
      type: duckdb
      schema: sushi
    duckdb:
      type: duckdb
      path: 'local.duckdb'
      schema: sushi
    snowflake:
      account: "{{ env_var('SNOWFLAKE_ACCOUNT') }}"
      database: sushi
      password: "{{ env_var('SNOWFLAKE_PASSWORD') }}"
      role: "{{ env_var('SNOWFLAKE_ROLE') }}"
      schema: sushi
      threads: 1
      type: snowflake
      user: "{{ env_var('SNOWFLAKE_USER') }}"
      warehouse: "{{ env_var('SNOWFLAKE_WAREHOUSE') }}"
    bigquery:
      type: bigquery
      method: service-account
      project: "{{ env_var('BQ_PROJECT') }}"
      dataset: "{{ env_var('BQ_SCHEMA') }}"
      threads: 1
      keyfile: "{{ env_var('BQ_KEYFILE') }}"
      location: "{{ env_var('BQ_LOCATION') }}"
    redshift:
      host: "{{ env_var('REDSHIFT_HOST') }}"
      user: "{{ env_var('REDSHIFT_USER') }}"
      password: "{{ env_var('REDSHIFT_PASSWORD') }}"
      port: "{{ env_var('REDSHIFT_PORT') }}"
      dbname: "{{ env_var('REDSHIFT_DBNAME') }}"
      schema: sushi
      threads: 1
      type: redshift
    sqlserver:
      host: "{{ env_var('SQLSERVER_HOST') }}"
      user: "{{ env_var('SQLSERVER_USER') }}"
      password: "{{ env_var('SQLSERVER_PASSWORD') }}"
      database: "{{ env_var('SQLSERVER_DATABASE') }}"
      driver: "{{ env_var('SQLSERVER_DRIVER') }}"
      authentication: sql
      schema: sushi
      threads: 1
      type: sqlserver
    trino:
      type: trino
      method: none
      http_scheme: http
      user: "{{ env_var('TRINO_USER') }}"
      host: "{{ env_var('TRINO_HOST') }}"
      database: "{{ env_var('TRINO_DATABASE') }}"
      schema: sushi
      threads: 1
  target: in_memory
