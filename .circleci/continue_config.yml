version: 2.1

parameters:
  client:
    type: boolean
    default: false
  common:
    type: boolean
    default: false
  python:
    type: boolean
    default: false

commands:
  halt_unless_core:
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.common >>
              - << pipeline.parameters.python >>
              - equal: [main, << pipeline.git.branch >>]
          steps:
            - run: circleci-agent step halt
  halt_unless_client:
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.common >>
              - << pipeline.parameters.client >>
              - equal: [main, << pipeline.git.branch >>]
          steps:
            - run: circleci-agent step halt

jobs:
  doc_tests:
    docker:
      - image: cimg/python:3.10
    resource_class: small
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Install dependencies
          command: make install-dev install-doc
      - run:
          name: Run doc tests
          command: make doc-test

  style_and_slow_tests:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python_version >>
    resource_class: large
    environment:
      PYTEST_XDIST_AUTO_NUM_WORKERS: 8
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Install OpenJDK
          command: sudo apt-get update && sudo apt-get install default-jdk
      - run:
          name: Install ODBC
          command: sudo apt-get install unixodbc-dev
      - run:
          name: Install SQLMesh and dbt adapter dependencies
          command: make install-cicd-test
      - run:
          name: Run linters and code style checks
          command: make py-style
      - run:
          name: Run slow tests
          command: make cicd-test
      - store_test_results:
          path: test-results

  style_and_slow_tests_pydantic_v1:
    docker:
      - image: cimg/python:3.10
    resource_class: large
    environment:
      PYTEST_XDIST_AUTO_NUM_WORKERS: 8
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Install OpenJDK
          command: sudo apt-get update && sudo apt-get install default-jdk
      - run:
          name: Install ODBC
          command: sudo apt-get install unixodbc-dev
      - run:
          name: Install SQLMesh and dbt adapter dependencies
          command: make install-cicd-test
      - run:
          name: Install Pydantic v1
          command: pip install --upgrade "pydantic<2.0.0" && pip uninstall pydantic_core -y
      - run:
          name: Run linters and code style checks
          command: make py-style
      - run:
          name: Run slow tests
          command: make cicd-test

  migration_test:
    docker:
      - image: cimg/python:3.10
    resource_class: small
    environment:
      SQLMESH__DISABLE_ANONYMIZED_ANALYTICS: "1"
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Run the migration test
          command: ./.circleci/test_migration.sh

  ui_style:
    docker:
      - image: cimg/python:3.8
    resource_class: small
    steps:
      - halt_unless_client
      - checkout
      - run:
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            python --version --version >> pre-commit-cache-key.txt
      - restore_cache:
          keys:
            - v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
      - run:
          name: Install pre-commit
          command: pip install pre-commit
      - run:
          name: Run linters and code style checks
          command: make ui-style
      - save_cache:
          key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit

  ui_test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.40.1-jammy
    resource_class: medium
    steps:
      - halt_unless_client
      - checkout
      - restore_cache:
          keys:
            - v1-nm-cache-{{ checksum "web/client/package-lock.json" }}
      - run:
          name: Install packages
          command: npm --prefix web/client ci
      - save_cache:
          key: v1-nm-cache-{{ checksum "web/client/package-lock.json" }}
          paths:
            - /root/.npm
      - run:
          name: Run tests
          command: npm --prefix web/client run test

  airflow_docker_tests:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    resource_class: large
    environment:
      PYTEST_XDIST_AUTO_NUM_WORKERS: 8
      SQLMESH__DISABLE_ANONYMIZED_ANALYTICS: "1"
    steps:
      - checkout
      - run:
          name: Install envsubst
          command: sudo apt-get update && sudo apt-get install gettext-base
      - run:
          name: Install ruamel.yaml
          command: pip3 install ruamel.yaml==0.16.0
      - run:
          name: Run Airflow slow tests
          command: make airflow-docker-test-with-env
          no_output_timeout: 15m
      - run:
          name: Collect Airflow logs
          command: |
            tar -czf ./airflow_logs.tgz -C ./examples/airflow/logs .
            mkdir -p /tmp/airflow_logs
            cp ./airflow_logs.tgz /tmp/airflow_logs/
          when: on_fail
      - store_artifacts:
          path: /tmp/airflow_logs

  trigger_private_tests:
      docker:
        - image: cimg/base:2021.11
      resource_class: small
      steps:
        - checkout
        - run:
            name: Trigger private tests
            command: |
              echo 'export COMMIT_MESSAGE="$(git log --format=%s -n 1 $CIRCLE_SHA1)"' >> "$BASH_ENV"
              echo 'export FORMATTED_COMMIT_MESSAGE="${COMMIT_MESSAGE//\"/\\\"}"' >> "$BASH_ENV"
              source "$BASH_ENV"
              curl --request POST \
                --url $TOBIKO_PRIVATE_CIRCLECI_URL \
                --header "Circle-Token: $TOBIKO_PRIVATE_CIRCLECI_KEY" \
                --header "content-type: application/json" \
                --data '{
                  "branch":"main",
                  "parameters":{
                    "run_main_pr":false,
                    "run_sqlmesh_commit":true,
                    "sqlmesh_branch":"'$CIRCLE_BRANCH'",
                    "sqlmesh_commit_author":"'$CIRCLE_USERNAME'",
                    "sqlmesh_commit_hash":"'$CIRCLE_SHA1'",
                    "sqlmesh_commit_message":"'"$FORMATTED_COMMIT_MESSAGE"'"
                    }
                }'

  engine_tests_docker:
    parameters:
      engine:
        type: string
    machine:
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    resource_class: large
    environment:
      SQLMESH__DISABLE_ANONYMIZED_ANALYTICS: "1"
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Install OS-level dependencies
          command: ./.circleci/install-prerequisites.sh "<< parameters.engine >>"
      - run:
          name: Run tests
          command: make << parameters.engine >>-test
          no_output_timeout: 20m
      - store_test_results:
          path: test-results

  engine_tests_cloud:
    parameters:
      engine:
        type: string
    docker:
      - image: cimg/python:3.12
    resource_class: medium
    environment:
      PYTEST_XDIST_AUTO_NUM_WORKERS: 4
      SQLMESH__DISABLE_ANONYMIZED_ANALYTICS: "1"
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Generate database name
          command: |
            UUID=`cat /proc/sys/kernel/random/uuid`
            TEST_DB_NAME="circleci_${UUID:0:8}"
            echo "export TEST_DB_NAME='$TEST_DB_NAME'" >> "$BASH_ENV"
            echo "export SNOWFLAKE_DATABASE='$TEST_DB_NAME'" >> "$BASH_ENV"
            echo "export DATABRICKS_CATALOG='$TEST_DB_NAME'" >> "$BASH_ENV"
            echo "export REDSHIFT_DATABASE='$TEST_DB_NAME'" >> "$BASH_ENV"
      - run:
          name: Create test database
          command: ./.circleci/manage-test-db.sh << parameters.engine >> "$TEST_DB_NAME" up
      - run:
          name: Run tests
          command: |
            make << parameters.engine >>-test
          no_output_timeout: 20m
      - run:
          name: Tear down test database
          command: ./.circleci/manage-test-db.sh << parameters.engine >> "$TEST_DB_NAME" down
          when: always
      - store_test_results:
          path: test-results

workflows:
  main_pr:
    jobs:
      - doc_tests
      - style_and_slow_tests:
          matrix:
            parameters:
              python_version:
                - "3.8"
                - "3.9"
                - "3.10"
                - "3.11"
                - "3.12"
      - style_and_slow_tests_pydantic_v1
      - airflow_docker_tests:
          requires:
            - style_and_slow_tests
          filters:
            branches:
              only:
                - main
      - engine_tests_docker:
          name: engine_<< matrix.engine >>
          matrix:
            parameters:
              engine:
                - duckdb
                - postgres
                - mysql
                - mssql
                - trino
                - spark
      - engine_tests_cloud:
          name: cloud_engine_<< matrix.engine >>
          context:
            - sqlmesh_cloud_database_integration
          requires:
            - engine_tests_docker
          matrix:
            parameters:
              engine:
                - snowflake
                - databricks
                - redshift
                - bigquery
          filters:
            branches:
              only:
                - main
      - trigger_private_tests:
          requires:
            - style_and_slow_tests
          filters:
            branches:
              only:
                - main
      - ui_style
      - ui_test
      - migration_test
