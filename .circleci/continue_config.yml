version: 2.1

orbs:
  python: circleci/python@1.5.0

parameters:
  client:
    type: boolean
    default: false
  common:
    type: boolean
    default: false
  python:
    type: boolean
    default: false

commands:
  halt_unless_core:
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.common >>
              - << pipeline.parameters.python >>
              - equal: [main, << pipeline.git.branch >>]
          steps:
            - run: circleci-agent step halt
  halt_unless_client:
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.common >>
              - << pipeline.parameters.client >>
              - equal: [main, << pipeline.git.branch >>]
          steps:
            - run: circleci-agent step halt

jobs:
  style_and_unit_tests:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python_version >>
    resource_class: small
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Install OpenJDK
          command: sudo apt-get update && sudo apt-get install default-jdk
      - run:
          name: Install dependencies
          command: make install-dev
      - run:
          name: Run linters and code style checks
          command: make py-style
      - run:
          name: Run unit tests
          command: make unit-test
      - run:
          name: Run doc tests
          command: make doc-test

  style_and_unit_tests_pydantic_v2:
    docker:
      - image: cimg/python:3.10
    resource_class: small
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Install OpenJDK
          command: sudo apt-get update && sudo apt-get install default-jdk
      - run:
          name: Install dependencies
          command: make install-dev
      - run:
          name: Install Pydantic V2
          command: pip install --upgrade "pydantic[email]~=2.3.0" pydantic-settings
      - run:
          name: Run linters and code style checks
          command: make py-style
      - run:
          name: Run unit tests
          command: make unit-test

  ui_style:
    docker:
      - image: cimg/python:3.7
    resource_class: small
    steps:
      - halt_unless_client
      - checkout
      - run:
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            python --version --version >> pre-commit-cache-key.txt
      - restore_cache:
          keys:
            - v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
      - run:
          name: Install pre-commit
          command: pip install pre-commit
      - run:
          name: Run linters and code style checks
          command: make ui-style
      - save_cache:
          key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit

  ui_test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.37.1-jammy
    resource_class: medium
    steps:
      - halt_unless_client
      - checkout
      - restore_cache:
          keys:
            - v1-nm-cache-{{ checksum "web/client/package-lock.json" }}
      - run:
          name: Install packages
          command: npm --prefix web/client ci
      - save_cache:
          key: v1-nm-cache-{{ checksum "web/client/package-lock.json" }}
          paths:
            - /root/.npm
      - run:
          name: Run tests
          command: npm --prefix web/client run test

  core_integration_tests:
    docker:
      - image: cimg/python:3.7
    resource_class: small
    steps:
      - halt_unless_core
      - checkout
      - run:
          name: Install dependencies
          command: make install-dev
      - run:
          name: Run Core integration tests
          command: make core-it-test

  airflow_integration_tests:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - run:
          name: Install envsubst
          command: sudo apt-get update && sudo apt-get install gettext-base
      - run:
          name: Install ruamel.yaml
          command: pip3 install ruamel.yaml==0.16.0
      - run:
          name: Run Airflow integration tests
          command: make airflow-it-test-docker-with-env
          no_output_timeout: 15m
      - run:
          name: Collect Airflow logs
          command: |
            tar -czf ./airflow_logs.tgz -C ./examples/airflow/logs .
            mkdir -p /tmp/airflow_logs
            cp ./airflow_logs.tgz /tmp/airflow_logs/
          when: on_fail
      - store_artifacts:
          path: /tmp/airflow_logs

  engine_adapter_integration_local_only_tests:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - run:
          name: Install pg_config
          command: sudo apt-get update && sudo apt-get install libpq-dev
      - run:
          name: Install dependencies
          command: make install-engine-integration
      - run:
          name: Bring up MySQL, Postgres, and MSSQL
          command: make core_engine_it_test_docker
      - run:
          name: Make sure DBs are ready
          command: sleep 10
      - run:
          name: Run tests
          command: make core_engine_it_test_local_only
          no_output_timeout: 15m

workflows:
  main_pr:
    jobs:
      - style_and_unit_tests:
          matrix:
            parameters:
              python_version:
                ["3.7", "3.8", "3.9", "3.10", "3.11"]
      - style_and_unit_tests_pydantic_v2
      - core_integration_tests
      - airflow_integration_tests:
          requires:
            - style_and_unit_tests
          filters:
            branches:
              only:
                - main
      - engine_adapter_integration_local_only_tests:
          context: engine_adapter_integration
          requires:
            - style_and_unit_tests
          filters:
            branches:
              only:
                - main
      - ui_style
      - ui_test
