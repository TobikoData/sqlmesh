[project]
name = "sqlmesh"
dynamic = ["version"]
description = "Next-generation data transformation framework"
readme = "README.md"
authors = [{ name = "TobikoData Inc.", email = "engineering@tobikodata.com" }]
license = { file = "LICENSE" }
requires-python = ">= 3.9"
dependencies = [
    "astor",
    "click",
    "croniter",
    "duckdb!=0.10.3",
    "dateparser",
    "hyperscript>=0.1.0",
    "importlib-metadata; python_version<'3.12'",
    "ipywidgets",
    "jinja2",
    "pandas",
    "pydantic>=2.0.0",
    "requests",
    "rich[jupyter]",
    "ruamel.yaml",
    "sqlglot[rs]~=26.11.1",
    "tenacity",
    "time-machine",
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: SQL",
    "Programming Language :: Python :: 3 :: Only",
]

[project.optional-dependencies]
athena = ["PyAthena[Pandas]"]
azuresql = ["pymssql"]
bigquery = [
    "google-cloud-bigquery[pandas]",
    "google-cloud-bigquery-storage"
]
bigframes = ["bigframes>=1.32.0"]
clickhouse = ["clickhouse-connect"]
databricks = ["databricks-sql-connector"]
dev = [
    "agate==1.7.1",
    "apache-airflow==2.9.1",
    "opentelemetry-proto==1.27.0", # pip was having trouble resolving this transitive dependency of airflow
    "beautifulsoup4",
    "clickhouse-connect",
    "cryptography",
    "databricks-sql-connector",
    "dbt-bigquery",
    "dbt-core",
    "dbt-duckdb>=1.7.1",
    "dbt-snowflake",
    "dbt-athena-community",
    "dbt-clickhouse",
    "dbt-databricks",
    "dbt-redshift",
    "dbt-sqlserver>=1.7.0",
    "dbt-trino",
    "Faker",
    "google-auth",
    "google-cloud-bigquery",
    "google-cloud-bigquery-storage",
    "mypy~=1.13.0",
    "pandas-stubs",
    "pre-commit",
    "psycopg2-binary",
    "pydantic",
    "PyAthena[Pandas]",
    "PyGithub~=2.5.0",
    "pyspark~=3.5.0",
    "pytest",
    "pytest-asyncio",
    "pytest-mock",
    "pytest-retry",
    "pytest-xdist",
    "pytz",
    "redshift_connector",
    "ruff~=0.7.0",
    "snowflake-connector-python[pandas,secure-local-storage]>=3.0.2",
    "sqlalchemy-stubs",
    "trino",
    "types-croniter",
    "types-dateparser",
    "types-PyMySQL",
    "types-python-dateutil",
    "types-pytz",
    "types-requests==2.28.8",
    "typing-extensions",
]
dbt = ["dbt-core<2"]
dlt = ["dlt"]
gcppostgres = ["cloud-sql-python-connector[pg8000]>=1.8.0"]
github = ["PyGithub~=2.5.0"]
llm = ["langchain", "openai"]
mssql = ["pymssql"]
mysql = ["pymysql"]
mwaa = ["boto3"]
postgres = ["psycopg2"]
redshift = ["redshift_connector"]
slack = ["slack_sdk"]
snowflake = [
    "cryptography",
    "snowflake-connector-python[pandas,secure-local-storage]",
    # as at 2024-08-05, snowflake-snowpark-python is only available up to Python 3.11
    "snowflake-snowpark-python; python_version<'3.12'",
]
trino = ["trino"]
web = [
    "fastapi==0.115.5",
    "watchfiles>=0.19.0",
    "uvicorn[standard]==0.22.0",
    "sse-starlette>=0.2.2",
    "pyarrow",
]
risingwave = ["psycopg2"]

[project.scripts]
sqlmesh = "sqlmesh.cli.main:cli"
sqlmesh_cicd = "sqlmesh.cicd.bot:bot"

[project.entry-points."airflow.plugins"]
sqlmesh_airflow = "sqlmesh.schedulers.airflow.plugin:SqlmeshAirflowPlugin"

[project.urls]
Homepage = "https://sqlmesh.com/"
Documentation = "https://sqlmesh.readthedocs.io/en/stable/"
Repository = "https://github.com/TobikoData/sqlmesh"
Issues = "https://github.com/TobikoData/sqlmesh/issues"

[build-system]
requires = ["setuptools >= 61.0", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = false

[tool.setuptools_scm]
version_file = "sqlmesh/_version.py"
fallback_version = "0.0.0"
local_scheme = "no-local-version"

[tool.setuptools.packages.find]
include = ["sqlmesh", "sqlmesh.*", "web*"]

[tool.setuptools.package-data]
web = ["client/dist/**"]
"*" = ["py.typed"]

# MyPy Rules
[tool.mypy]
plugins = "pydantic.mypy"
no_implicit_optional = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "examples.*.macros.*",
    "tests.*",
    "sqlmesh.migrations.*"
]
disallow_untyped_defs = false
# Sometimes it's helpful to use types within an "untyped" function because it allows IDE assistance
# Unfortunately this causes MyPy to print an annoying 'By default the bodies of untyped functions are not checked'
# warning so we disable that warning here
disable_error_code = "annotation-unchecked"

[[tool.mypy.overrides]]
module = [
    "api.*",
    "airflow.*",
    "astor.*",
    "IPython.*",
    "hyperscript.*",
    "py.*",
    "ruamel.*",
    "setuptools.*",
    "graphviz.*",
    "ipywidgets.*",
    "google.*",
    "snowflake.*",
    "redshift_connector",
    "databricks.*",
    "faker.*",
    "agate.*",
    "databricks_cli.*",
    "mysql.*",
    "pymssql.*",
    "psycopg2.*",
    "langchain.*",
    "pytest_lazyfixture.*",
    "dbt.adapters.*",
    "slack_sdk.*",
    "py4j.*",
    "boto3.*",
    "trino.*",
    "bs4.*",
    "pydantic_core.*",
    "dlt.*",
    "bigframes.*",
]
ignore_missing_imports = true
