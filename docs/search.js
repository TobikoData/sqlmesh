window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "sqlmesh", "modulename": "sqlmesh", "kind": "module", "doc": "<p><img src=\"sqlmesh.svg\" alt=\"SQLMesh logo\" /></p>\n\n<p>SQLMesh is a DataOps framework that brings the best practices of DevOps to data teams. It enables data scientists, analysts, and engineers to efficiently run and deploy data transformations written in SQL or Python.</p>\n\n<p>For more infromation, check out the <a href=\"https://sqlmesh.com\">website</a> and <a href=\"https://sqlmesh.readthedocs.io/en/latest/\">documentation</a>.</p>\n\n<h2 id=\"geting-started\">Geting Started</h2>\n\n<p>Install SQLMesh through <a href=\"https://pypi.org/project/sqlmesh/\">pypi</a> by running:</p>\n\n<p><code>pip install sqlmesh</code></p>\n\n<p>Follow the <a href=\"https://sqlmesh.readthedocs.io/en/latest/quick_start/\">tutorial</a> to learn how to use SQLMesh.</p>\n\n<h2 id=\"join-our-community\">Join our community</h2>\n\n<p>We'd love to join you on your data journey. Connect with us in the following ways:</p>\n\n<ul>\n<li>Join the <a href=\"https://join.slack.com/t/tobiko-data/shared_invite/zt-1je7o3xhd-C7~GuZTj0a8xz_uQbTJjHg\">Tobiko Slack community</a> to ask questions, or just to say hi!</li>\n<li>File an issue on our <a href=\"https://github.com/TobikoData/sqlmesh/issues/new\">GitHub</a>.</li>\n<li>Send us an email at <a href=\"hello@tobikodata.com\">hello@tobikodata.com</a> with your questions or feedback.</li>\n</ul>\n\n<h2 id=\"contribution\">Contribution</h2>\n\n<p>Contributions in the form of issues or pull requests are greatly appreciated. <a href=\"https://sqlmesh.readthedocs.io/en/latest/quick_start/development/\">Read more</a> about how to develop for SQLMesh.</p>\n"}, {"fullname": "sqlmesh.RuntimeEnv", "modulename": "sqlmesh", "qualname": "RuntimeEnv", "kind": "class", "doc": "<p>Enum defining what environment SQLMesh is running in.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.RuntimeEnv.TERMINAL", "modulename": "sqlmesh", "qualname": "RuntimeEnv.TERMINAL", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;RuntimeEnv.TERMINAL: &#x27;terminal&#x27;&gt;"}, {"fullname": "sqlmesh.RuntimeEnv.DATABRICKS", "modulename": "sqlmesh", "qualname": "RuntimeEnv.DATABRICKS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;RuntimeEnv.DATABRICKS: &#x27;databricks&#x27;&gt;"}, {"fullname": "sqlmesh.RuntimeEnv.GOOGLE_COLAB", "modulename": "sqlmesh", "qualname": "RuntimeEnv.GOOGLE_COLAB", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;RuntimeEnv.GOOGLE_COLAB: &#x27;google_colab&#x27;&gt;"}, {"fullname": "sqlmesh.RuntimeEnv.JUPYTER", "modulename": "sqlmesh", "qualname": "RuntimeEnv.JUPYTER", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;RuntimeEnv.JUPYTER: &#x27;jupyter&#x27;&gt;"}, {"fullname": "sqlmesh.RuntimeEnv.get", "modulename": "sqlmesh", "qualname": "RuntimeEnv.get", "kind": "function", "doc": "<p>Get the console class to use based on the environment that the code is running in\nReference implementation: <a href=\"https://github.com/noklam/rich/blob/d3a1ae61a77d934844563514370084971bc3e143/rich/console.py#L511-L528\">https://github.com/noklam/rich/blob/d3a1ae61a77d934844563514370084971bc3e143/rich/console.py#L511-L528</a></p>\n\n<p>Unlike the rich implementation we try to split out by notebook type instead of treating it all as Jupyter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">RuntimeEnv</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.runtime_env", "modulename": "sqlmesh", "qualname": "runtime_env", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;RuntimeEnv.TERMINAL: &#x27;terminal&#x27;&gt;"}, {"fullname": "sqlmesh.CustomFormatter", "modulename": "sqlmesh", "qualname": "CustomFormatter", "kind": "class", "doc": "<p>Custom logging formatter.</p>\n", "bases": "logging.Formatter"}, {"fullname": "sqlmesh.CustomFormatter.format", "modulename": "sqlmesh", "qualname": "CustomFormatter.format", "kind": "function", "doc": "<p>Format the specified record as text.</p>\n\n<p>The record's attribute dictionary is used as the operand to a\nstring formatting operation which yields the returned string.\nBefore formatting the dictionary, a couple of preparatory steps\nare carried out. The message attribute of the record is computed\nusing LogRecord.getMessage(). If the formatting string uses the\ntime (as determined by a call to usesTime(), formatTime() is\ncalled to format the event time. If there is exception information,\nit is formatted using formatException() and appended to the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">LogRecord</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.enable_logging", "modulename": "sqlmesh", "qualname": "enable_logging", "kind": "function", "doc": "<p>Enable logging to send to stdout and color different levels</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli", "modulename": "sqlmesh.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.cli.error_handler", "modulename": "sqlmesh.cli", "qualname": "error_handler", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">DECORATOR_RETURN_TYPE</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">DECORATOR_RETURN_TYPE</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.example_project", "modulename": "sqlmesh.cli.example_project", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.cli.example_project.ProjectTemplate", "modulename": "sqlmesh.cli.example_project", "qualname": "ProjectTemplate", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "sqlmesh.cli.example_project.ProjectTemplate.AIRFLOW", "modulename": "sqlmesh.cli.example_project", "qualname": "ProjectTemplate.AIRFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ProjectTemplate.AIRFLOW: &#x27;airflow&#x27;&gt;"}, {"fullname": "sqlmesh.cli.example_project.ProjectTemplate.DBT", "modulename": "sqlmesh.cli.example_project", "qualname": "ProjectTemplate.DBT", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ProjectTemplate.DBT: &#x27;dbt&#x27;&gt;"}, {"fullname": "sqlmesh.cli.example_project.ProjectTemplate.DEFAULT", "modulename": "sqlmesh.cli.example_project", "qualname": "ProjectTemplate.DEFAULT", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ProjectTemplate.DEFAULT: &#x27;default&#x27;&gt;"}, {"fullname": "sqlmesh.cli.example_project.init_example_project", "modulename": "sqlmesh.cli.example_project", "qualname": "init_example_project", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">example_project</span><span class=\"o\">.</span><span class=\"n\">ProjectTemplate</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ProjectTemplate</span><span class=\"o\">.</span><span class=\"n\">DEFAULT</span><span class=\"p\">:</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.main", "modulename": "sqlmesh.cli.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.cli.main.cli", "modulename": "sqlmesh.cli.main", "qualname": "cli", "kind": "variable", "doc": "<p>SQLMesh command line tool.</p>\n", "default_value": " = &lt;Group cli&gt;"}, {"fullname": "sqlmesh.cli.main.init", "modulename": "sqlmesh.cli.main", "qualname": "init", "kind": "variable", "doc": "<p>Create a new SQLMesh repository.</p>\n", "default_value": " = &lt;Command init&gt;"}, {"fullname": "sqlmesh.cli.main.render", "modulename": "sqlmesh.cli.main", "qualname": "render", "kind": "variable", "doc": "<p>Renders a model's query, optionally expanding referenced models.</p>\n", "default_value": " = &lt;Command render&gt;"}, {"fullname": "sqlmesh.cli.main.evaluate", "modulename": "sqlmesh.cli.main", "qualname": "evaluate", "kind": "variable", "doc": "<p>Evaluate a model and return a dataframe with a default limit of 1000.</p>\n", "default_value": " = &lt;Command evaluate&gt;"}, {"fullname": "sqlmesh.cli.main.format", "modulename": "sqlmesh.cli.main", "qualname": "format", "kind": "variable", "doc": "<p>Format all models in a given directory.</p>\n", "default_value": " = &lt;Command format&gt;"}, {"fullname": "sqlmesh.cli.main.diff", "modulename": "sqlmesh.cli.main", "qualname": "diff", "kind": "variable", "doc": "<p>Show the diff between the current context and a given environment.</p>\n", "default_value": " = &lt;Command diff&gt;"}, {"fullname": "sqlmesh.cli.main.plan", "modulename": "sqlmesh.cli.main", "qualname": "plan", "kind": "variable", "doc": "<p>Plan a migration of the current context's models with the given environment.</p>\n", "default_value": " = &lt;Command plan&gt;"}, {"fullname": "sqlmesh.cli.main.run", "modulename": "sqlmesh.cli.main", "qualname": "run", "kind": "variable", "doc": "<p>Evaluates the DAG of models using the built-in scheduler.</p>\n", "default_value": " = &lt;Command run&gt;"}, {"fullname": "sqlmesh.cli.main.dag", "modulename": "sqlmesh.cli.main", "qualname": "dag", "kind": "variable", "doc": "<p>Renders the dag using graphviz.</p>\n\n<p>This command requires a manual install of both the python and system graphviz package.</p>\n", "default_value": " = &lt;Command dag&gt;"}, {"fullname": "sqlmesh.cli.main.test", "modulename": "sqlmesh.cli.main", "qualname": "test", "kind": "variable", "doc": "<p>Run model unit tests.</p>\n", "default_value": " = &lt;Command test&gt;"}, {"fullname": "sqlmesh.cli.main.audit", "modulename": "sqlmesh.cli.main", "qualname": "audit", "kind": "variable", "doc": "<p>Run audits.</p>\n", "default_value": " = &lt;Command audit&gt;"}, {"fullname": "sqlmesh.cli.main.fetchdf", "modulename": "sqlmesh.cli.main", "qualname": "fetchdf", "kind": "variable", "doc": "<p>Runs a sql query and displays the results.</p>\n", "default_value": " = &lt;Command fetchdf&gt;"}, {"fullname": "sqlmesh.cli.main.version", "modulename": "sqlmesh.cli.main", "qualname": "version", "kind": "variable", "doc": "<p>Print version.</p>\n", "default_value": " = &lt;Command version&gt;"}, {"fullname": "sqlmesh.cli.options", "modulename": "sqlmesh.cli.options", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.cli.options.path", "modulename": "sqlmesh.cli.options", "qualname": "path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.options.config", "modulename": "sqlmesh.cli.options", "qualname": "config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.options.start_time", "modulename": "sqlmesh.cli.options", "qualname": "start_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.options.end_time", "modulename": "sqlmesh.cli.options", "qualname": "end_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.options.latest_time", "modulename": "sqlmesh.cli.options", "qualname": "latest_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.options.expand", "modulename": "sqlmesh.cli.options", "qualname": "expand", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.options.file", "modulename": "sqlmesh.cli.options", "qualname": "file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.options.match_pattern", "modulename": "sqlmesh.cli.options", "qualname": "match_pattern", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.cli.options.verbose", "modulename": "sqlmesh.cli.options", "qualname": "verbose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">FC</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">FC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core", "modulename": "sqlmesh.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.audit", "modulename": "sqlmesh.core.audit", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.audit.builtin", "modulename": "sqlmesh.core.audit.builtin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.audit.definition", "modulename": "sqlmesh.core.audit.definition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.audit.definition.AuditMeta", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditMeta", "kind": "class", "doc": "<p>Metadata for audits which can be defined in SQL.</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.audit.definition.AuditMeta.name", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditMeta.name", "kind": "variable", "doc": "<p>The name of this audit.</p>\n", "annotation": ": str"}, {"fullname": "sqlmesh.core.audit.definition.AuditMeta.dialect", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditMeta.dialect", "kind": "variable", "doc": "<p>The dialect of the audit query.</p>\n", "annotation": ": str"}, {"fullname": "sqlmesh.core.audit.definition.AuditMeta.skip", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditMeta.skip", "kind": "variable", "doc": "<p>Setting this to <code>true</code> will cause this audit to be skipped. Defaults to <code>false</code>.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.audit.definition.AuditMeta.blocking", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditMeta.blocking", "kind": "variable", "doc": "<p>Setting this to <code>true</code> will cause the pipeline execution to stop if this audit fails. Defaults to <code>true</code>.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.audit.definition.Audit", "modulename": "sqlmesh.core.audit.definition", "qualname": "Audit", "kind": "class", "doc": "<p>Audit is an assertion made about your SQLMesh models.</p>\n\n<p>An audit is a SQL query that returns bad records.</p>\n", "bases": "AuditMeta"}, {"fullname": "sqlmesh.core.audit.definition.Audit.load", "modulename": "sqlmesh.core.audit.definition", "qualname": "Audit.load", "kind": "function", "doc": "<p>Load an audit from a parsed SQLMesh audit file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expressions:</strong>  Audit, *Statements, Query</li>\n<li><strong>path:</strong>  An optional path of the file.</li>\n<li><strong>dialect:</strong>  The default dialect if no audit dialect is configured.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">audit</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Audit</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.audit.definition.Audit.load_multiple", "modulename": "sqlmesh.core.audit.definition", "qualname": "Audit.load_multiple", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">audit</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Audit</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.audit.definition.Audit.render_query", "modulename": "sqlmesh.core.audit.definition", "qualname": "Audit.render_query", "kind": "function", "doc": "<p>Renders the audit's query.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_or_model:</strong>  The snapshot or model which is being audited.</li>\n<li><strong>start:</strong>  The start datetime to render. Defaults to epoch start.</li>\n<li><strong>end:</strong>  The end datetime to render. Defaults to epoch start.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries. Defaults to epoch start.</li>\n<li><strong>snapshots:</strong>  All snapshots (by model name) to use for mapping of physical locations.</li>\n<li><strong>audit_name:</strong>  The name of audit if the query to render is for an audit.</li>\n<li><strong>is_dev:</strong>  Indicates whether the rendering happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n<li><strong>kwargs:</strong>  Additional kwargs to pass to the renderer.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The rendered expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_or_model</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">,</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Subqueryable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.audit.definition.Audit.macro_definitions", "modulename": "sqlmesh.core.audit.definition", "qualname": "Audit.macro_definitions", "kind": "variable", "doc": "<p>All macro definitions from the list of expressions.</p>\n", "annotation": ": List[sqlmesh.core.dialect.MacroDef]"}, {"fullname": "sqlmesh.core.audit.definition.AuditResult", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditResult", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.audit.definition.AuditResult.audit", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditResult.audit", "kind": "variable", "doc": "<p>The audit this result is for.</p>\n", "annotation": ": sqlmesh.core.audit.definition.Audit"}, {"fullname": "sqlmesh.core.audit.definition.AuditResult.count", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditResult.count", "kind": "variable", "doc": "<p>The number of records returned by the audit query.</p>\n", "annotation": ": int"}, {"fullname": "sqlmesh.core.audit.definition.AuditResult.query", "modulename": "sqlmesh.core.audit.definition", "qualname": "AuditResult.query", "kind": "variable", "doc": "<p>The rendered query used by the audit.</p>\n", "annotation": ": sqlglot.expressions.Expression"}, {"fullname": "sqlmesh.core.config", "modulename": "sqlmesh.core.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.base", "modulename": "sqlmesh.core.config.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.base.UpdateStrategy", "modulename": "sqlmesh.core.config.base", "qualname": "UpdateStrategy", "kind": "class", "doc": "<p>Supported strategies for adding new config to existing config</p>\n", "bases": "enum.Enum"}, {"fullname": "sqlmesh.core.config.base.UpdateStrategy.REPLACE", "modulename": "sqlmesh.core.config.base", "qualname": "UpdateStrategy.REPLACE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;UpdateStrategy.REPLACE: 1&gt;"}, {"fullname": "sqlmesh.core.config.base.UpdateStrategy.EXTEND", "modulename": "sqlmesh.core.config.base", "qualname": "UpdateStrategy.EXTEND", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;UpdateStrategy.EXTEND: 2&gt;"}, {"fullname": "sqlmesh.core.config.base.UpdateStrategy.KEY_UPDATE", "modulename": "sqlmesh.core.config.base", "qualname": "UpdateStrategy.KEY_UPDATE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;UpdateStrategy.KEY_UPDATE: 3&gt;"}, {"fullname": "sqlmesh.core.config.base.UpdateStrategy.KEY_EXTEND", "modulename": "sqlmesh.core.config.base", "qualname": "UpdateStrategy.KEY_EXTEND", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;UpdateStrategy.KEY_EXTEND: 4&gt;"}, {"fullname": "sqlmesh.core.config.base.UpdateStrategy.IMMUTABLE", "modulename": "sqlmesh.core.config.base", "qualname": "UpdateStrategy.IMMUTABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;UpdateStrategy.IMMUTABLE: 5&gt;"}, {"fullname": "sqlmesh.core.config.base.UpdateStrategy.NESTED_UPDATE", "modulename": "sqlmesh.core.config.base", "qualname": "UpdateStrategy.NESTED_UPDATE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;UpdateStrategy.NESTED_UPDATE: 6&gt;"}, {"fullname": "sqlmesh.core.config.base.update_field", "modulename": "sqlmesh.core.config.base", "qualname": "update_field", "kind": "function", "doc": "<p>Update config field with new config value</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>old:</strong>  The existing config value</li>\n<li><strong>new:</strong>  The new config value</li>\n<li><strong>update_strategy:</strong>  The strategy to use when updating the field</li>\n<li>The updated field</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">update_strategy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.base.BaseConfig", "modulename": "sqlmesh.core.config.base", "qualname": "BaseConfig", "kind": "class", "doc": "<p>Base configuration functionality for configuration classes.</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.config.base.BaseConfig.update_with", "modulename": "sqlmesh.core.config.base", "qualname": "BaseConfig.update_with", "kind": "function", "doc": "<p>Updates this instance's fields with the passed in config fields and returns a new instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  Other configuration.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>New instance updated with the passed in config fields</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.categorizer", "modulename": "sqlmesh.core.config.categorizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.categorizer.AutoCategorizationMode", "modulename": "sqlmesh.core.config.categorizer", "qualname": "AutoCategorizationMode", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "sqlmesh.core.config.categorizer.AutoCategorizationMode.FULL", "modulename": "sqlmesh.core.config.categorizer", "qualname": "AutoCategorizationMode.FULL", "kind": "variable", "doc": "<p>Full-auto mode in which the categorizer falls back to the most conservative choice (breaking).</p>\n", "default_value": " = &lt;AutoCategorizationMode.FULL: &#x27;full&#x27;&gt;"}, {"fullname": "sqlmesh.core.config.categorizer.AutoCategorizationMode.SEMI", "modulename": "sqlmesh.core.config.categorizer", "qualname": "AutoCategorizationMode.SEMI", "kind": "variable", "doc": "<p>Semi-auto mode in which a user is promted to provide a category in case when the categorizer\nfailed to determine it automatically.</p>\n", "default_value": " = &lt;AutoCategorizationMode.SEMI: &#x27;semi&#x27;&gt;"}, {"fullname": "sqlmesh.core.config.categorizer.AutoCategorizationMode.OFF", "modulename": "sqlmesh.core.config.categorizer", "qualname": "AutoCategorizationMode.OFF", "kind": "variable", "doc": "<p>Disables automatic categorization.</p>\n", "default_value": " = &lt;AutoCategorizationMode.OFF: &#x27;off&#x27;&gt;"}, {"fullname": "sqlmesh.core.config.categorizer.CategorizerConfig", "modulename": "sqlmesh.core.config.categorizer", "qualname": "CategorizerConfig", "kind": "class", "doc": "<p>Configuration for the automatic categorizer of snapshot changes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>python:</strong>  the auto categorization mode for Python models.</li>\n<li><strong>sql:</strong>  the auto categorization mode for SQL models.</li>\n<li><strong>seed:</strong>  the auto categorization mode for Seed models.</li>\n</ul>\n", "bases": "sqlmesh.core.config.base.BaseConfig"}, {"fullname": "sqlmesh.core.config.common", "modulename": "sqlmesh.core.config.common", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.common.concurrent_tasks_validator", "modulename": "sqlmesh.core.config.common", "qualname": "concurrent_tasks_validator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.common.http_headers_validator", "modulename": "sqlmesh.core.config.common", "qualname": "http_headers_validator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.connection", "modulename": "sqlmesh.core.config.connection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.connection.DuckDBConnectionConfig", "modulename": "sqlmesh.core.config.connection", "qualname": "DuckDBConnectionConfig", "kind": "class", "doc": "<p>Configuration for the DuckDB connection.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>database:</strong>  The optional database name. If not specified, the in-memory database will be used.</li>\n<li><strong>concurrent_tasks:</strong>  The maximum number of tasks that can use this connection concurrently.</li>\n</ul>\n", "bases": "_ConnectionConfig"}, {"fullname": "sqlmesh.core.config.connection.SnowflakeConnectionConfig", "modulename": "sqlmesh.core.config.connection", "qualname": "SnowflakeConnectionConfig", "kind": "class", "doc": "<p>Configuration for the Snowflake connection.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>user:</strong>  The Snowflake username.</li>\n<li><strong>password:</strong>  The Snowflake password.</li>\n<li><strong>account:</strong>  The Snowflake account name.</li>\n<li><strong>warehouse:</strong>  The optional warehouse name.</li>\n<li><strong>database:</strong>  The optional database name.</li>\n<li><strong>role:</strong>  The optional role name.</li>\n<li><strong>concurrent_tasks:</strong>  The maximum number of tasks that can use this connection concurrently.</li>\n</ul>\n", "bases": "_ConnectionConfig"}, {"fullname": "sqlmesh.core.config.connection.DatabricksSQLConnectionConfig", "modulename": "sqlmesh.core.config.connection", "qualname": "DatabricksSQLConnectionConfig", "kind": "class", "doc": "<p>Configuration for the Databricks API connection. This connection is used to access the Databricks\nwhen you don't have access to a SparkSession. Ex: Running Jupyter locally on your laptop to connect to a\nDatabricks cluster</p>\n\n<p>Arg Source: <a href=\"https://github.com/databricks/databricks-sql-python/blob/main/src/databricks/sql/client.py#L39\">https://github.com/databricks/databricks-sql-python/blob/main/src/databricks/sql/client.py#L39</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>server_hostname:</strong>  Databricks instance host name.</li>\n<li><strong>http_path:</strong>  Http path either to a DBSQL endpoint (e.g. /sql/1.0/endpoints/1234567890abcdef)\nor to a DBR interactive cluster (e.g. /sql/protocolv1/o/1234567890123456/1234-123456-slid123)</li>\n<li><strong>access_token:</strong>  Http Bearer access token, e.g. Databricks Personal Access Token.</li>\n<li><strong>http_headers:</strong>  An optional list of (k, v) pairs that will be set as Http headers on every request</li>\n<li><strong>session_configuration:</strong>  An optional dictionary of Spark session parameters. Defaults to None.\nExecute the SQL command <code>SET -v</code> to get a full list of available commands.</li>\n</ul>\n", "bases": "_ConnectionConfig"}, {"fullname": "sqlmesh.core.config.connection.DatabricksSparkSessionConnectionConfig", "modulename": "sqlmesh.core.config.connection", "qualname": "DatabricksSparkSessionConnectionConfig", "kind": "class", "doc": "<p>Configuration for the Databricks connection. This connection is used to access the Databricks\nwhen you have access to a SparkSession. Ex: Running in a Databricks notebook or cluster</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>spark_config:</strong>  An optional dictionary of Spark session parameters. Defaults to None.</li>\n</ul>\n", "bases": "_ConnectionConfig"}, {"fullname": "sqlmesh.core.config.connection.DatabricksConnectionConfig", "modulename": "sqlmesh.core.config.connection", "qualname": "DatabricksConnectionConfig", "kind": "class", "doc": "<p>Databricks connection that prefers to use SparkSession if available, otherwise it will use the Databricks API.</p>\n\n<p>Arg Source: <a href=\"https://github.com/databricks/databricks-sql-python/blob/main/src/databricks/sql/client.py#L39\">https://github.com/databricks/databricks-sql-python/blob/main/src/databricks/sql/client.py#L39</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>server_hostname:</strong>  Databricks instance host name.</li>\n<li><strong>http_path:</strong>  Http path either to a DBSQL endpoint (e.g. /sql/1.0/endpoints/1234567890abcdef)\nor to a DBR interactive cluster (e.g. /sql/protocolv1/o/1234567890123456/1234-123456-slid123)</li>\n<li><strong>access_token:</strong>  Http Bearer access token, e.g. Databricks Personal Access Token.</li>\n<li><strong>http_headers:</strong>  An optional list of (k, v) pairs that will be set as Http headers on every request</li>\n<li><strong>session_configuration:</strong>  An optional dictionary of Spark session parameters. Defaults to None.\nExecute the SQL command <code>SET -v</code> to get a full list of available commands.</li>\n<li><strong>spark_config:</strong>  An optional dictionary of Spark session parameters. Defaults to None.</li>\n</ul>\n", "bases": "_ConnectionConfig"}, {"fullname": "sqlmesh.core.config.connection.DatabricksConnectionConfig.Config", "modulename": "sqlmesh.core.config.connection", "qualname": "DatabricksConnectionConfig.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.connection.DatabricksConnectionConfig.Config.__init__", "modulename": "sqlmesh.core.config.connection", "qualname": "DatabricksConnectionConfig.Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.core.config.connection.BigQueryConnectionConfig", "modulename": "sqlmesh.core.config.connection", "qualname": "BigQueryConnectionConfig", "kind": "class", "doc": "<p>BigQuery Connection Configuration.</p>\n\n<p>TODO: Need to update to support all the different authentication options</p>\n", "bases": "_ConnectionConfig"}, {"fullname": "sqlmesh.core.config.connection.RedshiftConnectionConfig", "modulename": "sqlmesh.core.config.connection", "qualname": "RedshiftConnectionConfig", "kind": "class", "doc": "<p>Redshift Connection Configuration.</p>\n\n<p>Arg Source: <a href=\"https://github.com/aws/amazon-redshift-python-driver/blob/master/redshift_connector/__init__.py#L146\">https://github.com/aws/amazon-redshift-python-driver/blob/master/redshift_connector/__init__.py#L146</a>\nNote: A subset of properties were selected. Please open an issue/PR if you want to see more supported.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>user:</strong>  The username to use for authentication with the Amazon Redshift cluster.</li>\n<li><strong>password:</strong>  The password to use for authentication with the Amazon Redshift cluster.</li>\n<li><strong>database:</strong>  The name of the database instance to connect to.</li>\n<li><strong>host:</strong>  The hostname of the Amazon Redshift cluster.</li>\n<li><strong>port:</strong>  The port number of the Amazon Redshift cluster. Default value is 5439.</li>\n<li><strong>source_address:</strong>  No description provided</li>\n<li><strong>unix_sock:</strong>  No description provided</li>\n<li><strong>ssl:</strong>  Is SSL enabled. Default value is <code>True</code>. SSL must be enabled when authenticating using IAM.</li>\n<li><strong>sslmode:</strong>  The security of the connection to the Amazon Redshift cluster. 'verify-ca' and 'verify-full' are supported.</li>\n<li><strong>timeout:</strong>  The number of seconds before the connection to the server will timeout. By default there is no timeout.</li>\n<li><strong>tcp_keepalive:</strong>  Is <a href=\"https://en.wikipedia.org/wiki/Keepalive#TCP_keepalive\">TCP keepalive </a> used. The default value is <code>True</code>.</li>\n<li><strong>application_name:</strong>  Sets the application name. The default value is None.</li>\n<li><strong>preferred_role:</strong>  The IAM role preferred for the current connection.</li>\n<li><strong>principal_arn:</strong>  The ARN of the IAM entity (user or role) for which you are generating a policy.</li>\n<li><strong>credentials_provider:</strong>  The class name of the IdP that will be used for authenticating with the Amazon Redshift cluster.</li>\n<li><strong>region:</strong>  The AWS region where the Amazon Redshift cluster is located.</li>\n<li><strong>cluster_identifier:</strong>  The cluster identifier of the Amazon Redshift cluster.</li>\n<li><strong>iam:</strong>  If IAM authentication is enabled. Default value is False. IAM must be True when authenticating using an IdP.</li>\n<li><strong>is_serverless:</strong>  Redshift end-point is serverless or provisional. Default value false.</li>\n<li><strong>serverless_acct_id:</strong>  The account ID of the serverless. Default value None</li>\n<li><strong>serverless_work_group:</strong>  The name of work group for serverless end point. Default value None.</li>\n</ul>\n", "bases": "_ConnectionConfig"}, {"fullname": "sqlmesh.core.config.loader", "modulename": "sqlmesh.core.config.loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.loader.load_config_from_paths", "modulename": "sqlmesh.core.config.loader", "qualname": "load_config_from_paths", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">config_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;config&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">load_from_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">Config</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.loader.load_config_from_yaml", "modulename": "sqlmesh.core.config.loader", "qualname": "load_config_from_yaml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">Config</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.loader.load_config_from_python_module", "modulename": "sqlmesh.core.config.loader", "qualname": "load_config_from_python_module", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">module_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">config_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;config&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">Config</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.loader.load_config_from_env", "modulename": "sqlmesh.core.config.loader", "qualname": "load_config_from_env", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">Config</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.model", "modulename": "sqlmesh.core.config.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.model.ModelDefaultsConfig", "modulename": "sqlmesh.core.config.model", "qualname": "ModelDefaultsConfig", "kind": "class", "doc": "<p>A config object for default values applied to model definitions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>kind:</strong>  The model kind.</li>\n<li><strong>dialect:</strong>  The SQL dialect that the model's query is written in.</li>\n<li><strong>cron:</strong>  A cron string specifying how often the model should be refreshed, leveraging the\n<a href=\"https://github.com/kiorky/croniter\">croniter</a> library.</li>\n<li><strong>owner:</strong>  The owner of the model.</li>\n<li><strong>start:</strong>  The earliest date that the model will be backfilled for. If this is None,\nthen the date is inferred by taking the most recent start date of its ancestors.\nThe start date can be a static datetime or a relative datetime like \"1 year ago\"</li>\n<li><strong>batch_size:</strong>  The maximum number of intervals that can be run per backfill job. If this is None,\nthen backfilling this model will do all of history in one job. If this is set, a model's backfill\nwill be chunked such that each individual job will only contain jobs with max <code>batch_size</code> intervals.</li>\n<li><strong>storage_format:</strong>  The storage format used to store the physical table, only applicable in certain engines.\n(eg. 'parquet')</li>\n</ul>\n", "bases": "sqlmesh.core.config.base.BaseConfig"}, {"fullname": "sqlmesh.core.config.root", "modulename": "sqlmesh.core.config.root", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.root.Config", "modulename": "sqlmesh.core.config.root", "qualname": "Config", "kind": "class", "doc": "<p>An object used by a Context to configure your SQLMesh project.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connections:</strong>  Supported connections and their configurations. Key represents a unique name of a connection.</li>\n<li><strong>default_connection:</strong>  The name of a connection to use by default.</li>\n<li><strong>test_connection:</strong>  The connection settings for tests. Can be a name which refers to an existing configuration\nin <code>connections</code>.</li>\n<li><strong>scheduler:</strong>  The scheduler configuration.</li>\n<li><strong>notification_targets:</strong>  The notification targets to use.</li>\n<li><strong>dialect:</strong>  The default sql dialect of model queries. Default: same as engine dialect.</li>\n<li><strong>physical_schema:</strong>  The default schema used to store materialized tables.</li>\n<li><strong>snapshot_ttl:</strong>  The period of time that a model snapshot that is not a part of any environment should exist before being deleted.</li>\n<li><strong>environment_ttl:</strong>  The period of time that a development environment should exist before being deleted.</li>\n<li><strong>ignore_patterns:</strong>  Files that match glob patterns specified in this list are ignored when scanning the project folder.</li>\n<li><strong>time_column_format:</strong>  The default format to use for all model time columns. Defaults to %Y-%m-%d.\nThis time format uses python format codes. <a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes</a>.</li>\n<li><strong>auto_categorize_changes:</strong>  Indicates whether SQLMesh should attempt to automatically categorize model changes (breaking / non-breaking)\nduring plan creation.</li>\n<li><strong>users:</strong>  A list of users that can be used for approvals/notifications.</li>\n<li><strong>model_defaults:</strong>  Default values for model definitions.</li>\n</ul>\n", "bases": "sqlmesh.core.config.base.BaseConfig"}, {"fullname": "sqlmesh.core.config.root.Config.get_connection", "modulename": "sqlmesh.core.config.root", "qualname": "Config.get_connection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DuckDBConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">SnowflakeConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSQLConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSparkSessionConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">BigQueryConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RedshiftConnectionConfig</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.scheduler", "modulename": "sqlmesh.core.config.scheduler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.scheduler.BuiltInSchedulerConfig", "modulename": "sqlmesh.core.config.scheduler", "qualname": "BuiltInSchedulerConfig", "kind": "class", "doc": "<p>The Built-In Scheduler configuration.</p>\n", "bases": "_SchedulerConfig, sqlmesh.core.config.base.BaseConfig"}, {"fullname": "sqlmesh.core.config.scheduler.BuiltInSchedulerConfig.create_state_sync", "modulename": "sqlmesh.core.config.scheduler", "qualname": "BuiltInSchedulerConfig.create_state_sync", "kind": "function", "doc": "<p>Creates a State Sync instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  The SQLMesh Context.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The StateSync instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_sync</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StateSync</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.scheduler.BuiltInSchedulerConfig.create_plan_evaluator", "modulename": "sqlmesh.core.config.scheduler", "qualname": "BuiltInSchedulerConfig.create_plan_evaluator", "kind": "function", "doc": "<p>Creates a Plan Evaluator instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  The SQLMesh Context.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">PlanEvaluator</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.scheduler.AirflowSchedulerConfig", "modulename": "sqlmesh.core.config.scheduler", "qualname": "AirflowSchedulerConfig", "kind": "class", "doc": "<p>The Airflow Scheduler configuration.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>airflow_url:</strong>  The URL of the Airflow Webserver.</li>\n<li><strong>username:</strong>  The Airflow username.</li>\n<li><strong>password:</strong>  The Airflow password.</li>\n<li><strong>dag_run_poll_interval_secs:</strong>  Determines how often a running DAG can be polled (in seconds).</li>\n<li><strong>dag_creation_poll_interval_secs:</strong>  Determines how often SQLMesh should check whether a DAG has been created (in seconds).</li>\n<li><strong>dag_creation_max_retry_attempts:</strong>  Determines the maximum number of attempts that SQLMesh will make while checking for\nwhether a DAG has been created.</li>\n<li><strong>backfill_concurrent_tasks:</strong>  The number of concurrent tasks used for model backfilling during plan application.</li>\n<li><strong>ddl_concurrent_tasks:</strong>  The number of concurrent tasks used for DDL operations (table / view creation, deletion, etc).</li>\n</ul>\n", "bases": "_BaseAirflowSchedulerConfig, sqlmesh.core.config.base.BaseConfig"}, {"fullname": "sqlmesh.core.config.scheduler.AirflowSchedulerConfig.get_client", "modulename": "sqlmesh.core.config.scheduler", "qualname": "AirflowSchedulerConfig.get_client", "kind": "function", "doc": "<p>Constructs the Airflow Client instance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">AirflowClient</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.scheduler.CloudComposerSchedulerConfig", "modulename": "sqlmesh.core.config.scheduler", "qualname": "CloudComposerSchedulerConfig", "kind": "class", "doc": "<p>The Google Cloud Composer configuration.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>airflow_url:</strong>  The URL of the Airflow Webserver.</li>\n<li><strong>dag_run_poll_interval_secs:</strong>  Determines how often a running DAG can be polled (in seconds).</li>\n<li><strong>dag_creation_poll_interval_secs:</strong>  Determines how often SQLMesh should check whether a DAG has been created (in seconds).</li>\n<li><strong>dag_creation_max_retry_attempts:</strong>  Determines the maximum number of attempts that SQLMesh will make while checking for\nwhether a DAG has been created.</li>\n<li><strong>backfill_concurrent_tasks:</strong>  The number of concurrent tasks used for model backfilling during plan application.</li>\n<li><strong>ddl_concurrent_tasks:</strong>  The number of concurrent tasks used for DDL operations (table / view creation, deletion, etc).</li>\n</ul>\n", "bases": "_BaseAirflowSchedulerConfig, sqlmesh.core.config.base.BaseConfig"}, {"fullname": "sqlmesh.core.config.scheduler.CloudComposerSchedulerConfig.__init__", "modulename": "sqlmesh.core.config.scheduler", "qualname": "CloudComposerSchedulerConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqlmesh.core.config.scheduler.CloudComposerSchedulerConfig.Config", "modulename": "sqlmesh.core.config.scheduler", "qualname": "CloudComposerSchedulerConfig.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.config.scheduler.CloudComposerSchedulerConfig.Config.__init__", "modulename": "sqlmesh.core.config.scheduler", "qualname": "CloudComposerSchedulerConfig.Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.core.config.scheduler.CloudComposerSchedulerConfig.get_client", "modulename": "sqlmesh.core.config.scheduler", "qualname": "CloudComposerSchedulerConfig.get_client", "kind": "function", "doc": "<p>Constructs the Airflow Client instance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">AirflowClient</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.config.scheduler.CloudComposerSchedulerConfig.check_supported_fields", "modulename": "sqlmesh.core.config.scheduler", "qualname": "CloudComposerSchedulerConfig.check_supported_fields", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console", "modulename": "sqlmesh.core.console", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.console.Console", "modulename": "sqlmesh.core.console", "qualname": "Console", "kind": "class", "doc": "<p>Abstract base class for defining classes used for displaying information to the user and also interact\nwith them when their input is needed</p>\n", "bases": "abc.ABC"}, {"fullname": "sqlmesh.core.console.Console.start_snapshot_progress", "modulename": "sqlmesh.core.console", "qualname": "Console.start_snapshot_progress", "kind": "function", "doc": "<p>Indicates that a new load progress has begun.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">snapshot_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">total_batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.update_snapshot_progress", "modulename": "sqlmesh.core.console", "qualname": "Console.update_snapshot_progress", "kind": "function", "doc": "<p>Update snapshot progress.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">snapshot_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">num_batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.stop_snapshot_progress", "modulename": "sqlmesh.core.console", "qualname": "Console.stop_snapshot_progress", "kind": "function", "doc": "<p>Stop the load progress</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">success</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.start_promotion_progress", "modulename": "sqlmesh.core.console", "qualname": "Console.start_promotion_progress", "kind": "function", "doc": "<p>Indicates that a new promotion progress has begun.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">total_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.update_promotion_progress", "modulename": "sqlmesh.core.console", "qualname": "Console.update_promotion_progress", "kind": "function", "doc": "<p>Update promotion progress.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.stop_promotion_progress", "modulename": "sqlmesh.core.console", "qualname": "Console.stop_promotion_progress", "kind": "function", "doc": "<p>Stop the promotion progress</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">success</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.show_model_difference_summary", "modulename": "sqlmesh.core.console", "qualname": "Console.show_model_difference_summary", "kind": "function", "doc": "<p>Displays a summary of differences for the given models</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context_diff</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context_diff</span><span class=\"o\">.</span><span class=\"n\">ContextDiff</span>,</span><span class=\"param\">\t<span class=\"n\">detailed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.plan", "modulename": "sqlmesh.core.console", "qualname": "Console.plan", "kind": "function", "doc": "<p>The main plan flow.</p>\n\n<p>The console should present the user with choices on how to backfill and version the snapshots\nof a plan.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>plan:</strong>  The plan to make choices for.</li>\n<li><strong>auto_apply:</strong>  Whether to automatically apply the plan after all choices have been made.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Plan</span>, </span><span class=\"param\"><span class=\"n\">auto_apply</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.log_test_results", "modulename": "sqlmesh.core.console", "qualname": "Console.log_test_results", "kind": "function", "doc": "<p>Display the test result and output</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>result:</strong>  The unittest test result that contains metrics like num success, fails, ect.</li>\n<li><strong>output:</strong>  The generated output from the unittest</li>\n<li><strong>target_dialect:</strong>  The dialect that tests were run against. Assumes all tests run against the same dialect.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">TestResult</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.show_sql", "modulename": "sqlmesh.core.console", "qualname": "Console.show_sql", "kind": "function", "doc": "<p>Display to the user SQL</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.log_status_update", "modulename": "sqlmesh.core.console", "qualname": "Console.log_status_update", "kind": "function", "doc": "<p>Display general status update to the user</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.log_error", "modulename": "sqlmesh.core.console", "qualname": "Console.log_error", "kind": "function", "doc": "<p>Display error info to the user</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.log_success", "modulename": "sqlmesh.core.console", "qualname": "Console.log_success", "kind": "function", "doc": "<p>Display a general successful message to the user</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.loading_start", "modulename": "sqlmesh.core.console", "qualname": "Console.loading_start", "kind": "function", "doc": "<p>Starts loading and returns a unique ID that can be used to stop the loading. Optionally can display a message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.Console.loading_stop", "modulename": "sqlmesh.core.console", "qualname": "Console.loading_stop", "kind": "function", "doc": "<p>Stop loading for the given id</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole", "kind": "class", "doc": "<p>A rich based implementation of the console</p>\n", "bases": "Console"}, {"fullname": "sqlmesh.core.console.TerminalConsole.__init__", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqlmesh.core.console.TerminalConsole.start_snapshot_progress", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.start_snapshot_progress", "kind": "function", "doc": "<p>Indicates that a new load progress has begun.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">snapshot_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">total_batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.update_snapshot_progress", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.update_snapshot_progress", "kind": "function", "doc": "<p>Update snapshot progress.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">snapshot_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">num_batches</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.stop_snapshot_progress", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.stop_snapshot_progress", "kind": "function", "doc": "<p>Stop the load progress</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">success</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.start_promotion_progress", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.start_promotion_progress", "kind": "function", "doc": "<p>Indicates that a new promotion progress has begun.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">total_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.update_promotion_progress", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.update_promotion_progress", "kind": "function", "doc": "<p>Update promotion progress.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.stop_promotion_progress", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.stop_promotion_progress", "kind": "function", "doc": "<p>Stop the promotion progress</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">success</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.show_model_difference_summary", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.show_model_difference_summary", "kind": "function", "doc": "<p>Shows a summary of the differences.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context_diff:</strong>  The context diff to use to print the summary</li>\n<li><strong>detailed:</strong>  Show the actual SQL differences if True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context_diff</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context_diff</span><span class=\"o\">.</span><span class=\"n\">ContextDiff</span>,</span><span class=\"param\">\t<span class=\"n\">detailed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.plan", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.plan", "kind": "function", "doc": "<p>The main plan flow.</p>\n\n<p>The console should present the user with choices on how to backfill and version the snapshots\nof a plan.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>plan:</strong>  The plan to make choices for.</li>\n<li><strong>auto_apply:</strong>  Whether to automatically apply the plan after all choices have been made.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Plan</span>, </span><span class=\"param\"><span class=\"n\">auto_apply</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.log_test_results", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.log_test_results", "kind": "function", "doc": "<p>Display the test result and output</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>result:</strong>  The unittest test result that contains metrics like num success, fails, ect.</li>\n<li><strong>output:</strong>  The generated output from the unittest</li>\n<li><strong>target_dialect:</strong>  The dialect that tests were run against. Assumes all tests run against the same dialect.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">TestResult</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.show_sql", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.show_sql", "kind": "function", "doc": "<p>Display to the user SQL</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.log_status_update", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.log_status_update", "kind": "function", "doc": "<p>Display general status update to the user</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.log_error", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.log_error", "kind": "function", "doc": "<p>Display error info to the user</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.log_success", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.log_success", "kind": "function", "doc": "<p>Display a general successful message to the user</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.loading_start", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.loading_start", "kind": "function", "doc": "<p>Starts loading and returns a unique ID that can be used to stop the loading. Optionally can display a message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.TerminalConsole.loading_stop", "modulename": "sqlmesh.core.console", "qualname": "TerminalConsole.loading_stop", "kind": "function", "doc": "<p>Stop loading for the given id</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.add_to_layout_widget", "modulename": "sqlmesh.core.console", "qualname": "add_to_layout_widget", "kind": "function", "doc": "<p>Helper function to add a widget to a layout widget</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_widget:</strong>  The layout widget to add the other widget(s) to</li>\n<li><strong>*widgets:</strong>  The widgets to add to the layout widget</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The layout widget with the children added</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target_widget</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">LayoutWidget</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">widgets</span><span class=\"p\">:</span> <span class=\"n\">ipywidgets</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">LayoutWidget</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.NotebookMagicConsole", "modulename": "sqlmesh.core.console", "qualname": "NotebookMagicConsole", "kind": "class", "doc": "<p>Console to be used when using the magic notebook interface (<code>%&lt;command&gt;</code>).\nGenerally reuses the Terminal console when possible by either directly outputing what it provides\nor capturing it and converting it into a widget.</p>\n", "bases": "TerminalConsole"}, {"fullname": "sqlmesh.core.console.NotebookMagicConsole.__init__", "modulename": "sqlmesh.core.console", "qualname": "NotebookMagicConsole.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqlmesh.core.console.NotebookMagicConsole.log_test_results", "modulename": "sqlmesh.core.console", "qualname": "NotebookMagicConsole.log_test_results", "kind": "function", "doc": "<p>Display the test result and output</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>result:</strong>  The unittest test result that contains metrics like num success, fails, ect.</li>\n<li><strong>output:</strong>  The generated output from the unittest</li>\n<li><strong>target_dialect:</strong>  The dialect that tests were run against. Assumes all tests run against the same dialect.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">TestResult</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.console.DatabricksMagicConsole", "modulename": "sqlmesh.core.console", "qualname": "DatabricksMagicConsole", "kind": "class", "doc": "<p>Note: Databricks Magic Console currently does not support progress bars while a plan is being applied. The\nNotebookMagicConsole does support progress bars, but they will time out after 5 minutes of execution\nand it makes it difficult to see the progress of the plan.</p>\n", "bases": "TerminalConsole"}, {"fullname": "sqlmesh.core.console.get_console", "modulename": "sqlmesh.core.console", "qualname": "get_console", "kind": "function", "doc": "<p>Returns the console that is appropriate for the current runtime environment.</p>\n\n<p>Note: Google Colab environment is untested and currently assumes is compatible with the base\nNotebookMagicConsole.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">TerminalConsole</span> <span class=\"o\">|</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">DatabricksMagicConsole</span> <span class=\"o\">|</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">NotebookMagicConsole</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.constants", "modulename": "sqlmesh.core.constants", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.constants.PROD", "modulename": "sqlmesh.core.constants", "qualname": "PROD", "kind": "variable", "doc": "<p>Prod</p>\n", "default_value": " = &#x27;prod&#x27;"}, {"fullname": "sqlmesh.core.constants.DEV", "modulename": "sqlmesh.core.constants", "qualname": "DEV", "kind": "variable", "doc": "<p>Dev</p>\n", "default_value": " = &#x27;dev&#x27;"}, {"fullname": "sqlmesh.core.constants.SNAPSHOTS_PATH", "modulename": "sqlmesh.core.constants", "qualname": "SNAPSHOTS_PATH", "kind": "variable", "doc": "<p>Snapshots path</p>\n", "default_value": " = &#x27;snapshots&#x27;"}, {"fullname": "sqlmesh.core.constants.DEFAULT_SNAPSHOT_TTL", "modulename": "sqlmesh.core.constants", "qualname": "DEFAULT_SNAPSHOT_TTL", "kind": "variable", "doc": "<p>Default snapshot TTL</p>\n", "default_value": " = &#x27;in 1 week&#x27;"}, {"fullname": "sqlmesh.core.constants.DEFAULT_ENVIRONMENT_TTL", "modulename": "sqlmesh.core.constants", "qualname": "DEFAULT_ENVIRONMENT_TTL", "kind": "variable", "doc": "<p>Default environment TTL</p>\n", "default_value": " = &#x27;in 1 week&#x27;"}, {"fullname": "sqlmesh.core.constants.IGNORE_PATTERNS", "modulename": "sqlmesh.core.constants", "qualname": "IGNORE_PATTERNS", "kind": "variable", "doc": "<p>Ignore patterns</p>\n", "default_value": " = [&#x27;.ipynb_checkpoints/*&#x27;]"}, {"fullname": "sqlmesh.core.constants.CACHE_PATH", "modulename": "sqlmesh.core.constants", "qualname": "CACHE_PATH", "kind": "variable", "doc": "<p>Cache path</p>\n", "default_value": " = &#x27;.cache&#x27;"}, {"fullname": "sqlmesh.core.constants.TABLE_INFO_CACHE", "modulename": "sqlmesh.core.constants", "qualname": "TABLE_INFO_CACHE", "kind": "variable", "doc": "<p>Table info cache</p>\n", "default_value": " = &#x27;table_info_cache&#x27;"}, {"fullname": "sqlmesh.core.constants.DATA_VERSION_LIMIT", "modulename": "sqlmesh.core.constants", "qualname": "DATA_VERSION_LIMIT", "kind": "variable", "doc": "<p>Data version limit</p>\n", "default_value": " = 10"}, {"fullname": "sqlmesh.core.constants.DEFAULT_TIME_COLUMN_FORMAT", "modulename": "sqlmesh.core.constants", "qualname": "DEFAULT_TIME_COLUMN_FORMAT", "kind": "variable", "doc": "<p>Default time column format</p>\n", "default_value": " = &#x27;%Y-%m-%d&#x27;"}, {"fullname": "sqlmesh.core.constants.DEFAULT_MAX_LIMIT", "modulename": "sqlmesh.core.constants", "qualname": "DEFAULT_MAX_LIMIT", "kind": "variable", "doc": "<p>The default maximum row limit that is used when evaluating a model.</p>\n", "default_value": " = 1000"}, {"fullname": "sqlmesh.core.context", "modulename": "sqlmesh.core.context", "kind": "module", "doc": "<h1 id=\"context\">Context</h1>\n\n<p>A SQLMesh context encapsulates a SQLMesh environment. When you create a new context, it will discover and\nload your project's models, macros, and audits. Afterwards, you can use the context to create and apply\nplans, visualize your model's lineage, run your audits and model tests, and perform various other tasks.\nFor more information regarding what a context can do, see <code>sqlmesh.core.context.Context</code>.</p>\n\n<h1 id=\"examples\">Examples:</h1>\n\n<p>Creating and applying a plan against the staging environment.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.context</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;example&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"s2\">&quot;local_config&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plan</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"p\">(</span><span class=\"s2\">&quot;staging&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">plan</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Running audits on your data.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.context</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;example&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"s2\">&quot;local_config&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">audit</span><span class=\"p\">(</span><span class=\"s2\">&quot;yesterday&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;now&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Running tests on your models.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.context</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;example&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">run_tests</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "sqlmesh.core.context.BaseContext", "modulename": "sqlmesh.core.context", "qualname": "BaseContext", "kind": "class", "doc": "<p>The base context which defines methods to execute a model.</p>\n", "bases": "abc.ABC"}, {"fullname": "sqlmesh.core.context.BaseContext.engine_adapter", "modulename": "sqlmesh.core.context", "qualname": "BaseContext.engine_adapter", "kind": "variable", "doc": "<p>Returns an engine adapter.</p>\n", "annotation": ": sqlmesh.core.engine_adapter.base.EngineAdapter"}, {"fullname": "sqlmesh.core.context.BaseContext.spark", "modulename": "sqlmesh.core.context", "qualname": "BaseContext.spark", "kind": "variable", "doc": "<p>Returns the spark session if it exists.</p>\n", "annotation": ": Optional[pyspark.sql.session.SparkSession]"}, {"fullname": "sqlmesh.core.context.BaseContext.table", "modulename": "sqlmesh.core.context", "qualname": "BaseContext.table", "kind": "function", "doc": "<p>Gets the physical table name for a given model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_name:</strong>  The model name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The physical table name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.BaseContext.fetchdf", "modulename": "sqlmesh.core.context", "qualname": "BaseContext.fetchdf", "kind": "function", "doc": "<p>Fetches a dataframe given a sql string or sqlglot expression.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>query:</strong>  SQL string or sqlglot expression.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The default dataframe is Pandas, but for Spark a PySpark dataframe is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.BaseContext.fetch_pyspark_df", "modulename": "sqlmesh.core.context", "qualname": "BaseContext.fetch_pyspark_df", "kind": "function", "doc": "<p>Fetches a PySpark dataframe given a sql string or sqlglot expression.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>query:</strong>  SQL string or sqlglot expression.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A PySpark dataframe.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.ExecutionContext", "modulename": "sqlmesh.core.context", "qualname": "ExecutionContext", "kind": "class", "doc": "<p>The minimal context needed to execute a model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>engine_adapter:</strong>  The engine adapter to execute queries against.</li>\n<li><strong>snapshots:</strong>  All upstream snapshots (by model name) to use for expansion and mapping of physical locations.</li>\n<li><strong>is_dev:</strong>  Indicates whether the evaluation happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n</ul>\n", "bases": "BaseContext"}, {"fullname": "sqlmesh.core.context.ExecutionContext.__init__", "modulename": "sqlmesh.core.context", "qualname": "ExecutionContext.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "sqlmesh.core.context.ExecutionContext.engine_adapter", "modulename": "sqlmesh.core.context", "qualname": "ExecutionContext.engine_adapter", "kind": "variable", "doc": "<p>Returns an engine adapter.</p>\n", "annotation": ": sqlmesh.core.engine_adapter.base.EngineAdapter"}, {"fullname": "sqlmesh.core.context.Context", "modulename": "sqlmesh.core.context", "qualname": "Context", "kind": "class", "doc": "<p>Encapsulates a SQLMesh environment supplying convenient functions to perform various tasks.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>engine_adapter:</strong>  The default engine adapter to use.</li>\n<li><strong>notification_targets:</strong>  The notification target to use. Defaults to what is defined in config.</li>\n<li><strong>dialect:</strong>  Default dialect of the sql in models.</li>\n<li><strong>physical_schema:</strong>  The schema used to store physical materialized tables.</li>\n<li><strong>snapshot_ttl:</strong>  Duration before unpromoted snapshots are removed.</li>\n<li><strong>path:</strong>  The directory containing SQLMesh files.</li>\n<li><strong>config:</strong>  A Config object or the name of a Config object in config.py.</li>\n<li><strong>connection:</strong>  The name of the connection. If not specified the first connection as it appears\nin configuration will be used.</li>\n<li><strong>test_connection:</strong>  The name of the connection to use for tests. If not specified the first\nconnection as it appears in configuration will be used.</li>\n<li><strong>concurrent_tasks:</strong>  The maximum number of tasks that can use the connection concurrently.</li>\n<li><strong>load:</strong>  Whether or not to automatically load all models and macros (default True).</li>\n<li><strong>console:</strong>  The rich instance used for printing out CLI command results.</li>\n<li><strong>users:</strong>  A list of users to make known to SQLMesh.</li>\n</ul>\n", "bases": "BaseContext"}, {"fullname": "sqlmesh.core.context.Context.__init__", "modulename": "sqlmesh.core.context", "qualname": "Context.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">notification_targets</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">ConsoleNotificationTarget</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">integrations</span><span class=\"o\">.</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">GithubNotificationTarget</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">state_sync</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_sync</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StateSync</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">physical_schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ttl</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_connection</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">concurrent_tasks</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">loader</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">Loader</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.core.context.Context.engine_adapter", "modulename": "sqlmesh.core.context", "qualname": "Context.engine_adapter", "kind": "variable", "doc": "<p>Returns an engine adapter.</p>\n", "annotation": ": sqlmesh.core.engine_adapter.base.EngineAdapter"}, {"fullname": "sqlmesh.core.context.Context.upsert_model", "modulename": "sqlmesh.core.context", "qualname": "Context.upsert_model", "kind": "function", "doc": "<p>Update or insert a model.</p>\n\n<p>The context's models dictionary will be updated to include these changes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model:</strong>  Model name or instance to update.</li>\n<li><strong>kwargs:</strong>  The kwargs to update the model with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new instance of the updated or inserted model.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.scheduler", "modulename": "sqlmesh.core.context", "qualname": "Context.scheduler", "kind": "function", "doc": "<p>Returns the built-in scheduler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The target environment to source model snapshots from, or None\nif snapshots should be sourced from the currently loaded local state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The built-in scheduler instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">Scheduler</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.sqlmesh_path", "modulename": "sqlmesh.core.context", "qualname": "Context.sqlmesh_path", "kind": "variable", "doc": "<p>Path to the SQLMesh home directory.</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "sqlmesh.core.context.Context.models_directory_path", "modulename": "sqlmesh.core.context", "qualname": "Context.models_directory_path", "kind": "variable", "doc": "<p>Path to the directory where the models are defined</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "sqlmesh.core.context.Context.macro_directory_path", "modulename": "sqlmesh.core.context", "qualname": "Context.macro_directory_path", "kind": "variable", "doc": "<p>Path to the directory where macros are defined</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "sqlmesh.core.context.Context.hook_directory_path", "modulename": "sqlmesh.core.context", "qualname": "Context.hook_directory_path", "kind": "variable", "doc": "<p>Path to the directory where hooks are defined</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "sqlmesh.core.context.Context.refresh", "modulename": "sqlmesh.core.context", "qualname": "Context.refresh", "kind": "function", "doc": "<p>Refresh all models that have been updated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.load", "modulename": "sqlmesh.core.context", "qualname": "Context.load", "kind": "function", "doc": "<p>Load all files in the context's path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.run", "modulename": "sqlmesh.core.context", "qualname": "Context.run", "kind": "function", "doc": "<p>Run the entire dag through the scheduler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The target environment to source model snapshots from. Default: prod.</li>\n<li><strong>start:</strong>  The start of the interval to render.</li>\n<li><strong>end:</strong>  The end of the interval to render.</li>\n<li><strong>latest:</strong>  The latest time used for non incremental datasets.</li>\n<li><strong>skip_janitor:</strong>  Whether to skip the jantitor task.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">skip_janitor</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.get_model", "modulename": "sqlmesh.core.context", "qualname": "Context.get_model", "kind": "function", "doc": "<p>Returns a model with the given name or None if a model with such name doesn't exist.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.models", "modulename": "sqlmesh.core.context", "qualname": "Context.models", "kind": "variable", "doc": "<p>Returns all registered models in this context.</p>\n", "annotation": ": mappingproxy[str, typing.Annotated[typing.Union[sqlmesh.core.model.definition.SqlModel, sqlmesh.core.model.definition.SeedModel, sqlmesh.core.model.definition.PythonModel], FieldInfo(default=PydanticUndefined, discriminator=&#x27;source_type&#x27;, extra={})]]"}, {"fullname": "sqlmesh.core.context.Context.macros", "modulename": "sqlmesh.core.context", "qualname": "Context.macros", "kind": "variable", "doc": "<p>Returns all registered macros in this context.</p>\n", "annotation": ": mappingproxy[str, typing.Union[sqlmesh.utils.metaprogramming.Executable, sqlmesh.core.macros.macro]]"}, {"fullname": "sqlmesh.core.context.Context.hooks", "modulename": "sqlmesh.core.context", "qualname": "Context.hooks", "kind": "variable", "doc": "<p>Returns all registered hooks in this context.</p>\n", "annotation": ": mappingproxy[str, sqlmesh.core.hooks.hook]"}, {"fullname": "sqlmesh.core.context.Context.snapshots", "modulename": "sqlmesh.core.context", "qualname": "Context.snapshots", "kind": "variable", "doc": "<p>Generates and returns snapshots based on models registered in this context.</p>\n\n<p>If one of the snapshots has been previosly stored in the persisted state, the stored\ninstance will be returned.</p>\n", "annotation": ": Dict[str, sqlmesh.core.snapshot.definition.Snapshot]"}, {"fullname": "sqlmesh.core.context.Context.local_snapshots", "modulename": "sqlmesh.core.context", "qualname": "Context.local_snapshots", "kind": "variable", "doc": "<p>Generates and returns snapshots based on models registered in this context without reconciling them\nwith the persisted state.</p>\n", "annotation": ": Dict[str, sqlmesh.core.snapshot.definition.Snapshot]"}, {"fullname": "sqlmesh.core.context.Context.render", "modulename": "sqlmesh.core.context", "qualname": "Context.render", "kind": "function", "doc": "<p>Renders a model's query, expanding macros with provided kwargs, and optionally expanding referenced models.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_or_snapshot:</strong>  The model, model name, or snapshot to render.</li>\n<li><strong>start:</strong>  The start of the interval to render.</li>\n<li><strong>end:</strong>  The end of the interval to render.</li>\n<li><strong>latest:</strong>  The latest time used for non incremental datasets.</li>\n<li><strong>expand:</strong>  Whether or not to use expand materialized models, defaults to False.\nIf True, all referenced models are expanded as raw queries.\nIf a list, only referenced models are expanded as raw queries.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The rendered expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_or_snapshot</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5983644704&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">expand</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.evaluate", "modulename": "sqlmesh.core.context", "qualname": "Context.evaluate", "kind": "function", "doc": "<p>Evaluate a model or snapshot (running its query against a DB/Engine).</p>\n\n<p>This method is used to test or iterate on models without side effects.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_or_snapshot:</strong>  The model, model name, or snapshot to render.</li>\n<li><strong>start:</strong>  The start of the interval to evaluate.</li>\n<li><strong>end:</strong>  The end of the interval to evaluate.</li>\n<li><strong>latest:</strong>  The latest time used for non incremental datasets.</li>\n<li><strong>limit:</strong>  A limit applied to the model.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model_or_snapshot</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5983717744&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5983709952&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.format", "modulename": "sqlmesh.core.context", "qualname": "Context.format", "kind": "function", "doc": "<p>Format all models in a given directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.plan", "modulename": "sqlmesh.core.context", "qualname": "Context.plan", "kind": "function", "doc": "<p>Interactively create a migration plan.</p>\n\n<p>This method compares the current context with an environment. It then presents\nthe differences and asks whether to backfill each modified model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The environment to diff and plan against.</li>\n<li><strong>start:</strong>  The start date of the backfill if there is one.</li>\n<li><strong>end:</strong>  The end date of the backfill if there is one.</li>\n<li><strong>create_from:</strong>  The environment to create the target environment from if it\ndoesn't exist. If not specified, the \"prod\" environment will be used.</li>\n<li><strong>skip_tests:</strong>  Unit tests are run by default so this will skip them if enabled</li>\n<li><strong>restate_models:</strong>  A list of of either internal or external models that need to be restated\nfor the given plan interval. If the target environment is a production environment,\nALL snapshots that depended on these upstream tables will have their intervals deleted\n(even ones not in this current environment). Only the snapshots in this environment will\nbe backfilled whereas others need to be recovered on a future plan application. For development\nenvironments only snapshots that are part of this plan will be affected.</li>\n<li><strong>no_gaps:</strong>   Whether to ensure that new snapshots for models that are already a\npart of the target environment have no data gaps when compared against previous\nsnapshots for same models.</li>\n<li><strong>skip_backfill:</strong>  Whether to skip the backfill step. Default: False.</li>\n<li><strong>forward_only:</strong>  Whether the purpose of the plan is to make forward only changes.</li>\n<li><strong>no_prompts:</strong>  Whether to disable interactive prompts for the backfill time range. Please note that\nif this flag is set to true and there are uncategorized changes the plan creation will\nfail. Default: False.</li>\n<li><strong>auto_apply:</strong>  Whether to automatically apply the new plan after creation. Default: False.</li>\n<li><strong>no_auto_categorization:</strong>  Indicates whether to disable automatic categorization of model\nchanges (breaking / non-breaking). If not provided, then the corresponding configuration\noption determines the behavior.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The populated Plan object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">create_from</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">skip_tests</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">restate_models</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">no_gaps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">skip_backfill</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">forward_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_prompts</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auto_apply</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_auto_categorization</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Plan</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.apply", "modulename": "sqlmesh.core.context", "qualname": "Context.apply", "kind": "function", "doc": "<p>Applies a plan by pushing snapshots and backfilling data.</p>\n\n<p>Given a plan, it pushes snapshots into the state sync and then uses the scheduler\nto backfill all models.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>plan:</strong>  The plan to apply.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Plan</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.diff", "modulename": "sqlmesh.core.context", "qualname": "Context.diff", "kind": "function", "doc": "<p>Show a diff of the current context with a given environment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The environment to diff against.</li>\n<li><strong>detailed:</strong>  Show the actual SQL differences if True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">detailed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.get_dag", "modulename": "sqlmesh.core.context", "qualname": "Context.get_dag", "kind": "function", "doc": "<p>Gets a graphviz dag.</p>\n\n<p>This method requires installing the graphviz base library through your package manager\nand the python graphviz library.</p>\n\n<p>To display within Databricks:\ndisplayHTML(context.get_dag().pipe(encoding='utf-8'))</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>format:</strong>  The desired format to use for representing the graph</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;svg&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">graphviz</span><span class=\"o\">.</span><span class=\"n\">graphs</span><span class=\"o\">.</span><span class=\"n\">Digraph</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.render_dag", "modulename": "sqlmesh.core.context", "qualname": "Context.render_dag", "kind": "function", "doc": "<p>Render the dag using graphviz.</p>\n\n<p>This method requires installing the graphviz base library through your package manager\nand the python graphviz library.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path:</strong>  filename to save the dag to</li>\n<li><strong>format:</strong>  The desired format to use when rending the dag</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;jpeg&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.test", "modulename": "sqlmesh.core.context", "qualname": "Context.test", "kind": "function", "doc": "<p>Discover and run model tests</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">match_patterns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tests</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">TestResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.audit", "modulename": "sqlmesh.core.context", "qualname": "Context.audit", "kind": "function", "doc": "<p>Audit models.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  The start of the interval to audit.</li>\n<li><strong>end:</strong>  The end of the interval to audit.</li>\n<li><strong>models:</strong>  The models to audit. All models will be audited if not specified.</li>\n<li><strong>latest:</strong>  The latest time used for non incremental datasets.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">models</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context.Context.close", "modulename": "sqlmesh.core.context", "qualname": "Context.close", "kind": "function", "doc": "<p>Releases all resources allocated by this context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context_diff", "modulename": "sqlmesh.core.context_diff", "kind": "module", "doc": "<h1 id=\"contextdiff\">ContextDiff</h1>\n\n<p>ContextDiff encapsulates the differences between two environments. The two environments can be the local\nenvironment and a remote environment, or two remote environments. ContextDiff is an important part of\nSQLMesh. SQLMesh plans use ContextDiff to determine what models were changed between two environments.\nThe SQLMesh CLI diff command uses ContextDiff to determine what to visualize.</p>\n\n<p>When creating a ContextDiff object, SQLMesh will compare the snapshots from one environment with those of\nanother remote environment and determine if models have been added, removed, or modified.</p>\n"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff", "kind": "class", "doc": "<p>ContextDiff is an object representing the difference between two environments.</p>\n\n<p>The two environments can be the local environment and a remote environment, or two remote\nenvironments.</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.environment", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.environment", "kind": "variable", "doc": "<p>The environment to diff.</p>\n", "annotation": ": str"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.is_new_environment", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.is_new_environment", "kind": "variable", "doc": "<p>Whether the target environment is new.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.create_from", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.create_from", "kind": "variable", "doc": "<p>The name of the environment the target environment will be created from if new.</p>\n", "annotation": ": str"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.added", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.added", "kind": "variable", "doc": "<p>New models.</p>\n", "annotation": ": Set[str]"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.removed", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.removed", "kind": "variable", "doc": "<p>Deleted models.</p>\n", "annotation": ": Set[str]"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.modified_snapshots", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.modified_snapshots", "kind": "variable", "doc": "<p>Modified snapshots.</p>\n", "annotation": ": Dict[str, Tuple[sqlmesh.core.snapshot.definition.Snapshot, sqlmesh.core.snapshot.definition.Snapshot]]"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.snapshots", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.snapshots", "kind": "variable", "doc": "<p>Merged snapshots.</p>\n", "annotation": ": Dict[str, sqlmesh.core.snapshot.definition.Snapshot]"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.new_snapshots", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.new_snapshots", "kind": "variable", "doc": "<p>New snapshots.</p>\n", "annotation": ": Dict[sqlmesh.core.snapshot.definition.SnapshotId, sqlmesh.core.snapshot.definition.Snapshot]"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.previous_plan_id", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.previous_plan_id", "kind": "variable", "doc": "<p>Previous plan id.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.create", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.create", "kind": "function", "doc": "<p>Create a ContextDiff object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The remote environment to diff.</li>\n<li><strong>snapshots:</strong>  The snapshots of the current environment.</li>\n<li><strong>create_from:</strong>  The environment to create the target environment from if it\ndoesn't exist.</li>\n<li><strong>state_reader:</strong>  StateReader to access the remote environment to diff.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The ContextDiff object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">create_from</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">state_reader</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_sync</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StateReader</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context_diff</span><span class=\"o\">.</span><span class=\"n\">ContextDiff</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.directly_modified", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.directly_modified", "kind": "function", "doc": "<p>Returns whether or not a model was directly modified in this context.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_name:</strong>  The model name to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Whether or not the model was directly modified.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.indirectly_modified", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.indirectly_modified", "kind": "function", "doc": "<p>Returns whether or not a model was indirectly modified in this context.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_name:</strong>  The model name to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Whether or not the model was indirectly modified.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.metadata_updated", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.metadata_updated", "kind": "function", "doc": "<p>Returns whether or not the given model's metadata has been updated.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_name:</strong>  The model name to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Whether or not the model's metadata has been updated.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.context_diff.ContextDiff.text_diff", "modulename": "sqlmesh.core.context_diff", "qualname": "ContextDiff.text_diff", "kind": "function", "doc": "<p>Finds the difference of a model between the current and remote environment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model:</strong>  The model name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A unified text diff of the model.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.dialect", "modulename": "sqlmesh.core.dialect", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.dialect.Model", "modulename": "sqlmesh.core.dialect", "qualname": "Model", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.expressions.Expression"}, {"fullname": "sqlmesh.core.dialect.Audit", "modulename": "sqlmesh.core.dialect", "qualname": "Audit", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.expressions.Expression"}, {"fullname": "sqlmesh.core.dialect.Jinja", "modulename": "sqlmesh.core.dialect", "qualname": "Jinja", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.expressions.Func"}, {"fullname": "sqlmesh.core.dialect.ModelKind", "modulename": "sqlmesh.core.dialect", "qualname": "ModelKind", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.expressions.Expression"}, {"fullname": "sqlmesh.core.dialect.MacroVar", "modulename": "sqlmesh.core.dialect", "qualname": "MacroVar", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.expressions.Var"}, {"fullname": "sqlmesh.core.dialect.MacroFunc", "modulename": "sqlmesh.core.dialect", "qualname": "MacroFunc", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.expressions.Func"}, {"fullname": "sqlmesh.core.dialect.MacroDef", "modulename": "sqlmesh.core.dialect", "qualname": "MacroDef", "kind": "class", "doc": "<p></p>\n", "bases": "MacroFunc"}, {"fullname": "sqlmesh.core.dialect.MacroSQL", "modulename": "sqlmesh.core.dialect", "qualname": "MacroSQL", "kind": "class", "doc": "<p></p>\n", "bases": "MacroFunc"}, {"fullname": "sqlmesh.core.dialect.MacroStrReplace", "modulename": "sqlmesh.core.dialect", "qualname": "MacroStrReplace", "kind": "class", "doc": "<p></p>\n", "bases": "MacroFunc"}, {"fullname": "sqlmesh.core.dialect.PythonCode", "modulename": "sqlmesh.core.dialect", "qualname": "PythonCode", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.expressions.Expression"}, {"fullname": "sqlmesh.core.dialect.DColonCast", "modulename": "sqlmesh.core.dialect", "qualname": "DColonCast", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.expressions.Cast"}, {"fullname": "sqlmesh.core.dialect.format_model_expressions", "modulename": "sqlmesh.core.dialect", "qualname": "format_model_expressions", "kind": "function", "doc": "<p>Format a model's expressions into a standardized format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expressions:</strong>  The model's expressions, must be at least model def + query.</li>\n<li><strong>dialect:</strong>  The dialect to render the expressions as.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A string with the formatted model.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.dialect.text_diff", "modulename": "sqlmesh.core.dialect", "qualname": "text_diff", "kind": "function", "doc": "<p>Find the unified text diff between two expressions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.dialect.parse", "modulename": "sqlmesh.core.dialect", "qualname": "parse", "kind": "function", "doc": "<p>Parse a sql string.</p>\n\n<p>Supports parsing model definition.\nIf a jinja block is detected, the query is stored as raw string in a Jinja node.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql:</strong>  The sql based definition.</li>\n<li><strong>default_dialect:</strong>  The dialect to use if the model does not specify one.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of the expressions, [Model, *Statements, Query | Jinja]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">default_dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.dialect.extend_sqlglot", "modulename": "sqlmesh.core.dialect", "qualname": "extend_sqlglot", "kind": "function", "doc": "<p>Extend SQLGlot with SQLMesh's custom macro aware dialect.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.dialect.select_from_values", "modulename": "sqlmesh.core.dialect", "qualname": "select_from_values", "kind": "function", "doc": "<p>Generate a VALUES expression that has a select wrapped around it to cast the values to their correct types.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values:</strong>  List of values to use for the VALUES expression.</li>\n<li><strong>columns_to_types:</strong>  Mapping of column names to types to assign to the values.</li>\n<li><strong>batch_size:</strong>  The maximum number of tuples per batch, if &lt;= 0 then no batching will occur.</li>\n<li><strong>alias:</strong>  The alias to assign to the values expression. If not provided then will default to \"t\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This method operates as a generator and yields a VALUES expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">alias</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;t&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Select</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.dialect.pandas_to_sql", "modulename": "sqlmesh.core.dialect", "qualname": "pandas_to_sql", "kind": "function", "doc": "<p>Convert a pandas dataframe into a VALUES sql statement.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>df:</strong>  A pandas dataframe to convert.</li>\n<li><strong>columns_to_types:</strong>  Mapping of column names to types to assign to the values.</li>\n<li><strong>batch_size:</strong>  The maximum number of tuples per batch, if &lt;= 0 then no batching will occur.</li>\n<li><strong>alias:</strong>  The alias to assign to the values expression. If not provided then will default to \"t\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This method operates as a generator and yields a VALUES expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">alias</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;t&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Select</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter", "modulename": "sqlmesh.core.engine_adapter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.create_engine_adapter", "modulename": "sqlmesh.core.engine_adapter", "qualname": "create_engine_adapter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection_factory</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">multithreaded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base", "modulename": "sqlmesh.core.engine_adapter.base", "kind": "module", "doc": "<h1 id=\"engineadapter\">EngineAdapter</h1>\n\n<p>Engine adapters are how SQLMesh connects and interacts with various data stores. They allow SQLMesh to\ngeneralize its functionality to different engines that have Python Database API 2.0-compliant\nconnections. Rather than executing queries directly against your data stores, SQLMesh components such as\nthe SnapshotEvaluator delegate them to engine adapters so these components can be engine-agnostic.</p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.__init__", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection_factory</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sql_gen_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">dialects</span><span class=\"o\">.</span><span class=\"n\">dialect</span><span class=\"o\">.</span><span class=\"n\">Dialect</span> <span class=\"o\">|</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">multithreaded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.recycle", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.recycle", "kind": "function", "doc": "<p>Closes all open connections and releases all allocated resources associated with any thread\nexcept the calling one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.close", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.close", "kind": "function", "doc": "<p>Closes all open connections and releases all allocated resources.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.replace_query", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.replace_query", "kind": "function", "doc": "<p>Replaces an existing table with a query.</p>\n\n<p>For partition based engines (hive, spark), insert override is used. For other systems, create or replace is used.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the table (eg. prod.table)</li>\n<li><strong>query_or_df:</strong>  The SQL query to run or a dataframe.</li>\n<li><strong>columns_to_types:</strong>  Only used if a dataframe is provided. A mapping between the column name and its data type.\nExpected to be ordered to match the order of values in the dataframe.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989439984&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_df</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5987769776&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.create_index", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.create_index", "kind": "function", "doc": "<p>Creates a new index for the given table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the target table.</li>\n<li><strong>index_name:</strong>  The name of the index.</li>\n<li><strong>columns:</strong>  The list of columns that constitute the index.</li>\n<li><strong>exists:</strong>  Indicates whether to include the IF NOT EXISTS check.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5987851744&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">index_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.create_table", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.create_table", "kind": "function", "doc": "<p>Create a table using a DDL statement or a CTAS.</p>\n\n<p>If a query is passed in instead of column type map, CREATE TABLE AS will be used.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the table to create. Can be fully qualified or just table name.</li>\n<li><strong>query_or_columns_to_types:</strong>  A query or mapping between the column name and its data type.</li>\n<li><strong>primary_key:</strong>  Determines the table primary key.</li>\n<li><strong>exists:</strong>  Indicates whether to include the IF NOT EXISTS check.</li>\n<li><strong>kwargs:</strong>  Optional create table properties.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5988301648&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Subqueryable</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DerivedTable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">primary_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.create_state_table", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.create_state_table", "kind": "function", "doc": "<p>Create a table to store SQLMesh internal state.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the table to create. Can be fully qualified or just table name.</li>\n<li><strong>columns_to_types:</strong>  A mapping between the column name and its data type.</li>\n<li><strong>primary_key:</strong>  Determines the table primary key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">primary_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.create_table_like", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.create_table_like", "kind": "function", "doc": "<p>Create a table like another table or view.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5987714768&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">source_table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5988816960&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.drop_table", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.drop_table", "kind": "function", "doc": "<p>Drops a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the table to drop.</li>\n<li><strong>exists:</strong>  If exists, defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.alter_table", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.alter_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989111248&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">added_columns</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dropped_columns</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.create_view", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.create_view", "kind": "function", "doc": "<p>Create a view with a query or dataframe.</p>\n\n<p>If a dataframe is passed in, it will be converted into a literal values statement.\nThis should only be done if the dataframe is very small!</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>view_name:</strong>  The view name.</li>\n<li><strong>query_or_df:</strong>  A query or dataframe.</li>\n<li><strong>columns_to_types:</strong>  Columns to use in the view statement.</li>\n<li><strong>replace:</strong>  Whether or not to replace an existing view defaults to True.</li>\n<li><strong>create_kwargs:</strong>  Additional kwargs to pass into the Create expression</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">view_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989702896&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_df</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989696704&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">replace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">create_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.create_schema", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.create_schema", "kind": "function", "doc": "<p>Create a schema from a name or qualified table name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">schema_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ignore_if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.drop_schema", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.drop_schema", "kind": "function", "doc": "<p>Drop a schema from a name or qualified table name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_if_not_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cascade</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.drop_view", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.drop_view", "kind": "function", "doc": "<p>Drop a view.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">view_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989424848&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_if_not_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.columns", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.columns", "kind": "function", "doc": "<p>Fetches column names and types for the target table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5988766752&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.table_exists", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.table_exists", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5988772896&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.delete_from", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.delete_from", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989094096&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.insert_append", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.insert_append", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5988772368&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_df</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989162560&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">contains_json</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.insert_overwrite_by_time_partition", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.insert_overwrite_by_time_partition", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5988701696&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_df</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5988698672&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_formatter</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_column</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">TimeColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Column</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.update_table", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.update_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989716784&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Condition</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">contains_json</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.merge", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.merge", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_table</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989131568&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">source_table</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989559136&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">unique_key</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.rename_table", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.rename_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">old_table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5989553664&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">new_table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5987569760&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.fetchone", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.fetchone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_unsupported_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.fetchall", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.fetchall", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_unsupported_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.fetchdf", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.fetchdf", "kind": "function", "doc": "<p>Fetches a Pandas DataFrame from the cursor</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.fetch_pyspark_df", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.fetch_pyspark_df", "kind": "function", "doc": "<p>Fetches a PySpark DataFrame from the cursor</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.transaction", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.transaction", "kind": "function", "doc": "<p>A transaction context manager.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transaction_type</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"n\">TransactionType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">TransactionType</span><span class=\"o\">.</span><span class=\"n\">DML</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DML&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.supports_transactions", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.supports_transactions", "kind": "function", "doc": "<p>Whether or not the engine adapter supports transactions for the given transaction type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transaction_type</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"n\">TransactionType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapter.execute", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapter.execute", "kind": "function", "doc": "<p>Execute a sql query.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_unsupported_errors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapterWithIndexSupport", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapterWithIndexSupport", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "EngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.base.EngineAdapterWithIndexSupport.create_index", "modulename": "sqlmesh.core.engine_adapter.base", "qualname": "EngineAdapterWithIndexSupport.create_index", "kind": "function", "doc": "<p>Creates a new index for the given table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the target table.</li>\n<li><strong>index_name:</strong>  The name of the index.</li>\n<li><strong>columns:</strong>  The list of columns that constitute the index.</li>\n<li><strong>exists:</strong>  Indicates whether to include the IF NOT EXISTS check.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5987280032&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">index_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base_spark", "modulename": "sqlmesh.core.engine_adapter.base_spark", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.base_spark.BaseSparkEngineAdapter", "modulename": "sqlmesh.core.engine_adapter.base_spark", "qualname": "BaseSparkEngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "sqlmesh.core.engine_adapter.base.EngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.base_spark.BaseSparkEngineAdapter.replace_query", "modulename": "sqlmesh.core.engine_adapter.base_spark", "qualname": "BaseSparkEngineAdapter.replace_query", "kind": "function", "doc": "<p>Replaces an existing table with a query.</p>\n\n<p>For partition based engines (hive, spark), insert override is used. For other systems, create or replace is used.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the table (eg. prod.table)</li>\n<li><strong>query_or_df:</strong>  The SQL query to run or a dataframe.</li>\n<li><strong>columns_to_types:</strong>  Only used if a dataframe is provided. A mapping between the column name and its data type.\nExpected to be ordered to match the order of values in the dataframe.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5986678576&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_df</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5986892144&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base_spark.BaseSparkEngineAdapter.create_state_table", "modulename": "sqlmesh.core.engine_adapter.base_spark", "qualname": "BaseSparkEngineAdapter.create_state_table", "kind": "function", "doc": "<p>Create a table to store SQLMesh internal state.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the table to create. Can be fully qualified or just table name.</li>\n<li><strong>columns_to_types:</strong>  A mapping between the column name and its data type.</li>\n<li><strong>primary_key:</strong>  Determines the table primary key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">primary_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base_spark.BaseSparkEngineAdapter.alter_table", "modulename": "sqlmesh.core.engine_adapter.base_spark", "qualname": "BaseSparkEngineAdapter.alter_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5987242896&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">added_columns</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dropped_columns</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.base_spark.BaseSparkEngineAdapter.supports_transactions", "modulename": "sqlmesh.core.engine_adapter.base_spark", "qualname": "BaseSparkEngineAdapter.supports_transactions", "kind": "function", "doc": "<p>Whether or not the engine adapter supports transactions for the given transaction type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transaction_type</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"n\">TransactionType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.bigquery", "modulename": "sqlmesh.core.engine_adapter.bigquery", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.bigquery.BigQueryEngineAdapter", "modulename": "sqlmesh.core.engine_adapter.bigquery", "qualname": "BigQueryEngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "sqlmesh.core.engine_adapter.base.EngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.bigquery.BigQueryEngineAdapter.create_schema", "modulename": "sqlmesh.core.engine_adapter.bigquery", "qualname": "BigQueryEngineAdapter.create_schema", "kind": "function", "doc": "<p>Create a schema from a name or qualified table name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">schema_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ignore_if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.bigquery.BigQueryEngineAdapter.columns", "modulename": "sqlmesh.core.engine_adapter.bigquery", "qualname": "BigQueryEngineAdapter.columns", "kind": "function", "doc": "<p>Fetches column names and types for the target table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5996102416&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.bigquery.BigQueryEngineAdapter.table_exists", "modulename": "sqlmesh.core.engine_adapter.bigquery", "qualname": "BigQueryEngineAdapter.table_exists", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5996112160&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.bigquery.BigQueryEngineAdapter.create_state_table", "modulename": "sqlmesh.core.engine_adapter.bigquery", "qualname": "BigQueryEngineAdapter.create_state_table", "kind": "function", "doc": "<p>Create a table to store SQLMesh internal state.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_name:</strong>  The name of the table to create. Can be fully qualified or just table name.</li>\n<li><strong>columns_to_types:</strong>  A mapping between the column name and its data type.</li>\n<li><strong>primary_key:</strong>  Determines the table primary key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">primary_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.bigquery.BigQueryEngineAdapter.supports_transactions", "modulename": "sqlmesh.core.engine_adapter.bigquery", "qualname": "BigQueryEngineAdapter.supports_transactions", "kind": "function", "doc": "<p>Whether or not the engine adapter supports transactions for the given transaction type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transaction_type</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"n\">TransactionType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.databricks", "modulename": "sqlmesh.core.engine_adapter.databricks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.databricks.DatabricksSparkSessionEngineAdapter", "modulename": "sqlmesh.core.engine_adapter.databricks", "qualname": "DatabricksSparkSessionEngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "sqlmesh.core.engine_adapter.spark.SparkEngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.databricks_api", "modulename": "sqlmesh.core.engine_adapter.databricks_api", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.databricks_api.DatabricksSQLEngineAdapter", "modulename": "sqlmesh.core.engine_adapter.databricks_api", "qualname": "DatabricksSQLEngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "sqlmesh.core.engine_adapter.base_spark.BaseSparkEngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.duckdb", "modulename": "sqlmesh.core.engine_adapter.duckdb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.duckdb.DuckDBEngineAdapter", "modulename": "sqlmesh.core.engine_adapter.duckdb", "qualname": "DuckDBEngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "sqlmesh.core.engine_adapter.base.EngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.redshift", "modulename": "sqlmesh.core.engine_adapter.redshift", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.redshift.RedshiftEngineAdapter", "modulename": "sqlmesh.core.engine_adapter.redshift", "qualname": "RedshiftEngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "sqlmesh.core.engine_adapter.base.EngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.redshift.RedshiftEngineAdapter.create_view", "modulename": "sqlmesh.core.engine_adapter.redshift", "qualname": "RedshiftEngineAdapter.create_view", "kind": "function", "doc": "<p>Redshift doesn't support <code>VALUES</code> expressions outside of a <code>INSERT</code> statement. Currently sqlglot cannot\nperformantly convert a values expression into a series of <code>UNION ALL</code> statements. Therefore we just don't\nsupport views for Redshift until sqlglot is updated to performantly support large union statements.</p>\n\n<p>Also Redshift views are \"binding\" by default to their underlying table which means you can't drop that\nunderlying table without dropping the view first. This is a problem for us since we want to be able to\nswap tables out from under views. Therefore we create the view as non-binding.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">view_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6006309696&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_df</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6006311760&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">replace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">create_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.redshift.RedshiftEngineAdapter.replace_query", "modulename": "sqlmesh.core.engine_adapter.redshift", "qualname": "RedshiftEngineAdapter.replace_query", "kind": "function", "doc": "<p>Redshift doesn't support <code>CREATE OR REPLACE TABLE...</code> with <code>VALUES</code> expression so we need to specially\nhandle DataFrame replacements.</p>\n\n<p>If the table doesn't exist then we just create it and load it with insert statements</p>\n\n<h6 id=\"if-it-does-exist-then-we-need-to-do-the\">If it does exist then we need to do the:</h6>\n\n<blockquote>\n  <p><code>CREATE TABLE...</code>, <code>INSERT INTO...</code>, <code>RENAME TABLE...</code>, <code>RENAME TABLE...</code>, DROP TABLE...`  dance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6006660624&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_df</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6006632752&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.redshift.RedshiftEngineAdapter.table_exists", "modulename": "sqlmesh.core.engine_adapter.redshift", "qualname": "RedshiftEngineAdapter.table_exists", "kind": "function", "doc": "<p>Redshift doesn't support describe so I'm using what the redshift cursor does to check if a table\nexists. We don't use this directly because we still want all execution to go through our execute method</p>\n\n<p>Reference: <a href=\"https://github.com/aws/amazon-redshift-python-driver/blob/master/redshift_connector/cursor.py#L528-L553\">https://github.com/aws/amazon-redshift-python-driver/blob/master/redshift_connector/cursor.py#L528-L553</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6006623152&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.shared", "modulename": "sqlmesh.core.engine_adapter.shared", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.shared.TransactionType", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "TransactionType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.core.engine_adapter.shared.TransactionType.DDL", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "TransactionType.DDL", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;TransactionType.DDL: &#x27;DDL&#x27;&gt;"}, {"fullname": "sqlmesh.core.engine_adapter.shared.TransactionType.DML", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "TransactionType.DML", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;TransactionType.DML: &#x27;DML&#x27;&gt;"}, {"fullname": "sqlmesh.core.engine_adapter.shared.DataObjectType", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "DataObjectType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.core.engine_adapter.shared.DataObjectType.UNKNOWN", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "DataObjectType.UNKNOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;DataObjectType.UNKNOWN: &#x27;unknown&#x27;&gt;"}, {"fullname": "sqlmesh.core.engine_adapter.shared.DataObjectType.TABLE", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "DataObjectType.TABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;DataObjectType.TABLE: &#x27;table&#x27;&gt;"}, {"fullname": "sqlmesh.core.engine_adapter.shared.DataObjectType.VIEW", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "DataObjectType.VIEW", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;DataObjectType.VIEW: &#x27;view&#x27;&gt;"}, {"fullname": "sqlmesh.core.engine_adapter.shared.DataObjectType.from_str", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "DataObjectType.from_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"n\">DataObjectType</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.shared.DataObject", "modulename": "sqlmesh.core.engine_adapter.shared", "qualname": "DataObject", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.engine_adapter.snowflake", "modulename": "sqlmesh.core.engine_adapter.snowflake", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.snowflake.SnowflakeEngineAdapter", "modulename": "sqlmesh.core.engine_adapter.snowflake", "qualname": "SnowflakeEngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "sqlmesh.core.engine_adapter.base.EngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.spark", "modulename": "sqlmesh.core.engine_adapter.spark", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.engine_adapter.spark.SparkEngineAdapter", "modulename": "sqlmesh.core.engine_adapter.spark", "qualname": "SparkEngineAdapter", "kind": "class", "doc": "<p>Base class wrapping a Database API compliant connection.</p>\n\n<p>The EngineAdapter is an easily-subclassable interface that interacts\nwith the underlying engine and data store.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API-compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n<li><strong>multithreaded:</strong>  Indicates whether this adapter will be used by more than one thread.</li>\n</ul>\n", "bases": "sqlmesh.core.engine_adapter.base_spark.BaseSparkEngineAdapter"}, {"fullname": "sqlmesh.core.engine_adapter.spark.SparkEngineAdapter.fetchdf", "modulename": "sqlmesh.core.engine_adapter.spark", "qualname": "SparkEngineAdapter.fetchdf", "kind": "function", "doc": "<p>Fetches a Pandas DataFrame from the cursor</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.spark.SparkEngineAdapter.fetch_pyspark_df", "modulename": "sqlmesh.core.engine_adapter.spark", "qualname": "SparkEngineAdapter.fetch_pyspark_df", "kind": "function", "doc": "<p>Fetches a PySpark DataFrame from the cursor</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.engine_adapter.spark.SparkEngineAdapter.insert_append", "modulename": "sqlmesh.core.engine_adapter.spark", "qualname": "SparkEngineAdapter.insert_append", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6006820864&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">query_or_df</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6007212544&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">columns_to_types</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">contains_json</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.environment", "modulename": "sqlmesh.core.environment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.environment.Environment", "modulename": "sqlmesh.core.environment", "qualname": "Environment", "kind": "class", "doc": "<p>Represents an isolated environment.</p>\n\n<p>Environments are isolated workspaces that hold pointers to physical tables.</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.environment.Environment.normalize_name", "modulename": "sqlmesh.core.environment", "qualname": "Environment.normalize_name", "kind": "function", "doc": "<p>Normalizes the environment name so we create names that are valid names for database objects.\nThis means alphanumeric and underscores only. Invalid characters are replaced with underscores.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.hooks", "modulename": "sqlmesh.core.hooks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.hooks.hook", "modulename": "sqlmesh.core.hooks", "qualname": "hook", "kind": "class", "doc": "<p>Specifies a function is a hook and registers it the global hooks registry.</p>\n\n<p>Registered hooks can be used in pre or post processing of models.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>from sqlmesh.core.hooks import hook</p>\n  \n  <p>@hook()\n  def echo(\n      context: ExecutionContext,\n      start: datetime,\n      end: datetime,\n      latest: datetime,\n      **kwargs,\n  ) -> None:\n      print(kwargs)</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  A custom name for the macro, the default is the name of the function.</li>\n</ul>\n", "bases": "sqlmesh.utils.registry_decorator"}, {"fullname": "sqlmesh.core.loader", "modulename": "sqlmesh.core.loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.loader.update_model_schemas", "modulename": "sqlmesh.core.loader", "qualname": "update_model_schemas", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dag</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">models</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.loader.LoadedProject", "modulename": "sqlmesh.core.loader", "qualname": "LoadedProject", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.loader.LoadedProject.__init__", "modulename": "sqlmesh.core.loader", "qualname": "LoadedProject.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">macros</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">macro</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">hooks</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">hooks</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">models</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]</span>,</span><span class=\"param\">\t<span class=\"n\">audits</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">audit</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Audit</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dag</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "sqlmesh.core.loader.Loader", "modulename": "sqlmesh.core.loader", "qualname": "Loader", "kind": "class", "doc": "<p>Abstract base class to load macros and models for a context</p>\n", "bases": "abc.ABC"}, {"fullname": "sqlmesh.core.loader.Loader.load", "modulename": "sqlmesh.core.loader", "qualname": "Loader.load", "kind": "function", "doc": "<p>Loads all hooks, macros, and models in the context's path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  The context to load macros and models for</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">LoadedProject</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.loader.Loader.reload_needed", "modulename": "sqlmesh.core.loader", "qualname": "Loader.reload_needed", "kind": "function", "doc": "<p>Checks for any modifications to the files the macros and models depend on\nsince the last load.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if a modification is found; False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.loader.SqlMeshLoader", "modulename": "sqlmesh.core.loader", "qualname": "SqlMeshLoader", "kind": "class", "doc": "<p>Loads macros and models for a context using the SQLMesh file formats</p>\n", "bases": "Loader"}, {"fullname": "sqlmesh.core.macros", "modulename": "sqlmesh.core.macros", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.macros.MacroStrTemplate", "modulename": "sqlmesh.core.macros", "qualname": "MacroStrTemplate", "kind": "class", "doc": "<p>A string class for supporting $-substitutions.</p>\n", "bases": "string.Template"}, {"fullname": "sqlmesh.core.macros.MacroDialect", "modulename": "sqlmesh.core.macros", "qualname": "MacroDialect", "kind": "class", "doc": "<p></p>\n", "bases": "sqlglot.executor.python.Python"}, {"fullname": "sqlmesh.core.macros.MacroDialect.__init__", "modulename": "sqlmesh.core.macros", "qualname": "MacroDialect.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.core.macros.MacroDialect.Generator", "modulename": "sqlmesh.core.macros", "qualname": "MacroDialect.Generator", "kind": "class", "doc": "<p>Generator interprets the given syntax tree and produces a SQL string as an output.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_mapping (dict):</strong>  the dictionary of custom time mappings in which the key\nrepresents a python time format and the output the target time format</li>\n<li><strong>time_trie (trie):</strong>  a trie of the time_mapping keys</li>\n<li><strong>pretty (bool):</strong>  if set to True the returned string will be formatted. Default: False.</li>\n<li><strong>quote_start (str):</strong>  specifies which starting character to use to delimit quotes. Default: '.</li>\n<li><strong>quote_end (str):</strong>  specifies which ending character to use to delimit quotes. Default: '.</li>\n<li><strong>identifier_start (str):</strong>  specifies which starting character to use to delimit identifiers. Default: \".</li>\n<li><strong>identifier_end (str):</strong>  specifies which ending character to use to delimit identifiers. Default: \".</li>\n<li><strong>identify (bool | str):</strong>  'always': always quote, 'safe': quote identifiers if they don't contain an upcase, True defaults to always.</li>\n<li><strong>normalize (bool):</strong>  if set to True all identifiers will lower cased</li>\n<li><strong>string_escape (str):</strong>  specifies a string escape character. Default: '.</li>\n<li><strong>identifier_escape (str):</strong>  specifies an identifier escape character. Default: \".</li>\n<li><strong>pad (int):</strong>  determines padding in a formatted string. Default: 2.</li>\n<li><strong>indent (int):</strong>  determines the size of indentation in a formatted string. Default: 4.</li>\n<li><strong>unnest_column_only (bool):</strong>  if true unnest table aliases are considered only as column aliases</li>\n<li><strong>normalize_functions (str):</strong>  normalize function names, \"upper\", \"lower\", or None\nDefault: \"upper\"</li>\n<li><strong>alias_post_tablesample (bool):</strong>  if the table alias comes after tablesample\nDefault: False</li>\n<li><strong>unsupported_level (ErrorLevel):</strong>  determines the generator's behavior when it encounters\nunsupported expressions. Default ErrorLevel.WARN.</li>\n<li><strong>null_ordering (str):</strong>  Indicates the default null ordering method to use if not explicitly set.\nOptions are \"nulls_are_small\", \"nulls_are_large\", \"nulls_are_last\".\nDefault: \"nulls_are_small\"</li>\n<li><strong>max_unsupported (int):</strong>  Maximum number of unsupported messages to include in a raised UnsupportedError.\nThis is only relevant if unsupported_level is ErrorLevel.RAISE.\nDefault: 3</li>\n<li><strong>leading_comma (bool):</strong>  if the the comma is leading or trailing in select statements\nDefault: False</li>\n<li><strong>max_text_width:</strong>  The max number of characters in a segment before creating new lines in pretty mode.\nThe default is on the smaller end because the length only represents a segment and not the true\nline length.\nDefault: 80</li>\n<li><strong>comments:</strong>  Whether or not to preserve comments in the output SQL code.\nDefault: True</li>\n</ul>\n", "bases": "sqlglot.executor.python.Python.Generator"}, {"fullname": "sqlmesh.core.macros.MacroEvaluator", "modulename": "sqlmesh.core.macros", "qualname": "MacroEvaluator", "kind": "class", "doc": "<p>The class responsible for evaluating SQLMesh Macros/SQL.</p>\n\n<p>SQLMesh supports special preprocessed SQL prefixed with <code>@</code>. Although it provides similar power to\ntraditional methods like string templating, there is semantic understanding of SQL which prevents\ncommon errors like leading/trailing commas, syntax errors, etc.</p>\n\n<p>SQLMesh SQL allows for macro variables and macro functions. Macro variables take the form of @variable. These are used for variable substitution.</p>\n\n<p>SELECT * FROM foo WHERE ds BETWEEN @start_date AND @end_date</p>\n\n<p>Macro variables can be defined with a special macro function.</p>\n\n<p>@DEF(start_date, '2021-01-01')</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect:</strong>  Dialect of the SQL to evaluate.</li>\n<li><strong>python_env:</strong>  Serialized Python environment.</li>\n</ul>\n"}, {"fullname": "sqlmesh.core.macros.MacroEvaluator.__init__", "modulename": "sqlmesh.core.macros", "qualname": "MacroEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">python_env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jinja_env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.core.macros.MacroEvaluator.send", "modulename": "sqlmesh.core.macros", "qualname": "MacroEvaluator.send", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.MacroEvaluator.transform", "modulename": "sqlmesh.core.macros", "qualname": "MacroEvaluator.transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.MacroEvaluator.template", "modulename": "sqlmesh.core.macros", "qualname": "MacroEvaluator.template", "kind": "function", "doc": "<p>Substitute @vars with locals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text:</strong>  The string to do substitition on.</li>\n<li><strong>local_variables:</strong>  Local variables in the context so that lambdas can be used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The rendered string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">local_variables</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.MacroEvaluator.evaluate", "modulename": "sqlmesh.core.macros", "qualname": "MacroEvaluator.evaluate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dialect</span><span class=\"o\">.</span><span class=\"n\">MacroFunc</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.MacroEvaluator.eval_expression", "modulename": "sqlmesh.core.macros", "qualname": "MacroEvaluator.eval_expression", "kind": "function", "doc": "<p>Converts a SQLGlot expression into executable Python code and evals it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>node:</strong>  expression</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The return value of the evaled Python Code.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.MacroEvaluator.parse_one", "modulename": "sqlmesh.core.macros", "qualname": "MacroEvaluator.parse_one", "kind": "function", "doc": "<p>Parses the given SQL string and returns a syntax tree for the first\nparsed SQL statement.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql (str):</strong>  the SQL code string to parse.</li>\n<li><strong>into (Expression):</strong>  the Expression to parse into</li>\n<li><strong>**opts:</strong>  other options</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Expression: the syntax tree for the first parsed statement</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">into</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">opts</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.macro", "modulename": "sqlmesh.core.macros", "qualname": "macro", "kind": "class", "doc": "<p>Specifies a function is a macro and registers it the global MACROS registry.</p>\n\n<p>Registered macros can be referenced in SQL statements to make queries more dynamic/cleaner.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>from typing import t\n  from sqlglot import exp\n  from sqlmesh.core.macros import MacroEvaluator, macro</p>\n  \n  <p>@macro()\n  def add_one(evaluator: MacroEvaluator, column: str) -> exp.Add:\n      return evaluator.parse_one(f\"{column} + 1\")</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  A custom name for the macro, the default is the name of the function.</li>\n</ul>\n", "bases": "sqlmesh.utils.registry_decorator"}, {"fullname": "sqlmesh.core.macros.each", "modulename": "sqlmesh.core.macros", "qualname": "each", "kind": "function", "doc": "<p>Iterates through items calling func on each.</p>\n\n<p>If a func call on item returns None, it will be excluded from the list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>args:</strong>  The last argument should be a lambda of the form x -> x +1. The first argument can be\nan Array or var args can be used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of items that is the result of func</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.reduce_", "modulename": "sqlmesh.core.macros", "qualname": "reduce_", "kind": "function", "doc": "<p>Iterates through items applying provided function that takes two arguments\ncumulatively to the items of iterable items, from left to right, so as to reduce\nthe iterable to a single item.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlglot</span> <span class=\"kn\">import</span> <span class=\"n\">parse_one</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.macros</span> <span class=\"kn\">import</span> <span class=\"n\">MacroEvaluator</span><span class=\"p\">,</span> <span class=\"n\">reduce_</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;@SQL(@REDUCE([100, 200, 300, 400], (x, y) -&gt; x + y))&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;1000&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>args:</strong>  The last argument should be a lambda of the form (x, y) -> x + y. The first argument can be\nan Array or var args can be used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A single item that is the result of applying func cumulatively to items</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.filter_", "modulename": "sqlmesh.core.macros", "qualname": "filter_", "kind": "function", "doc": "<p>Iterates through items, applying provided function to each item and removing\nall items where the function returns False</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlglot</span> <span class=\"kn\">import</span> <span class=\"n\">parse_one</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.macros</span> <span class=\"kn\">import</span> <span class=\"n\">MacroEvaluator</span><span class=\"p\">,</span> <span class=\"n\">filter_</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;@REDUCE(@FILTER([1, 2, 3], x -&gt; x &gt; 1), (x, y) -&gt; x + y)&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;5&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>args:</strong>  The last argument should be a lambda of the form x -> x &gt; 1. The first argument can be\nan Array or var args can be used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The items for which the func returned True</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.with_", "modulename": "sqlmesh.core.macros", "qualname": "with_", "kind": "function", "doc": "<p>Inserts WITH expression when the condition is True</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlglot</span> <span class=\"kn\">import</span> <span class=\"n\">parse_one</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.macros</span> <span class=\"kn\">import</span> <span class=\"n\">MacroEvaluator</span><span class=\"p\">,</span> <span class=\"n\">with_</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;@WITH(True) all_cities as (select * from city) select all_cities&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;WITH all_cities AS (SELECT * FROM city) SELECT all_cities&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>condition:</strong>  Condition expression</li>\n<li><strong>expression:</strong>  With expression</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>With expression if the conditional is True; otherwise None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">condition</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Condition</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">With</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">With</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.join", "modulename": "sqlmesh.core.macros", "qualname": "join", "kind": "function", "doc": "<p>Inserts JOIN expression when the condition is True</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlglot</span> <span class=\"kn\">import</span> <span class=\"n\">parse_one</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.macros</span> <span class=\"kn\">import</span> <span class=\"n\">MacroEvaluator</span><span class=\"p\">,</span> <span class=\"n\">join</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;select * from city @JOIN(True) country on city.country = country.name&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;SELECT * FROM city JOIN country ON city.country = country.name&#39;</span>\n</code></pre>\n  </div>\n  \n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;select * from city left outer @JOIN(True) country on city.country = country.name&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;SELECT * FROM city LEFT OUTER JOIN country ON city.country = country.name&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>condition:</strong>  Condition expression</li>\n<li><strong>expression:</strong>  Join expression</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Join expression if the conditional is True; otherwise None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">condition</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Condition</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Join</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Join</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.where", "modulename": "sqlmesh.core.macros", "qualname": "where", "kind": "function", "doc": "<p>Inserts WHERE expression when the condition is True</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlglot</span> <span class=\"kn\">import</span> <span class=\"n\">parse_one</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.macros</span> <span class=\"kn\">import</span> <span class=\"n\">MacroEvaluator</span><span class=\"p\">,</span> <span class=\"n\">where</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;select * from city @WHERE(True) population &gt; 100 and country = &#39;Mexico&#39;&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&quot;SELECT * FROM city WHERE population &gt; 100 AND country = &#39;Mexico&#39;&quot;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>condition:</strong>  Condition expression</li>\n<li><strong>expression:</strong>  Where expression</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Where expression if condition is True; otherwise None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">condition</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Condition</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Where</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Where</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.group_by", "modulename": "sqlmesh.core.macros", "qualname": "group_by", "kind": "function", "doc": "<p>Inserts GROUP BY expression when the condition is True</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlglot</span> <span class=\"kn\">import</span> <span class=\"n\">parse_one</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.macros</span> <span class=\"kn\">import</span> <span class=\"n\">MacroEvaluator</span><span class=\"p\">,</span> <span class=\"n\">group_by</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;select * from city @GROUP_BY(True) country, population&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;SELECT * FROM city GROUP BY country, population&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>condition:</strong>  Condition expression</li>\n<li><strong>expression:</strong>  Group expression</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Group expression if the condition is True; otherwise None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">condition</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Condition</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Group</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.having", "modulename": "sqlmesh.core.macros", "qualname": "having", "kind": "function", "doc": "<p>Inserts HAVING expression when the condition is True</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlglot</span> <span class=\"kn\">import</span> <span class=\"n\">parse_one</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.macros</span> <span class=\"kn\">import</span> <span class=\"n\">MacroEvaluator</span><span class=\"p\">,</span> <span class=\"n\">having</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;select * from city group by country @HAVING(True) population &gt; 100 and country = &#39;Mexico&#39;&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&quot;SELECT * FROM city GROUP BY country HAVING population &gt; 100 AND country = &#39;Mexico&#39;&quot;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>condition:</strong>  Condition expression</li>\n<li><strong>expression:</strong>  Having expression</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Having expression if the condition is True; otherwise None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">condition</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Condition</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Having</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Having</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.order_by", "modulename": "sqlmesh.core.macros", "qualname": "order_by", "kind": "function", "doc": "<p>Inserts ORDER BY expression when the condition is True</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlglot</span> <span class=\"kn\">import</span> <span class=\"n\">parse_one</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlmesh.core.macros</span> <span class=\"kn\">import</span> <span class=\"n\">MacroEvaluator</span><span class=\"p\">,</span> <span class=\"n\">order_by</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;select * from city @ORDER_BY(True) population, name DESC&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MacroEvaluator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">parse_one</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;SELECT * FROM city ORDER BY population, name DESC&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>evaluator:</strong>  MacroEvaluator that invoked the macro</li>\n<li><strong>condition:</strong>  Condition expression</li>\n<li><strong>expression:</strong>  Order expression</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Order expression if the condition is True; otherwise None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">MacroEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">condition</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Condition</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Order</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Order</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.macros.normalize_macro_name", "modulename": "sqlmesh.core.macros", "qualname": "normalize_macro_name", "kind": "function", "doc": "<p>Prefix macro name with @ and upcase</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model", "modulename": "sqlmesh.core.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.model.common", "modulename": "sqlmesh.core.model.common", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.model.common.parse_model_name", "modulename": "sqlmesh.core.model.common", "qualname": "parse_model_name", "kind": "function", "doc": "<p>Convert a model name into table parts.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  model name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple consisting of catalog, schema, table name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.common.parse_expression", "modulename": "sqlmesh.core.model.common", "qualname": "parse_expression", "kind": "function", "doc": "<p>Helper method to deserialize SQLGlot expressions in Pydantic Models.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.common.expression_validator", "modulename": "sqlmesh.core.model.common", "qualname": "expression_validator", "kind": "function", "doc": "<p>Helper method to deserialize SQLGlot expressions in Pydantic Models.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">],</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.decorator", "modulename": "sqlmesh.core.model.decorator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.model.decorator.model", "modulename": "sqlmesh.core.model.decorator", "qualname": "model", "kind": "class", "doc": "<p>Specifies a function is a python based model.</p>\n", "bases": "sqlmesh.utils.registry_decorator"}, {"fullname": "sqlmesh.core.model.decorator.model.__init__", "modulename": "sqlmesh.core.model.decorator", "qualname": "model.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqlmesh.core.model.decorator.model.model", "modulename": "sqlmesh.core.model.decorator", "qualname": "model.model", "kind": "function", "doc": "<p>Get the model registered by this function.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">module_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">defaults</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_column_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition", "modulename": "sqlmesh.core.model.definition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.model.definition.SqlModel", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel", "kind": "class", "doc": "<p>The model definition which relies on a SQL query to fetch the data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>query:</strong>  The main query representing the model.</li>\n</ul>\n", "bases": "_Model"}, {"fullname": "sqlmesh.core.model.definition.SqlModel.render_query", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel.render_query", "kind": "function", "doc": "<p>Renders a model's query, expanding macros with provided kwargs, and optionally expanding referenced models.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  The start datetime to render. Defaults to epoch start.</li>\n<li><strong>end:</strong>  The end datetime to render. Defaults to epoch start.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries. Defaults to epoch start.</li>\n<li><strong>snapshots:</strong>  All upstream snapshots (by model name) to use for expansion and mapping of physical locations.</li>\n<li><strong>expand:</strong>  Expand referenced models as subqueries. This is used to bypass backfills when running queries\nthat depend on materialized tables.  Model definitions are inlined and can thus be run end to\nend on the fly.</li>\n<li><strong>audit_name:</strong>  The name of audit if the query to render is for an audit.</li>\n<li><strong>is_dev:</strong>  Indicates whether the rendering happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n<li><strong>kwargs:</strong>  Additional kwargs to pass to the renderer.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The rendered expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5996436528&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">expand</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Subqueryable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.SqlModel.render_definition", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel.render_definition", "kind": "function", "doc": "<p>Returns the original list of sql expressions comprising the model definition.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>include_python:</strong>  Whether or not to include Python code in the rendered definition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">include_python</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.SqlModel.contains_star_query", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel.contains_star_query", "kind": "variable", "doc": "<p>Returns True if the model's query contains a star projection.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.model.definition.SqlModel.update_schema", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel.update_schema", "kind": "function", "doc": "<p>Updates the schema associated with this model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>schema:</strong>  The new schema.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">MappingSchema</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.SqlModel.columns_to_types", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel.columns_to_types", "kind": "variable", "doc": "<p>Returns the mapping of column names to types of this model.</p>\n", "annotation": ": Dict[str, sqlglot.expressions.DataType]"}, {"fullname": "sqlmesh.core.model.definition.SqlModel.column_descriptions", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel.column_descriptions", "kind": "variable", "doc": "<p>A dictionary of column names to annotation comments.</p>\n", "annotation": ": Dict[str, str]"}, {"fullname": "sqlmesh.core.model.definition.SqlModel.validate_definition", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel.validate_definition", "kind": "function", "doc": "<p>Validates the model's definition.</p>\n\n<p>Model's are not allowed to have duplicate column names, non-explicitly casted columns,\nor non infererrable column names.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>ConfigError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.SqlModel.is_breaking_change", "modulename": "sqlmesh.core.model.definition", "qualname": "SqlModel.is_breaking_change", "kind": "function", "doc": "<p>Determines whether this model is a breaking change in relation to the <code>previous</code> model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>previous:</strong>  The previous model to compare against.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if this model instance represents a breaking change, False if it's a non-breaking change\n  and None if the nature of the change can't be determined.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">previous</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.SeedModel", "modulename": "sqlmesh.core.model.definition", "qualname": "SeedModel", "kind": "class", "doc": "<p>The model definition which uses a pre-built static dataset to source the data from.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seed:</strong>  The content of a pre-built static dataset.</li>\n</ul>\n", "bases": "_Model"}, {"fullname": "sqlmesh.core.model.definition.SeedModel.render", "modulename": "sqlmesh.core.model.definition", "qualname": "SeedModel.render", "kind": "function", "doc": "<p>Renders the content of this model in a form of either a SELECT query, executing which the data for this model can\nbe fetched, or a dataframe object which contains the data itself.</p>\n\n<p>The type of the returned object (query or dataframe) depends on whether the model was sourced from a SQL query,\na Python script or a pre-built dataset (seed).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  The execution context used for fetching data.</li>\n<li><strong>start:</strong>  The start date/time of the run.</li>\n<li><strong>end:</strong>  The end date/time of the run.</li>\n<li><strong>latest:</strong>  The latest date/time to use for the run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A generator which yields eiether a query object or one of the supported dataframe objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">ExecutionContext</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6015216672&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.SeedModel.text_diff", "modulename": "sqlmesh.core.model.definition", "qualname": "SeedModel.text_diff", "kind": "function", "doc": "<p>Produce a text diff against another model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The model to diff against.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A unified text diff showing additions and deletions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.SeedModel.columns_to_types", "modulename": "sqlmesh.core.model.definition", "qualname": "SeedModel.columns_to_types", "kind": "variable", "doc": "<p>Returns the mapping of column names to types of this model.</p>\n", "annotation": ": Dict[str, sqlglot.expressions.DataType]"}, {"fullname": "sqlmesh.core.model.definition.SeedModel.is_breaking_change", "modulename": "sqlmesh.core.model.definition", "qualname": "SeedModel.is_breaking_change", "kind": "function", "doc": "<p>Determines whether this model is a breaking change in relation to the <code>previous</code> model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>previous:</strong>  The previous model to compare against.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if this model instance represents a breaking change, False if it's a non-breaking change\n  and None if the nature of the change can't be determined.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">previous</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.PythonModel", "modulename": "sqlmesh.core.model.definition", "qualname": "PythonModel", "kind": "class", "doc": "<p>The model definition which relies on a Python script to fetch the data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>entrypoint:</strong>  The name of a Python function which contains the data fetching / transformation logic.</li>\n</ul>\n", "bases": "_Model"}, {"fullname": "sqlmesh.core.model.definition.PythonModel.render", "modulename": "sqlmesh.core.model.definition", "qualname": "PythonModel.render", "kind": "function", "doc": "<p>Renders the content of this model in a form of either a SELECT query, executing which the data for this model can\nbe fetched, or a dataframe object which contains the data itself.</p>\n\n<p>The type of the returned object (query or dataframe) depends on whether the model was sourced from a SQL query,\na Python script or a pre-built dataset (seed).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  The execution context used for fetching data.</li>\n<li><strong>start:</strong>  The start date/time of the run.</li>\n<li><strong>end:</strong>  The end date/time of the run.</li>\n<li><strong>latest:</strong>  The latest date/time to use for the run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A generator which yields eiether a query object or one of the supported dataframe objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">ExecutionContext</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6016325024&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.PythonModel.render_definition", "modulename": "sqlmesh.core.model.definition", "qualname": "PythonModel.render_definition", "kind": "function", "doc": "<p>Returns the original list of sql expressions comprising the model definition.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>include_python:</strong>  Whether or not to include Python code in the rendered definition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">include_python</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.load_model", "modulename": "sqlmesh.core.model.definition", "qualname": "load_model", "kind": "function", "doc": "<p>Load a model from a parsed SQLMesh model file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expressions:</strong>  Model, *Statements, Query.</li>\n<li><strong>defaults:</strong>  Definition default values.</li>\n<li><strong>path:</strong>  An optional path to the model definition file.</li>\n<li><strong>module_path:</strong>  The python module path to serialize macros for.</li>\n<li><strong>time_column_format:</strong>  The default time column format to use if no model time column is configured.</li>\n<li><strong>macros:</strong>  The custom registry of macros. If not provided the default registry will be used.</li>\n<li><strong>hooks:</strong>  The custom registry of hooks. If not provided the default registry will be used.</li>\n<li><strong>python_env:</strong>  The custom Python environment for hooks/macros. If not provided the environment will be constructed\nfrom the macro registry.</li>\n<li><strong>dialect:</strong>  The default dialect if no model dialect is configured.\nThe format must adhere to Python's strftime codes.</li>\n<li><strong>kwargs:</strong>  Additional kwargs to pass to the loader.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">expressions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">defaults</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">module_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">time_column_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">macros</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">macro</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hooks</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">hooks</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">python_env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.create_sql_model", "modulename": "sqlmesh.core.model.definition", "qualname": "create_sql_model", "kind": "function", "doc": "<p>Creates a SQL model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The name of the model, which is of the form [catalog].[db].table.\nThe catalog and db are optional.</li>\n<li><strong>query:</strong>  The model's logic in a form of a SELECT query.</li>\n<li><strong>statements:</strong>  The list of all SQL statements that are not a query or a model definition.</li>\n<li><strong>defaults:</strong>  Definition default values.</li>\n<li><strong>path:</strong>  An optional path to the model definition file.</li>\n<li><strong>module_path:</strong>  The python module path to serialize macros for.</li>\n<li><strong>time_column_format:</strong>  The default time column format to use if no model time column is configured.</li>\n<li><strong>macros:</strong>  The custom registry of macros. If not provided the default registry will be used.</li>\n<li><strong>hooks:</strong>  The custom registry of hooks. If not provided the default registry will be used.</li>\n<li><strong>python_env:</strong>  The custom Python environment for hooks/macros. If not provided the environment will be constructed\nfrom the macro registry.</li>\n<li><strong>dialect:</strong>  The default dialect if no model dialect is configured.\nThe format must adhere to Python's strftime codes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">statements</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defaults</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">module_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">time_column_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">macros</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">macros</span><span class=\"o\">.</span><span class=\"n\">macro</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hooks</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">hooks</span><span class=\"o\">.</span><span class=\"n\">hook</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">python_env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.create_seed_model", "modulename": "sqlmesh.core.model.definition", "qualname": "create_seed_model", "kind": "function", "doc": "<p>Creates a Seed model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The name of the model, which is of the form [catalog].[db].table.\nThe catalog and db are optional.</li>\n<li><strong>seed_kind:</strong>  The information about the location of a seed and other related configuration.</li>\n<li><strong>defaults:</strong>  Definition default values.</li>\n<li><strong>path:</strong>  An optional path to the model definition file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">seed_kind</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">SeedKind</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">defaults</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.definition.create_python_model", "modulename": "sqlmesh.core.model.definition", "qualname": "create_python_model", "kind": "function", "doc": "<p>Creates a Python model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The name of the model, which is of the form [catalog].[db].table.\nThe catalog and db are optional.</li>\n<li><strong>entrypoint:</strong>  The name of a Python function which contains the data fetching / transformation logic.</li>\n<li><strong>python_env:</strong>  The Python environment of all objects referenced by the model implementation.</li>\n<li><strong>defaults:</strong>  Definition default values.</li>\n<li><strong>path:</strong>  An optional path to the model definition file.</li>\n<li><strong>time_column_format:</strong>  The default time column format to use if no model time column is configured.</li>\n<li><strong>depends_on:</strong>  The custom set of model's upstream dependencies.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">entrypoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">python_env</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">defaults</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">time_column_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">depends_on</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.kind", "modulename": "sqlmesh.core.model.kind", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.model.kind.ModelKindName", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKindName", "kind": "class", "doc": "<p>The kind of model, determining how this data is computed and stored in the warehouse.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.core.model.kind.ModelKindName.INCREMENTAL_BY_TIME_RANGE", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKindName.INCREMENTAL_BY_TIME_RANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ModelKindName.INCREMENTAL_BY_TIME_RANGE: &#x27;INCREMENTAL_BY_TIME_RANGE&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.kind.ModelKindName.INCREMENTAL_BY_UNIQUE_KEY", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKindName.INCREMENTAL_BY_UNIQUE_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ModelKindName.INCREMENTAL_BY_UNIQUE_KEY: &#x27;INCREMENTAL_BY_UNIQUE_KEY&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.kind.ModelKindName.FULL", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKindName.FULL", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ModelKindName.FULL: &#x27;FULL&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.kind.ModelKindName.VIEW", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKindName.VIEW", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ModelKindName.VIEW: &#x27;VIEW&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.kind.ModelKindName.EMBEDDED", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKindName.EMBEDDED", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ModelKindName.EMBEDDED: &#x27;EMBEDDED&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.kind.ModelKindName.SEED", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKindName.SEED", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ModelKindName.SEED: &#x27;SEED&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.kind.ModelKind", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKind", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.model.kind.ModelKind.only_latest", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKind.only_latest", "kind": "variable", "doc": "<p>Whether or not this model only cares about latest date to render.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.model.kind.ModelKind.to_expression", "modulename": "sqlmesh.core.model.kind", "qualname": "ModelKind.to_expression", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dialect</span><span class=\"o\">.</span><span class=\"n\">ModelKind</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.kind.TimeColumn", "modulename": "sqlmesh.core.model.kind", "qualname": "TimeColumn", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.model.kind.TimeColumn.expression", "modulename": "sqlmesh.core.model.kind", "qualname": "TimeColumn.expression", "kind": "variable", "doc": "<p>Convert this pydantic model into a time_column SQLGlot expression.</p>\n", "annotation": ": sqlglot.expressions.Column | sqlglot.expressions.Tuple"}, {"fullname": "sqlmesh.core.model.kind.TimeColumn.to_expression", "modulename": "sqlmesh.core.model.kind", "qualname": "TimeColumn.to_expression", "kind": "function", "doc": "<p>Convert this pydantic model into a time_column SQLGlot expression.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Column</span> <span class=\"o\">|</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.kind.IncrementalByTimeRangeKind", "modulename": "sqlmesh.core.model.kind", "qualname": "IncrementalByTimeRangeKind", "kind": "class", "doc": "<p></p>\n", "bases": "ModelKind"}, {"fullname": "sqlmesh.core.model.kind.IncrementalByTimeRangeKind.to_expression", "modulename": "sqlmesh.core.model.kind", "qualname": "IncrementalByTimeRangeKind.to_expression", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dialect</span><span class=\"o\">.</span><span class=\"n\">ModelKind</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.kind.IncrementalByUniqueKeyKind", "modulename": "sqlmesh.core.model.kind", "qualname": "IncrementalByUniqueKeyKind", "kind": "class", "doc": "<p></p>\n", "bases": "ModelKind"}, {"fullname": "sqlmesh.core.model.kind.SeedKind", "modulename": "sqlmesh.core.model.kind", "qualname": "SeedKind", "kind": "class", "doc": "<p></p>\n", "bases": "ModelKind"}, {"fullname": "sqlmesh.core.model.kind.SeedKind.to_expression", "modulename": "sqlmesh.core.model.kind", "qualname": "SeedKind.to_expression", "kind": "function", "doc": "<p>Convert the seed kind into a SQLGlot expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dialect</span><span class=\"o\">.</span><span class=\"n\">ModelKind</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.kind.model_kind_validator", "modulename": "sqlmesh.core.model.kind", "qualname": "model_kind_validator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">ModelKind</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.meta", "modulename": "sqlmesh.core.model.meta", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.model.meta.IntervalUnit", "modulename": "sqlmesh.core.model.meta", "qualname": "IntervalUnit", "kind": "class", "doc": "<p>IntervalUnit is the inferred granularity of an incremental model.</p>\n\n<p>IntervalUnit can be one of 4 types, DAY, HOUR, MINUTE. The unit is inferred\nbased on the cron schedule of a model. The minimum time delta between a sample set of dates\nis used to determine which unit a model's schedule is.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.core.model.meta.IntervalUnit.DAY", "modulename": "sqlmesh.core.model.meta", "qualname": "IntervalUnit.DAY", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;IntervalUnit.DAY: &#x27;day&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.meta.IntervalUnit.HOUR", "modulename": "sqlmesh.core.model.meta", "qualname": "IntervalUnit.HOUR", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;IntervalUnit.HOUR: &#x27;hour&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.meta.IntervalUnit.MINUTE", "modulename": "sqlmesh.core.model.meta", "qualname": "IntervalUnit.MINUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;IntervalUnit.MINUTE: &#x27;minute&#x27;&gt;"}, {"fullname": "sqlmesh.core.model.meta.ModelMeta", "modulename": "sqlmesh.core.model.meta", "qualname": "ModelMeta", "kind": "class", "doc": "<p>Metadata for models which can be defined in SQL.</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.model.meta.ModelMeta.column_descriptions", "modulename": "sqlmesh.core.model.meta", "qualname": "ModelMeta.column_descriptions", "kind": "variable", "doc": "<p>A dictionary of column names to annotation comments.</p>\n", "annotation": ": Dict[str, str]"}, {"fullname": "sqlmesh.core.model.meta.ModelMeta.interval_unit", "modulename": "sqlmesh.core.model.meta", "qualname": "ModelMeta.interval_unit", "kind": "function", "doc": "<p>Returns the IntervalUnit of the model</p>\n\n<p>The interval unit is used to determine the lag applied to start_date and end_date for model rendering and intervals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sample_size:</strong>  The number of samples to take from the cron to infer the unit.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The IntervalUnit enum.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">IntervalUnit</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.meta.ModelMeta.normalized_cron", "modulename": "sqlmesh.core.model.meta", "qualname": "ModelMeta.normalized_cron", "kind": "function", "doc": "<p>Returns the UTC normalized cron based on sampling heuristics.</p>\n\n<p>SQLMesh supports 3 interval units, daily, hourly, and minutes. If a job is scheduled\ndaily at 1PM, the actual intervals are shifted back to midnight UTC.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The cron string representing either daily, hourly, or minutes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.meta.ModelMeta.croniter", "modulename": "sqlmesh.core.model.meta", "qualname": "ModelMeta.croniter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">ModelMeta</span><span class=\"o\">.</span><span class=\"n\">croniter</span> <span class=\"n\">at</span> <span class=\"mh\">0x13c3ec940</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.meta.ModelMeta.cron_next", "modulename": "sqlmesh.core.model.meta", "qualname": "ModelMeta.cron_next", "kind": "function", "doc": "<p>Get the next timestamp given a time-like value and the model's cron.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  A variety of date formats.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The timestamp for the next run.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.meta.ModelMeta.cron_prev", "modulename": "sqlmesh.core.model.meta", "qualname": "ModelMeta.cron_prev", "kind": "function", "doc": "<p>Get the previous timestamp given a time-like value and the model's cron.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  A variety of date formats.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The timestamp for the previous run.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.meta.ModelMeta.cron_floor", "modulename": "sqlmesh.core.model.meta", "qualname": "ModelMeta.cron_floor", "kind": "function", "doc": "<p>Get the floor timestamp given a time-like value and the model's cron.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  A variety of date formats.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The timestamp floor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.seed", "modulename": "sqlmesh.core.model.seed", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.model.seed.Seed", "modulename": "sqlmesh.core.model.seed", "qualname": "Seed", "kind": "class", "doc": "<p>Represents content of a seed.</p>\n\n<p>Presently only CSV format is supported.</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.model.seed.Seed.read", "modulename": "sqlmesh.core.model.seed", "qualname": "Seed.read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.model.seed.create_seed", "modulename": "sqlmesh.core.model.seed", "qualname": "create_seed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"o\">.</span><span class=\"n\">Seed</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.notification_target", "modulename": "sqlmesh.core.notification_target", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.notification_target.NotificationStatus", "modulename": "sqlmesh.core.notification_target", "qualname": "NotificationStatus", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.core.notification_target.NotificationStatus.SUCCESS", "modulename": "sqlmesh.core.notification_target", "qualname": "NotificationStatus.SUCCESS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NotificationStatus.SUCCESS: &#x27;success&#x27;&gt;"}, {"fullname": "sqlmesh.core.notification_target.NotificationStatus.FAILURE", "modulename": "sqlmesh.core.notification_target", "qualname": "NotificationStatus.FAILURE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NotificationStatus.FAILURE: &#x27;failure&#x27;&gt;"}, {"fullname": "sqlmesh.core.notification_target.NotificationStatus.WARNING", "modulename": "sqlmesh.core.notification_target", "qualname": "NotificationStatus.WARNING", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NotificationStatus.WARNING: &#x27;warning&#x27;&gt;"}, {"fullname": "sqlmesh.core.notification_target.NotificationStatus.INFO", "modulename": "sqlmesh.core.notification_target", "qualname": "NotificationStatus.INFO", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NotificationStatus.INFO: &#x27;info&#x27;&gt;"}, {"fullname": "sqlmesh.core.notification_target.NotificationStatus.PROGRESS", "modulename": "sqlmesh.core.notification_target", "qualname": "NotificationStatus.PROGRESS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NotificationStatus.PROGRESS: &#x27;progress&#x27;&gt;"}, {"fullname": "sqlmesh.core.notification_target.BaseNotificationTarget", "modulename": "sqlmesh.core.notification_target", "qualname": "BaseNotificationTarget", "kind": "class", "doc": "<p>Base notification target model. Provides a command for sending notifications that is currently only used\nby the built-in scheduler. Other schedulers like Airflow use the configuration of the target itself\nto create the notification constructs appropriate for the scheduler.</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.notification_target.BaseNotificationTarget.send", "modulename": "sqlmesh.core.notification_target", "qualname": "BaseNotificationTarget.send", "kind": "function", "doc": "<p>Sends notification with the provided message. Currently only used by the built-in scheduler.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">notification_status</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">NotificationStatus</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.notification_target.ConsoleNotificationTarget", "modulename": "sqlmesh.core.notification_target", "qualname": "ConsoleNotificationTarget", "kind": "class", "doc": "<p>Example console notification target. Keeping this around for testing purposes.</p>\n", "bases": "BaseNotificationTarget"}, {"fullname": "sqlmesh.core.notification_target.ConsoleNotificationTarget.send", "modulename": "sqlmesh.core.notification_target", "qualname": "ConsoleNotificationTarget.send", "kind": "function", "doc": "<p>Sends notification with the provided message. Currently only used by the built-in scheduler.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">notification_status</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">NotificationStatus</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan", "modulename": "sqlmesh.core.plan", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.plan.definition", "modulename": "sqlmesh.core.plan.definition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.plan.definition.Plan", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan", "kind": "class", "doc": "<p>Plan is the main class to represent user choices on how they want to backfill and version their models.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context_diff:</strong>  The context diff that the plan is based on.</li>\n<li><strong>dag:</strong>  The dag object to determine relationships.</li>\n<li><strong>state_reader:</strong>  The state_reader to get metadata with.</li>\n<li><strong>start:</strong>  The start time to backfill data.</li>\n<li><strong>end:</strong>  The end time to backfill data.</li>\n<li><strong>apply:</strong>  The callback to apply the plan.</li>\n<li><strong>restate_models:</strong>  A list of models for which the data should be restated for the time range\nspecified in this plan. Note: models defined outside SQLMesh (external) won't be a part\nof the restatement.</li>\n<li><strong>no_gaps:</strong>   Whether to ensure that new snapshots for models that are already a\npart of the target environment have no data gaps when compared against previous\nsnapshots for same models.</li>\n<li><strong>skip_backfill:</strong>  Whether to skip the backfill step.</li>\n<li><strong>is_dev:</strong>  Whether this plan is for development purposes.</li>\n<li><strong>forward_only:</strong>  Whether the purpose of the plan is to make forward only changes.</li>\n<li><strong>environment_ttl:</strong>  The period of time that a development environment should exist before being deleted.</li>\n<li><strong>categorizer_config:</strong>  Auto categorization settings.</li>\n<li><strong>auto_categorization_enabled:</strong>  Whether to apply auto categorization.</li>\n</ul>\n"}, {"fullname": "sqlmesh.core.plan.definition.Plan.__init__", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">context_diff</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">context_diff</span><span class=\"o\">.</span><span class=\"n\">ContextDiff</span>,</span><span class=\"param\">\t<span class=\"n\">dag</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span>,</span><span class=\"param\">\t<span class=\"n\">state_reader</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_sync</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StateReader</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">apply</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Plan</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restate_models</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">no_gaps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">skip_backfill</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">forward_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">environment_ttl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">categorizer_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">categorizer</span><span class=\"o\">.</span><span class=\"n\">CategorizerConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auto_categorization_enabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "sqlmesh.core.plan.definition.Plan.categorized", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.categorized", "kind": "variable", "doc": "<p>Returns the already categorized snapshots.</p>\n", "annotation": ": List[sqlmesh.core.snapshot.definition.Snapshot]"}, {"fullname": "sqlmesh.core.plan.definition.Plan.uncategorized", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.uncategorized", "kind": "variable", "doc": "<p>Returns the uncategorized snapshots.</p>\n", "annotation": ": List[sqlmesh.core.snapshot.definition.Snapshot]"}, {"fullname": "sqlmesh.core.plan.definition.Plan.start", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.start", "kind": "variable", "doc": "<p>Returns the start of the plan or the earliest date of all snapshots.</p>\n", "annotation": ": Union[datetime.date, datetime.datetime, str, int, float]"}, {"fullname": "sqlmesh.core.plan.definition.Plan.set_start", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.set_start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan.definition.Plan.end", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.end", "kind": "variable", "doc": "<p>Returns the end of the plan or now.</p>\n", "annotation": ": Union[datetime.date, datetime.datetime, str, int, float]"}, {"fullname": "sqlmesh.core.plan.definition.Plan.is_start_and_end_allowed", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.is_start_and_end_allowed", "kind": "variable", "doc": "<p>Indicates whether this plan allows to set the start and end dates.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.plan.definition.Plan.missing_intervals", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.missing_intervals", "kind": "variable", "doc": "<p>Returns a list of missing intervals.</p>\n", "annotation": ": List[sqlmesh.core.plan.definition.MissingIntervals]"}, {"fullname": "sqlmesh.core.plan.definition.Plan.snapshots", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.snapshots", "kind": "variable", "doc": "<p>Gets all the snapshots in the plan/environment.</p>\n", "annotation": ": List[sqlmesh.core.snapshot.definition.Snapshot]"}, {"fullname": "sqlmesh.core.plan.definition.Plan.new_snapshots", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.new_snapshots", "kind": "variable", "doc": "<p>Gets only new snapshots in the plan/environment.</p>\n", "annotation": ": List[sqlmesh.core.snapshot.definition.Snapshot]"}, {"fullname": "sqlmesh.core.plan.definition.Plan.environment", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.environment", "kind": "variable", "doc": "<p>The environment of the plan.</p>\n", "annotation": ": sqlmesh.core.environment.Environment"}, {"fullname": "sqlmesh.core.plan.definition.Plan.is_new_snapshot", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.is_new_snapshot", "kind": "function", "doc": "<p>Returns True if the given snapshot is a new snapshot in this plan.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">snapshot</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan.definition.Plan.apply", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.apply", "kind": "function", "doc": "<p>Runs apply if an apply function was passed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan.definition.Plan.set_choice", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.set_choice", "kind": "function", "doc": "<p>Sets a snapshot version based on the user choice.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot:</strong>  The target snapshot.</li>\n<li><strong>choice:</strong>  The user decision on how to version the target snapshot and its children.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>,</span><span class=\"param\">\t<span class=\"n\">choice</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotChangeCategory</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan.definition.Plan.snapshot_change_category", "modulename": "sqlmesh.core.plan.definition", "qualname": "Plan.snapshot_change_category", "kind": "function", "doc": "<p>Determines the SnapshotChangeCategory for a modified snapshot using its available history.</p>\n\n<p>A snapshot may be modified (directly or indirectly) multiple times. Each time\nit is directly changed, the categorization is stored in its history. Look\nthrough the snapshot's history to find where it deviated from the previous\nsnapshot and then find the most conservative categorization recorded.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot:</strong>  The snapshot within this plan</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotChangeCategory</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan.definition.PlanStatus", "modulename": "sqlmesh.core.plan.definition", "qualname": "PlanStatus", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.core.plan.definition.PlanStatus.STARTED", "modulename": "sqlmesh.core.plan.definition", "qualname": "PlanStatus.STARTED", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;PlanStatus.STARTED: &#x27;started&#x27;&gt;"}, {"fullname": "sqlmesh.core.plan.definition.PlanStatus.FINISHED", "modulename": "sqlmesh.core.plan.definition", "qualname": "PlanStatus.FINISHED", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;PlanStatus.FINISHED: &#x27;finished&#x27;&gt;"}, {"fullname": "sqlmesh.core.plan.definition.PlanStatus.FAILED", "modulename": "sqlmesh.core.plan.definition", "qualname": "PlanStatus.FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;PlanStatus.FAILED: &#x27;failed&#x27;&gt;"}, {"fullname": "sqlmesh.core.plan.definition.MissingIntervals", "modulename": "sqlmesh.core.plan.definition", "qualname": "MissingIntervals", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.plan.definition.MissingIntervals.format_missing_range", "modulename": "sqlmesh.core.plan.definition", "qualname": "MissingIntervals.format_missing_range", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan.evaluator", "modulename": "sqlmesh.core.plan.evaluator", "kind": "module", "doc": "<h1 id=\"planevaluator\">PlanEvaluator</h1>\n\n<p>A plan evaluator is responsible for evaluating a plan when it is being applied.</p>\n\n<h1 id=\"evaluation-steps\">Evaluation steps</h1>\n\n<p>At a high level, when a plan is evaluated, SQLMesh will:</p>\n\n<ul>\n<li>Push new snapshots to the state sync.</li>\n<li>Create snapshot tables.</li>\n<li>Backfill data.</li>\n<li>Promote the snapshots.</li>\n</ul>\n\n<p>Refer to <code>sqlmesh.core.plan</code>.</p>\n"}, {"fullname": "sqlmesh.core.plan.evaluator.PlanEvaluator", "modulename": "sqlmesh.core.plan.evaluator", "qualname": "PlanEvaluator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "sqlmesh.core.plan.evaluator.PlanEvaluator.evaluate", "modulename": "sqlmesh.core.plan.evaluator", "qualname": "PlanEvaluator.evaluate", "kind": "function", "doc": "<p>Evaluates a plan by pushing snapshots and backfilling data.</p>\n\n<p>Given a plan, it pushes snapshots into the state and then kicks off\nthe backfill process for all affected snapshots. Once backfill is done,\nsnapshots that are part of the plan are promoted in the environment targeted\nby this plan.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>plan:</strong>  The plan to evaluate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Plan</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan.evaluator.BuiltInPlanEvaluator", "modulename": "sqlmesh.core.plan.evaluator", "qualname": "BuiltInPlanEvaluator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "PlanEvaluator"}, {"fullname": "sqlmesh.core.plan.evaluator.BuiltInPlanEvaluator.__init__", "modulename": "sqlmesh.core.plan.evaluator", "qualname": "BuiltInPlanEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">state_sync</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_sync</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StateSync</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">SnapshotEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">backfill_concurrent_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.core.plan.evaluator.BuiltInPlanEvaluator.evaluate", "modulename": "sqlmesh.core.plan.evaluator", "qualname": "BuiltInPlanEvaluator.evaluate", "kind": "function", "doc": "<p>Evaluates a plan by pushing snapshots and backfilling data.</p>\n\n<p>Given a plan, it pushes snapshots into the state and then kicks off\nthe backfill process for all affected snapshots. Once backfill is done,\nsnapshots that are part of the plan are promoted in the environment targeted\nby this plan.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>plan:</strong>  The plan to evaluate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Plan</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.plan.evaluator.AirflowPlanEvaluator", "modulename": "sqlmesh.core.plan.evaluator", "qualname": "AirflowPlanEvaluator", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "PlanEvaluator"}, {"fullname": "sqlmesh.core.plan.evaluator.AirflowPlanEvaluator.__init__", "modulename": "sqlmesh.core.plan.evaluator", "qualname": "AirflowPlanEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">airflow_client</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">AirflowClient</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">blocking</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dag_run_poll_interval_secs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">dag_creation_poll_interval_secs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">dag_creation_max_retry_attempts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">notification_targets</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">ConsoleNotificationTarget</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">integrations</span><span class=\"o\">.</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">GithubNotificationTarget</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">backfill_concurrent_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ddl_concurrent_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.core.plan.evaluator.AirflowPlanEvaluator.evaluate", "modulename": "sqlmesh.core.plan.evaluator", "qualname": "AirflowPlanEvaluator.evaluate", "kind": "function", "doc": "<p>Evaluates a plan by pushing snapshots and backfilling data.</p>\n\n<p>Given a plan, it pushes snapshots into the state and then kicks off\nthe backfill process for all affected snapshots. Once backfill is done,\nsnapshots that are part of the plan are promoted in the environment targeted\nby this plan.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>plan:</strong>  The plan to evaluate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Plan</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.renderer", "modulename": "sqlmesh.core.renderer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.renderer.ExpressionRenderer", "modulename": "sqlmesh.core.renderer", "qualname": "ExpressionRenderer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.renderer.ExpressionRenderer.__init__", "modulename": "sqlmesh.core.renderer", "qualname": "ExpressionRenderer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">macro_definitions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dialect</span><span class=\"o\">.</span><span class=\"n\">MacroDef</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">jinja_macro_registry</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">JinjaMacroRegistry</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">python_env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">only_latest</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqlmesh.core.renderer.ExpressionRenderer.render", "modulename": "sqlmesh.core.renderer", "qualname": "ExpressionRenderer.render", "kind": "function", "doc": "<p>Renders a expression, expanding macros with provided kwargs</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  The start datetime to render. Defaults to epoch start.</li>\n<li><strong>end:</strong>  The end datetime to render. Defaults to epoch start.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental models. Defaults to epoch start.</li>\n<li><strong>kwargs:</strong>  Additional kwargs to pass to the renderer.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The rendered expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.renderer.QueryRenderer", "modulename": "sqlmesh.core.renderer", "qualname": "QueryRenderer", "kind": "class", "doc": "<p></p>\n", "bases": "ExpressionRenderer"}, {"fullname": "sqlmesh.core.renderer.QueryRenderer.__init__", "modulename": "sqlmesh.core.renderer", "qualname": "QueryRenderer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">macro_definitions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dialect</span><span class=\"o\">.</span><span class=\"n\">MacroDef</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">jinja_macro_registry</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">JinjaMacroRegistry</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">python_env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_column</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">TimeColumn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">only_latest</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqlmesh.core.renderer.QueryRenderer.render", "modulename": "sqlmesh.core.renderer", "qualname": "QueryRenderer.render", "kind": "function", "doc": "<p>Renders a query, expanding macros with provided kwargs, and optionally expanding referenced models.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>query:</strong>  The query to render.</li>\n<li><strong>start:</strong>  The start datetime to render. Defaults to epoch start.</li>\n<li><strong>end:</strong>  The end datetime to render. Defaults to epoch start.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries. Defaults to epoch start.</li>\n<li><strong>add_incremental_filter:</strong>  Add an incremental filter to the query if the model is incremental.</li>\n<li><strong>snapshots:</strong>  All upstream snapshots (by model name) to use for expansion and mapping of physical locations.</li>\n<li><strong>expand:</strong>  Expand referenced models as subqueries. This is used to bypass backfills when running queries\nthat depend on materialized tables.  Model definitions are inlined and can thus be run end to\nend on the fly.</li>\n<li><strong>query_key:</strong>  A query key used to look up a rendered query in the cache.</li>\n<li><strong>is_dev:</strong>  Indicates whether the rendering happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n<li><strong>kwargs:</strong>  Additional kwargs to pass to the renderer.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The rendered expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">add_incremental_filter</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">expand</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Subqueryable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.renderer.QueryRenderer.contains_star_query", "modulename": "sqlmesh.core.renderer", "qualname": "QueryRenderer.contains_star_query", "kind": "variable", "doc": "<p>Returns True if the model's query contains a star projection.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.renderer.QueryRenderer.update_schema", "modulename": "sqlmesh.core.renderer", "qualname": "QueryRenderer.update_schema", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">MappingSchema</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.renderer.QueryRenderer.filter_time_column", "modulename": "sqlmesh.core.renderer", "qualname": "QueryRenderer.filter_time_column", "kind": "function", "doc": "<p>Filters a query on the time column to ensure no data leakage when running in incremental mode.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Select</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.scheduler", "modulename": "sqlmesh.core.scheduler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.scheduler.Scheduler", "modulename": "sqlmesh.core.scheduler", "qualname": "Scheduler", "kind": "class", "doc": "<p>Schedules and manages the evaluation of snapshots.</p>\n\n<p>The scheduler evaluates multiple snapshots with date intervals in the correct\ntopological order. It consults the state sync to understand what intervals for each\nsnapshot needs to be backfilled.</p>\n\n<p>The scheduler comes equipped with a simple ThreadPoolExecutor based evaluation engine.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  A collection of snapshots.</li>\n<li><strong>snapshot_evaluator:</strong>  The snapshot evaluator to execute queries.</li>\n<li><strong>state_sync:</strong>  The state sync to pull saved snapshots.</li>\n<li><strong>max_workers:</strong>  The maximum number of parallel queries to run.</li>\n<li><strong>console:</strong>  The rich instance used for printing scheduling information.</li>\n</ul>\n"}, {"fullname": "sqlmesh.core.scheduler.Scheduler.__init__", "modulename": "sqlmesh.core.scheduler", "qualname": "Scheduler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">SnapshotEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">state_sync</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_sync</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StateSync</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.core.scheduler.Scheduler.batches", "modulename": "sqlmesh.core.scheduler", "qualname": "Scheduler.batches", "kind": "function", "doc": "<p>Returns a list of snapshot batches to evaluate.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  The start of the run. Defaults to the min model start date.</li>\n<li><strong>end:</strong>  The end of the run. Defaults to now.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries.</li>\n<li><strong>is_dev:</strong>  Indicates whether the evaluation happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.scheduler.Scheduler.evaluate", "modulename": "sqlmesh.core.scheduler", "qualname": "Scheduler.evaluate", "kind": "function", "doc": "<p>Evaluate a snapshot and add the processed interval to the state sync.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot:</strong>  Snapshot to evaluate.</li>\n<li><strong>start:</strong>  The start datetime to render.</li>\n<li><strong>end:</strong>  The end datetime to render.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries.</li>\n<li><strong>is_dev:</strong>  Indicates whether the evaluation happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n<li><strong>kwargs:</strong>  Additional kwargs to pass to the renderer.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.scheduler.Scheduler.run", "modulename": "sqlmesh.core.scheduler", "qualname": "Scheduler.run", "kind": "function", "doc": "<p>Concurrently runs all snapshots in topological order.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  The start of the run. Defaults to the min model start date.</li>\n<li><strong>end:</strong>  The end of the run. Defaults to now.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries.</li>\n<li><strong>is_dev:</strong>  Indicates whether the evaluation happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if the execution was successful and False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.scheduler.compute_interval_params", "modulename": "sqlmesh.core.scheduler", "qualname": "compute_interval_params", "kind": "function", "doc": "<p>Find the optimal date interval paramaters based on what needs processing and maximal batch size.</p>\n\n<p>For each model name, find all dependencies and look for a stored snapshot from the metastore. If a snapshot is found,\ncalculate the missing intervals that need to be processed given the passed in start and end intervals.</p>\n\n<p>If a snapshot's model specifies a batch size, consecutive intervals are merged into batches of a size that is less than\nor equal to the configured one. If no batch size is specified, then it uses the intervals that correspond to the model's cron expression.\nFor example, if a model is supposed to run daily and has 70 days to backfill with a batch size set to 30, there would be 2 jobs\nwith 30 days and 1 job with 10.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target:</strong>  A set of target snapshots for which intervals should be computed.</li>\n<li><strong>snapshots:</strong>  A catalog of all available snapshots (including the target ones).</li>\n<li><strong>start:</strong>  Start of the interval.</li>\n<li><strong>end:</strong>  End of the interval.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dict containing all snapshots needing to be run with their associated interval params.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.scheduler.start_date", "modulename": "sqlmesh.core.scheduler", "qualname": "start_date", "kind": "function", "doc": "<p>Get the effective/inferred start date for a snapshot.</p>\n\n<p>Not all snapshots define a start date. In those cases, the model's start date\ncan be inferred from its parent's start date.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot:</strong>  snapshot to infer start date.</li>\n<li><strong>snapshots:</strong>  a catalog of available snapshots.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Start datetime object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snapshot</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">],</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.scheduler.earliest_start_date", "modulename": "sqlmesh.core.scheduler", "qualname": "earliest_start_date", "kind": "function", "doc": "<p>Get the earliest start date from a collection of snapshots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  Snapshots to find earliest start date.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The earliest start date or yesterday if none is found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.schema_diff", "modulename": "sqlmesh.core.schema_diff", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDeltaOp", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDeltaOp", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDeltaOp.ADD", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDeltaOp.ADD", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;SchemaDeltaOp.ADD: 1&gt;"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDeltaOp.DROP", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDeltaOp.DROP", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;SchemaDeltaOp.DROP: 2&gt;"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDeltaOp.ALTER_TYPE", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDeltaOp.ALTER_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;SchemaDeltaOp.ALTER_TYPE: 3&gt;"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDelta", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDelta", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDelta.add", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDelta.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">column_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">schema_diff</span><span class=\"o\">.</span><span class=\"n\">SchemaDelta</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDelta.drop", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDelta.drop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">column_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">schema_diff</span><span class=\"o\">.</span><span class=\"n\">SchemaDelta</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDelta.alter_type", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDelta.alter_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">column_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">schema_diff</span><span class=\"o\">.</span><span class=\"n\">SchemaDelta</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDiffCalculator", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDiffCalculator", "kind": "class", "doc": "<p>Calculates the difference between table schemas.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>engine_adapter:</strong>  The engine adapter.</li>\n<li><strong>is_type_transition_allowed:</strong>  The predicate which accepts the source type and the target type\nand returns True if the transition from source to target is allowed and False otherwise.\nDefault: no type transitions are allowed.</li>\n</ul>\n"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDiffCalculator.__init__", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDiffCalculator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">is_type_transition_allowed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.core.schema_diff.SchemaDiffCalculator.calculate", "modulename": "sqlmesh.core.schema_diff", "qualname": "SchemaDiffCalculator.calculate", "kind": "function", "doc": "<p>Calculates a list of schema deltas between the two tables, applying which in order to the first table\nbrings its schema in correspondence with the schema of the second table.</p>\n\n<p>Changes in positions of otherwise unchanged columns are currently ignored and are not reflected in the output.</p>\n\n<p>Additionally the implementation currently doesn't differentiate between regular columns and partition ones.\nIt's a responsibility of a caller to determine whether a returned operation is allowed on partition columns or not.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>apply_to_table:</strong>  The name of the table to which deltas will be applied.</li>\n<li><strong>schema_from_table:</strong>  The schema of this table will be used for comparison.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of deltas.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">apply_to_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">schema_from_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">schema_diff</span><span class=\"o\">.</span><span class=\"n\">SchemaDelta</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot", "modulename": "sqlmesh.core.snapshot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.snapshot.categorizer", "modulename": "sqlmesh.core.snapshot.categorizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.snapshot.categorizer.categorize_change", "modulename": "sqlmesh.core.snapshot.categorizer", "qualname": "categorize_change", "kind": "function", "doc": "<p>Attempts to automatically categorize a change between two snapshots.</p>\n\n<p>Presently the implementation only returns the NON_BREAKING category iff\na new projections have been added to one or more SELECT statement(s). In\nall other cases None is returned.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>new:</strong>  The new snapshot.</li>\n<li><strong>old:</strong>  The old snapshot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The change category or None if the category can't be determined automatically.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>,</span><span class=\"param\">\t<span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">categorizer</span><span class=\"o\">.</span><span class=\"n\">CategorizerConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotChangeCategory</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition", "modulename": "sqlmesh.core.snapshot.definition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotChangeCategory", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotChangeCategory", "kind": "class", "doc": "<p>Values are ordered by decreasing severity and that ordering is required.</p>\n\n<p>BREAKING: The change requires that snapshot modified and downstream dependencies be rebuilt\nNON_BREAKING: The change requires that only the snapshot modified be rebuilt\nNO_CHANGE: The change requires no rebuilding</p>\n", "bases": "enum.IntEnum"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotChangeCategory.BREAKING", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotChangeCategory.BREAKING", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;SnapshotChangeCategory.BREAKING: 1&gt;"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotChangeCategory.NON_BREAKING", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotChangeCategory.NON_BREAKING", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;SnapshotChangeCategory.NON_BREAKING: 2&gt;"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotChangeCategory.FORWARD_ONLY", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotChangeCategory.FORWARD_ONLY", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;SnapshotChangeCategory.FORWARD_ONLY: 3&gt;"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotFingerprint", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotFingerprint", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotFingerprint.to_version", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotFingerprint.to_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotFingerprint.to_identifier", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotFingerprint.to_identifier", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotId", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotId", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotId.snapshot_id", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotId.snapshot_id", "kind": "variable", "doc": "<p>Helper method to return self.</p>\n", "annotation": ": sqlmesh.core.snapshot.definition.SnapshotId"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotNameVersion", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotNameVersion", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotDataVersion", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotDataVersion", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotDataVersion.is_new_version", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotDataVersion.is_new_version", "kind": "variable", "doc": "<p>Returns whether or not this version is new and requires a backfill.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.snapshot.definition.QualifiedViewName", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "QualifiedViewName", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.snapshot.definition.QualifiedViewName.for_environment", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "QualifiedViewName.for_environment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.QualifiedViewName.schema_for_environment", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "QualifiedViewName.schema_for_environment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotInfoMixin", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotInfoMixin", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotInfoMixin.__init__", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotInfoMixin.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotInfoMixin.is_temporary_table", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotInfoMixin.is_temporary_table", "kind": "function", "doc": "<p>Provided whether the snapshot is used in a development mode or not, returns True\nif the snapshot targets a temporary table or a clone and False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotInfoMixin.previous_version", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotInfoMixin.previous_version", "kind": "variable", "doc": "<p>Helper method to get the previous data version.</p>\n", "annotation": ": Optional[sqlmesh.core.snapshot.definition.SnapshotDataVersion]"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotInfoMixin.all_versions", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotInfoMixin.all_versions", "kind": "variable", "doc": "<p>Returns previous versions with the current version trimmed to DATA_VERSION_LIMIT.</p>\n", "annotation": ": Tuple[sqlmesh.core.snapshot.definition.SnapshotDataVersion, ...]"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotInfoMixin.data_hash_matches", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotInfoMixin.data_hash_matches", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotInfoMixin</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotDataVersion</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotTableInfo", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotTableInfo", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel, SnapshotInfoMixin"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotTableInfo.table_name", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotTableInfo.table_name", "kind": "function", "doc": "<p>Full table name pointing to the materialized location of the snapshot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>is_dev:</strong>  Whether the table name will be used in development mode.</li>\n<li><strong>for_read:</strong>  Whether the table name will be used for reading by a different snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">for_read</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotTableInfo.table_info", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotTableInfo.table_info", "kind": "variable", "doc": "<p>Helper method to return self.</p>\n", "annotation": ": sqlmesh.core.snapshot.definition.SnapshotTableInfo"}, {"fullname": "sqlmesh.core.snapshot.definition.SnapshotTableInfo.is_new_version", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "SnapshotTableInfo.is_new_version", "kind": "variable", "doc": "<p>Returns whether or not this version is new and requires a backfill.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot", "kind": "class", "doc": "<p>A snapshot represents a model at a certain point in time.</p>\n\n<p>Snapshots are used to encapsulate everything needed to evaluate a model.\nThey are standalone objects that hold all state and dynamic content necessary\nto render a model's query including things like macros. Snapshots also store intervals\n(timestamp ranges for what data we've processed).</p>\n\n<p>Models can be dynamically rendered due to macros. Rendering a model to its full extent\nrequires storing variables and macro definitions. We store all of the macro definitions and\nglobal variable references in <code>python_env</code> in raw text to avoid pickling. The helper methods\nto achieve this are defined in utils.metaprogramming.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The snapshot name which is the same as the model name and should be unique per model.</li>\n<li><strong>fingerprint:</strong>  A unique hash of the model definition so that models can be reused across environments.</li>\n<li><strong>physical_schema:</strong>  The physical schema that the snapshot is stored in.</li>\n<li><strong>model:</strong>  Model object that the snapshot encapsulates.</li>\n<li><strong>parents:</strong>  The list of parent snapshots (upstream dependencies).</li>\n<li><strong>audits:</strong>  The list of audits used by the model.</li>\n<li><strong>intervals:</strong>  List of [start, end) intervals showing which time ranges a snapshot has data for.</li>\n<li><strong>created_ts:</strong>  Epoch millis timestamp when a snapshot was first created.</li>\n<li><strong>updated_ts:</strong>  Epoch millis timestamp when a snapshot was last updated.</li>\n<li><strong>ttl:</strong>  The time-to-live of a snapshot determines when it should be deleted after it's no longer referenced\nin any environment.</li>\n<li><strong>previous:</strong>  The snapshot data version that this snapshot was based on. If this snapshot is new, then previous will be None.</li>\n<li><strong>version:</strong>  User specified version for a snapshot that is used for physical storage.\nBy default, the version is the fingerprint, but not all changes to models require a backfill.\nIf a user passes a previous version, that will be used instead and no backfill will be required.</li>\n<li><strong>change_category:</strong>  User specified change category indicating which models require backfill from model changes made in this snapshot.</li>\n<li><strong>unpaused_ts:</strong>  The timestamp which indicates when this snapshot was unpaused. Unpaused means that\nthis snapshot is evaluated on a recurring basis. None indicates that this snapshot is paused.</li>\n</ul>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel, SnapshotInfoMixin"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.merge_snapshots", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.merge_snapshots", "kind": "function", "doc": "<p>Merge target snapshots with others so that each target snapshot has intervals from all other snapshots with the same version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>targets:</strong>  Iterable of snapshot-like objects</li>\n<li><strong>snapshots:</strong>  Dictionary of snapshot ids to snapshot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of target snapshots with merged intervals.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.from_model", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.from_model", "kind": "function", "doc": "<p>Creates a new snapshot for a model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model:</strong>  Model to snapshot.</li>\n<li><strong>physical_schema:</strong>  The schema of the snapshot which represents where it is stored.</li>\n<li><strong>models:</strong>  Dictionary of all models in the graph to make the fingerprint dependent on parent changes.\nIf no dictionary is passed in the fingerprint will not be dependent on a model's parents.</li>\n<li><strong>ttl:</strong>  A TTL to determine how long orphaned (snapshots that are not promoted anywhere) should live.</li>\n<li><strong>version:</strong>  The version that a snapshot is associated with. Usually set during the planning phase.</li>\n<li><strong>audits:</strong>  Available audits by name.</li>\n<li><strong>cache:</strong>  Cache of model name to fingerprints.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The newly created snapshot.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">physical_schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">models</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]</span>,</span><span class=\"param\">\t<span class=\"n\">ttl</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;in 1 week&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">audits</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">audit</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Audit</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotFingerprint</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.add_interval", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.add_interval", "kind": "function", "doc": "<p>Add a newly processed time interval to the snapshot.</p>\n\n<p>The actual stored intervals are [start_ts, end_ts) or start epoch timestamp inclusive and end epoch\ntimestamp exclusive. This allows merging of ranges to be easier.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  The start date/time of the interval (inclusive)</li>\n<li><strong>end:</strong>  The end date/time of the interval. If end is a date, then it is considered inclusive.\nIf it is a datetime object, then it is exclusive.</li>\n<li><strong>is_dev:</strong>  Indicates whether the given interval is being added while in development mode.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.remove_interval", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.remove_interval", "kind": "function", "doc": "<p>Remove an interval from the snapshot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  Start interval to remove.</li>\n<li><strong>end:</strong>  End interval to remove.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.merge_intervals", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.merge_intervals", "kind": "function", "doc": "<p>Inherits intervals from the target snapshot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The target snapshot to inherit intervals from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.missing_intervals", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.missing_intervals", "kind": "function", "doc": "<p>Find all missing intervals between [start, end].</p>\n\n<p>Although the inputs are inclusive, the returned stored intervals are\n[start_ts, end_ts) or start epoch timestamp inclusive and end epoch\ntimestamp exclusive.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  The start date/time of the interval (inclusive)</li>\n<li><strong>end:</strong>  The end date/time of the interval (inclusive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of all the missing intervals as epoch timestamps.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.set_version", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.set_version", "kind": "function", "doc": "<p>Set the version of this snapshot.</p>\n\n<p>If no version is passed, the fingerprint of the snapshot will be used.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>version:</strong>  Either a string or a TableInfo to use.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotDataVersion</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.set_unpaused_ts", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.set_unpaused_ts", "kind": "function", "doc": "<p>Sets the timestamp for when this snapshot was unpaused.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unpaused_dt:</strong>  The datetime object of when this snapshot was unpaused.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unpaused_dt</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.table_name", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.table_name", "kind": "function", "doc": "<p>Full table name pointing to the materialized location of the snapshot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>is_dev:</strong>  Whether the table name will be used in development mode.</li>\n<li><strong>for_read:</strong>  Whether the table name will be used for reading by a different snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">for_read</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.table_name_for_mapping", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.table_name_for_mapping", "kind": "function", "doc": "<p>Full table name used by a child snapshot for table mapping during evaluation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>is_dev:</strong>  Whether the table name will be used in development mode.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.version_get_or_generate", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.version_get_or_generate", "kind": "function", "doc": "<p>Helper method to get the version or generate it from the fingerprint.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.table_info", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.table_info", "kind": "variable", "doc": "<p>Helper method to get the SnapshotTableInfo from the Snapshot.</p>\n", "annotation": ": sqlmesh.core.snapshot.definition.SnapshotTableInfo"}, {"fullname": "sqlmesh.core.snapshot.definition.Snapshot.is_new_version", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "Snapshot.is_new_version", "kind": "variable", "doc": "<p>Returns whether or not this version is new and requires a backfill.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.snapshot.definition.table_name", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "table_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">physical_schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_temp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.fingerprint_from_model", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "fingerprint_from_model", "kind": "function", "doc": "<p>Helper function to generate a fingerprint based on a model's query and environment.</p>\n\n<p>This method tries to remove non meaningful differences to avoid ever changing fingerprints.\nThe fingerprint is made up of two parts split by an underscore -- query_metadata. The query hash is\ndetermined purely by the rendered query and the metadata by everything else.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model:</strong>  Model to fingerprint.</li>\n<li><strong>physical_schema:</strong>  The physical_schema of the snapshot which represents where it is stored.</li>\n<li><strong>models:</strong>  Dictionary of all models in the graph to make the fingerprint dependent on parent changes.\nIf no dictionary is passed in the fingerprint will not be dependent on a model's parents.</li>\n<li><strong>audits:</strong>  Available audits by name.</li>\n<li><strong>cache:</strong>  Cache of model name to fingerprints.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The fingerprint.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">models</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]</span>,</span><span class=\"param\">\t<span class=\"n\">physical_schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">audits</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">audit</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Audit</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotFingerprint</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotFingerprint</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.merge_intervals", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "merge_intervals", "kind": "function", "doc": "<p>Merge a list of intervals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>intervals:</strong>  A list of intervals to merge together.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new list of sorted and merged intervals.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">intervals</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.remove_interval", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "remove_interval", "kind": "function", "doc": "<p>Remove an interval from a list of intervals.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>intervals:</strong>  A list of exclusive intervals.</li>\n<li><strong>remove_start:</strong>  The inclusive start to remove.</li>\n<li><strong>remove_end:</strong>  The exclusive end to remove.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new list of intervals.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">intervals</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">remove_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">remove_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.definition.to_table_mapping", "modulename": "sqlmesh.core.snapshot.definition", "qualname": "to_table_mapping", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator", "modulename": "sqlmesh.core.snapshot.evaluator", "kind": "module", "doc": "<h1 id=\"snapshotevaluator\">SnapshotEvaluator</h1>\n\n<p>A snapshot evaluator is responsible for evaluating a snapshot given some runtime arguments, e.g. start\nand end timestamps.</p>\n\n<h1 id=\"evaluation\">Evaluation</h1>\n\n<p>Snapshot evaluation involves determining the queries necessary to evaluate a snapshot and using\n<code>sqlmesh.core.engine_adapter</code> to execute the queries. Schemas, tables, and views are created if\nthey don't exist and data is inserted when applicable.</p>\n\n<p>A snapshot evaluator also promotes and demotes snapshots to a given environment.</p>\n\n<h1 id=\"audits\">Audits</h1>\n\n<p>A snapshot evaluator can also run the audits for a snapshot's model. This is often done after a snapshot\nhas been evaluated to check for data quality issues.</p>\n\n<p>For more information about audits, see <code>sqlmesh.core.audit</code>.</p>\n"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator", "kind": "class", "doc": "<p>Evaluates a snapshot given runtime arguments through an arbitrary EngineAdapter.</p>\n\n<p>The SnapshotEvaluator contains the business logic to generically evaluate a snapshot.\nIt is responsible for delegating queries to the EngineAdapter. The SnapshotEvaluator\ndoes not directly communicate with the underlying execution engine.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>adapter:</strong>  The adapter that interfaces with the execution engine.</li>\n<li><strong>ddl_concurrent_task:</strong>  The number of concurrent tasks used for DDL\noperations (table / view creation, deletion, etc). Default: 1.</li>\n</ul>\n"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.__init__", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">ddl_concurrent_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.evaluate", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.evaluate", "kind": "function", "doc": "<p>Evaluate a snapshot, creating its schema and table if it doesn't exist and then inserting it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot:</strong>  Snapshot to evaluate.</li>\n<li><strong>start:</strong>  The start datetime to render.</li>\n<li><strong>end:</strong>  The end datetime to render.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries.</li>\n<li><strong>snapshots:</strong>  All upstream snapshots (by model name) to use for expansion and mapping of physical locations.</li>\n<li><strong>limit:</strong>  If limit is &gt; 0, the query will not be persisted but evaluated and returned as a dataframe.</li>\n<li><strong>is_dev:</strong>  Indicates whether the evaluation happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n<li><strong>kwargs:</strong>  Additional kwargs to pass to the renderer.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6036211024&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.promote", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.promote", "kind": "function", "doc": "<p>Promotes the given collection of snapshots in the target environment by replacing a corresponding\nview with a physical table associated with the given snapshot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_snapshots:</strong>  Snapshots to promote.</li>\n<li><strong>environment:</strong>  The target environment.</li>\n<li><strong>is_dev:</strong>  Indicates whether the promotion happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n<li><strong>on_complete:</strong>  a callback to call on each successfully promoted snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">on_complete</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.demote", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.demote", "kind": "function", "doc": "<p>Demotes the given collection of snapshots in the target environment by removing its view.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_snapshots:</strong>  Snapshots to demote.</li>\n<li><strong>environment:</strong>  The target environment.</li>\n<li><strong>on_complete:</strong>  a callback to call on each successfully demoted snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">on_complete</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.create", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.create", "kind": "function", "doc": "<p>Creates a physical snapshot schema and table for the given collection of snapshots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_snapshots:</strong>  Target snapshosts.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.migrate", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.migrate", "kind": "function", "doc": "<p>Alters a physical snapshot table to match its snapshot's schema for the given collection of snapshots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_snapshots:</strong>  Target snapshosts.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.cleanup", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.cleanup", "kind": "function", "doc": "<p>Cleans up the given snapshots by removing its table</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_snapshots:</strong>  Snapshots to cleanup.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.audit", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.audit", "kind": "function", "doc": "<p>Execute a snapshot's model's audit queries.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot:</strong>  Snapshot to evaluate.  start: The start datetime to audit. Defaults to epoch start.</li>\n<li><strong>snapshots:</strong>  All upstream snapshots (by model name) to use for expansion and mapping of physical locations.</li>\n<li><strong>start:</strong>  The start datetime to audit. Defaults to epoch start.</li>\n<li><strong>end:</strong>  The end datetime to audit. Defaults to epoch start.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries. Defaults to epoch start.</li>\n<li><strong>raise_exception:</strong>  Whether to raise an exception if the audit fails. Blocking rules determine if an\nAuditError is thrown or if we just warn with logger</li>\n<li><strong>is_dev:</strong>  Indicates whether the auditing happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n<li><strong>kwargs:</strong>  Additional kwargs to pass to the renderer.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raise_exception</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">audit</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">AuditResult</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.concurrent_context", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.concurrent_context", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.recycle", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.recycle", "kind": "function", "doc": "<p>Closes all open connections and releases all allocated resources associated with any thread\nexcept the calling one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.snapshot.evaluator.SnapshotEvaluator.close", "modulename": "sqlmesh.core.snapshot.evaluator", "qualname": "SnapshotEvaluator.close", "kind": "function", "doc": "<p>Closes all open connections and releases all allocated resources.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync", "modulename": "sqlmesh.core.state_sync", "kind": "module", "doc": "<h1 id=\"statesync\">StateSync</h1>\n\n<p>State sync is how SQLMesh keeps track of environments and their states, e.g. snapshots.</p>\n\n<h1 id=\"statereader\">StateReader</h1>\n\n<p>StateReader provides a subset of the functionalities of the StateSync class. As its name\nimplies, it only allows for read-only operations on snapshots and environment states.</p>\n\n<h1 id=\"engineadapterstatesync\">EngineAdapterStateSync</h1>\n\n<p>The provided <code>sqlmesh.core.state_sync.EngineAdapterStateSync</code> leverages an existing engine\nadapter to read and write state to the underlying data store.</p>\n"}, {"fullname": "sqlmesh.core.state_sync.base", "modulename": "sqlmesh.core.state_sync.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.state_sync.base.StateReader", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateReader", "kind": "class", "doc": "<p>Abstract base class for read-only operations on snapshot and environment state.</p>\n", "bases": "abc.ABC"}, {"fullname": "sqlmesh.core.state_sync.base.StateReader.get_snapshots", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateReader.get_snapshots", "kind": "function", "doc": "<p>Bulk fetch snapshots given the corresponding snapshot ids.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_ids:</strong>  Iterable of snapshot ids to get. If not provided all\navailable snapshots will be returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictionary of snapshot ids to snapshots for ones that could be found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateReader.get_snapshots_with_same_version", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateReader.get_snapshots_with_same_version", "kind": "function", "doc": "<p>Fetches all snapshots that share the same version as the snapshots.</p>\n\n<p>The output includes the snapshots with the specified version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  The collection of target name / version pairs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of Snapshot objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotNameVersion</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateReader.snapshots_exist", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateReader.snapshots_exist", "kind": "function", "doc": "<p>Checks if multiple snapshots exist in the state sync.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_ids:</strong>  Iterable of snapshot ids to bulk check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A set of all the existing snapshot ids.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateReader.get_environment", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateReader.get_environment", "kind": "function", "doc": "<p>Fetches the environment if it exists.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The environment</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The environment object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateReader.get_environments", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateReader.get_environments", "kind": "function", "doc": "<p>Fetches all environments.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of all environments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateReader.get_snapshots_by_models", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateReader.get_snapshots_by_models", "kind": "function", "doc": "<p>Get all snapshots by model name.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of snapshots.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateReader.missing_intervals", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateReader.missing_intervals", "kind": "function", "doc": "<p>Find missing intervals for an environment or a list of snapshots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env_or_snapshots:</strong>  The environment or snapshots to find missing intervals for.</li>\n<li><strong>start:</strong>  The start of the time range to look for.</li>\n<li><strong>end:</strong>  The end of the time range to look for.</li>\n<li><strong>latest:</strong>  The latest datetime to use for non-incremental queries.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictionary of SnapshotId to Intervals.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">env_or_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restatements</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync", "kind": "class", "doc": "<p>Abstract base class for snapshot and environment state management.</p>\n", "bases": "StateReader, abc.ABC"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.init_schema", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.init_schema", "kind": "function", "doc": "<p>Optional initialization of the sync.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.push_snapshots", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.push_snapshots", "kind": "function", "doc": "<p>Push snapshots into the state sync.</p>\n\n<p>This method only allows for pushing new snapshots. If existing snapshots are found,\nthis method should raise an error.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>SQLMeshError when existing snapshots are pushed.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  A list of snapshots to save in the state sync.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.delete_snapshots", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.delete_snapshots", "kind": "function", "doc": "<p>Delete snapshots from the state sync.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_ids:</strong>  A list of snapshot like objects to delete.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.delete_expired_snapshots", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.delete_expired_snapshots", "kind": "function", "doc": "<p>Removes expired snapshots.</p>\n\n<p>Expired snapshots are snapshots that have exceeded their time-to-live\nand are no longer in use within an environment.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of removed snapshots.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.add_interval", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.add_interval", "kind": "function", "doc": "<p>Add an interval to a snapshot and sync it to the store.</p>\n\n<p>Snapshots must be pushed before adding intervals to them.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_id:</strong>  The snapshot like object to add an interval to.</li>\n<li><strong>start:</strong>  The start of the interval to add.</li>\n<li><strong>end:</strong>  The end of the interval to add.</li>\n<li><strong>is_dev:</strong>  Indicates whether the given interval is being added while in\ndevelopment mode.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.remove_interval", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.remove_interval", "kind": "function", "doc": "<p>Remove an interval from a list of snapshots and sync it to the store.</p>\n\n<p>Because multiple snapshots can be pointing to the same version or physical table, this method\ncan also grab all snapshots tied to the passed in version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  The snapshot info like object to remove intervals from.</li>\n<li><strong>start:</strong>  The start of the interval to add.</li>\n<li><strong>end:</strong>  The end of the interval to add.</li>\n<li><strong>all_snapshots:</strong>  All snapshots can be passed in to skip fetching matching snapshot versions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">all_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.promote", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.promote", "kind": "function", "doc": "<p>Update the environment to reflect the current state.</p>\n\n<p>This method verifies that snapshots have been pushed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The environment to promote.</li>\n<li><strong>no_gaps:</strong>   Whether to ensure that new snapshots for models that are already a\npart of the target environment have no data gaps when compared against previous\nsnapshots for same models.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of (added snapshot table infos, removed snapshot table infos)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">no_gaps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.delete_expired_environments", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.delete_expired_environments", "kind": "function", "doc": "<p>Removes expired environments.</p>\n\n<p>Expired environments are environments that have exceeded their time-to-live value.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of removed environments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.base.StateSync.unpause_snapshots", "modulename": "sqlmesh.core.state_sync.base", "qualname": "StateSync.unpause_snapshots", "kind": "function", "doc": "<p>Unpauses target snapshots.</p>\n\n<p>Unpaused snapshots are scheduled for evaluation on a recurring basis.\nOnce unpaused a snapshot can't be paused again.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  Target snapshots.</li>\n<li><strong>unpaused_dt:</strong>  The datetime object which indicates when target snapshots\nwere unpaused.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">unpaused_dt</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common", "modulename": "sqlmesh.core.state_sync.common", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.state_sync.common.transactional", "modulename": "sqlmesh.core.state_sync.common", "qualname": "transactional", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transaction_type</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"n\">TransactionType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">TransactionType</span><span class=\"o\">.</span><span class=\"n\">DML</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DML&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Callable</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin", "kind": "class", "doc": "<p>Abstract base class for snapshot and environment state management.</p>\n", "bases": "sqlmesh.core.state_sync.base.StateSync"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.get_snapshots", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.get_snapshots", "kind": "function", "doc": "<p>Bulk fetch snapshots given the corresponding snapshot ids.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_ids:</strong>  Iterable of snapshot ids to get. If not provided all\navailable snapshots will be returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictionary of snapshot ids to snapshots for ones that could be found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.get_snapshots_with_same_version", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.get_snapshots_with_same_version", "kind": "function", "doc": "<p>Fetches all snapshots that share the same version as the snapshots.</p>\n\n<p>The output includes the snapshots with the specified version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  The collection of target name / version pairs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of Snapshot objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotNameVersion</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.get_environment", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.get_environment", "kind": "function", "doc": "<p>Fetches the environment if it exists.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The environment</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The environment object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.get_snapshots_by_models", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.get_snapshots_by_models", "kind": "function", "doc": "<p>Get all snapshots by model name.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of snapshots.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lock_for_update</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.promote", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.promote", "kind": "function", "doc": "<p>Update the environment to reflect the current state.</p>\n\n<p>This method verifies that snapshots have been pushed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The environment to promote.</li>\n<li><strong>no_gaps:</strong>   Whether to ensure that new snapshots for models that are already a\npart of the target environment have no data gaps when compared against previous\nsnapshots for same models.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of (added snapshot table infos, removed snapshot table infos)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">no_gaps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.delete_expired_snapshots", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.delete_expired_snapshots", "kind": "function", "doc": "<p>Removes expired snapshots.</p>\n\n<p>Expired snapshots are snapshots that have exceeded their time-to-live\nand are no longer in use within an environment.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of removed snapshots.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.add_interval", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.add_interval", "kind": "function", "doc": "<p>Add an interval to a snapshot and sync it to the store.</p>\n\n<p>Snapshots must be pushed before adding intervals to them.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_id:</strong>  The snapshot like object to add an interval to.</li>\n<li><strong>start:</strong>  The start of the interval to add.</li>\n<li><strong>end:</strong>  The end of the interval to add.</li>\n<li><strong>is_dev:</strong>  Indicates whether the given interval is being added while in\ndevelopment mode.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.remove_interval", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.remove_interval", "kind": "function", "doc": "<p>Remove an interval from a list of snapshots and sync it to the store.</p>\n\n<p>Because multiple snapshots can be pointing to the same version or physical table, this method\ncan also grab all snapshots tied to the passed in version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  The snapshot info like object to remove intervals from.</li>\n<li><strong>start:</strong>  The start of the interval to add.</li>\n<li><strong>end:</strong>  The end of the interval to add.</li>\n<li><strong>all_snapshots:</strong>  All snapshots can be passed in to skip fetching matching snapshot versions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">all_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.common.CommonStateSyncMixin.unpause_snapshots", "modulename": "sqlmesh.core.state_sync.common", "qualname": "CommonStateSyncMixin.unpause_snapshots", "kind": "function", "doc": "<p>Unpauses target snapshots.</p>\n\n<p>Unpaused snapshots are scheduled for evaluation on a recurring basis.\nOnce unpaused a snapshot can't be paused again.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  Target snapshots.</li>\n<li><strong>unpaused_dt:</strong>  The datetime object which indicates when target snapshots\nwere unpaused.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">unpaused_dt</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter", "modulename": "sqlmesh.core.state_sync.engine_adapter", "kind": "module", "doc": "<h1 id=\"statesync\">StateSync</h1>\n\n<p>State sync is how SQLMesh keeps track of environments and their states, e.g. snapshots.</p>\n\n<h1 id=\"statereader\">StateReader</h1>\n\n<p>StateReader provides a subset of the functionalities of the StateSync class. As its name\nimplies, it only allows for read-only operations on snapshots and environment states.</p>\n\n<h1 id=\"engineadapterstatesync\">EngineAdapterStateSync</h1>\n\n<p>The provided <code>sqlmesh.core.state_sync.EngineAdapterStateSync</code> leverages an existing engine\nadapter to read and write state to the underlying data store.</p>\n"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync", "kind": "class", "doc": "<p>Manages state of models and snapshot with an existing engine adapter.</p>\n\n<p>This state sync is convenient to use because it requires no additional setup.\nYou can reuse the same engine/warehouse that your data is stored in.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>engine_adapter:</strong>  The EngineAdapter to use to store and fetch snapshots.</li>\n<li><strong>schema:</strong>  The schema to store state metadata in.</li>\n</ul>\n", "bases": "sqlmesh.core.state_sync.common.CommonStateSyncMixin, sqlmesh.core.state_sync.base.StateSync"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync.__init__", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync.init_schema", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync.init_schema", "kind": "function", "doc": "<p>Creates the schema and table to store state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync.push_snapshots", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync.push_snapshots", "kind": "function", "doc": "<p>Pushes snapshots to the state store, merging them with existing ones.</p>\n\n<p>This method first finds all existing snapshots in the store and merges them with\nthe local snapshots. It will then delete all existing snapshots and then\ninsert all the local snapshots. This can be made safer with locks or merge/upsert.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_ids:</strong>  Iterable of snapshot ids to bulk push.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync.delete_expired_environments", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync.delete_expired_environments", "kind": "function", "doc": "<p>Removes expired environments.</p>\n\n<p>Expired environments are environments that have exceeded their time-to-live value.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of removed environments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync.delete_snapshots", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync.delete_snapshots", "kind": "function", "doc": "<p>Delete snapshots from the state sync.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_ids:</strong>  A list of snapshot like objects to delete.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync.snapshots_exist", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync.snapshots_exist", "kind": "function", "doc": "<p>Checks if multiple snapshots exist in the state sync.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_ids:</strong>  Iterable of snapshot ids to bulk check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A set of all the existing snapshot ids.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync.reset", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync.reset", "kind": "function", "doc": "<p>Resets the state store to the state when it was first initialized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.state_sync.engine_adapter.EngineAdapterStateSync.get_environments", "modulename": "sqlmesh.core.state_sync.engine_adapter", "qualname": "EngineAdapterStateSync.get_environments", "kind": "function", "doc": "<p>Fetches all environments.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of all environments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test", "modulename": "sqlmesh.core.test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.test.ModelTestMetadata", "modulename": "sqlmesh.core.test", "qualname": "ModelTestMetadata", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.test.TestError", "modulename": "sqlmesh.core.test", "qualname": "TestError", "kind": "class", "doc": "<p>Test error</p>\n", "bases": "sqlmesh.utils.errors.SQLMeshError"}, {"fullname": "sqlmesh.core.test.ModelTest", "modulename": "sqlmesh.core.test", "qualname": "ModelTest", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "sqlmesh.core.test.ModelTest.__init__", "modulename": "sqlmesh.core.test", "qualname": "ModelTest.__init__", "kind": "function", "doc": "<p>ModelTest encapsulates a unit test for a model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>body:</strong>  A dictionary that contains test metadata like inputs and outputs.</li>\n<li><strong>test_name:</strong>  The name of the test.</li>\n<li><strong>snapshots:</strong>  All snapshots to use for expansion and mapping of physical locations.</li>\n<li><strong>engine_adapter:</strong>  The engine adapter to use.</li>\n<li><strong>path:</strong>  An optional path to the test definition yaml file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">test_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "sqlmesh.core.test.ModelTest.setUp", "modulename": "sqlmesh.core.test", "qualname": "ModelTest.setUp", "kind": "function", "doc": "<p>Load all input tables</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.ModelTest.tearDown", "modulename": "sqlmesh.core.test", "qualname": "ModelTest.tearDown", "kind": "function", "doc": "<p>Drop all input tables</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.ModelTest.assert_equal", "modulename": "sqlmesh.core.test", "qualname": "ModelTest.assert_equal", "kind": "function", "doc": "<p>Compare two DataFrames</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">df1</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">df2</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.ModelTest.execute", "modulename": "sqlmesh.core.test", "qualname": "ModelTest.execute", "kind": "function", "doc": "<p>Execute the query with the engine adapter and return a DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">Expression</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.ModelTest.test_ctes", "modulename": "sqlmesh.core.test", "qualname": "ModelTest.test_ctes", "kind": "function", "doc": "<p>Run CTE queries and compare output to expected output</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.ModelTest.runTest", "modulename": "sqlmesh.core.test", "qualname": "ModelTest.runTest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.ModelTextTestResult", "modulename": "sqlmesh.core.test", "qualname": "ModelTextTestResult", "kind": "class", "doc": "<p>A test result class that can print formatted text results to a stream.</p>\n\n<p>Used by TextTestRunner.</p>\n", "bases": "unittest.runner.TextTestResult"}, {"fullname": "sqlmesh.core.test.ModelTextTestResult.addFailure", "modulename": "sqlmesh.core.test", "qualname": "ModelTextTestResult.addFailure", "kind": "function", "doc": "<p>Called when the test case test signals a failure.</p>\n\n<p>The traceback is suppressed because it is redundant and not useful.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>test:</strong>  The test case.</li>\n<li><strong>err:</strong>  A tuple of the form returned by sys.exc_info(), i.e., (type, value, traceback).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">test</span><span class=\"p\">:</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"o\">.</span><span class=\"n\">TestCase</span>,</span><span class=\"param\">\t<span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"ne\">BaseException</span><span class=\"p\">],</span> <span class=\"ne\">BaseException</span><span class=\"p\">,</span> <span class=\"n\">traceback</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.load_model_test_file", "modulename": "sqlmesh.core.test", "qualname": "load_model_test_file", "kind": "function", "doc": "<p>Load a single model test file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path:</strong>  The path to the test file</li>\n</ul>\n\n<p>returns:\n    A list of ModelTestMetadata named tuples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">ModelTestMetadata</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.discover_model_tests", "modulename": "sqlmesh.core.test", "qualname": "discover_model_tests", "kind": "function", "doc": "<p>Discover model tests.</p>\n\n<p>Model tests are defined in YAML files and contain the inputs and outputs used to test model queries.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path:</strong>  A path to search for tests.</li>\n<li><strong>ignore_patterns:</strong>  An optional list of patterns to ignore.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of ModelTestMetadata named tuples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_patterns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">ModelTestMetadata</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.filter_tests_by_patterns", "modulename": "sqlmesh.core.test", "qualname": "filter_tests_by_patterns", "kind": "function", "doc": "<p>Filter out tests whose filename or name does not match a pattern.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tests:</strong>  A list of ModelTestMetadata named tuples to match.</li>\n<li><strong>patterns:</strong>  A list of patterns to match against.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of ModelTestMetadata named tuples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tests</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">ModelTestMetadata</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">patterns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">ModelTestMetadata</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.run_tests", "modulename": "sqlmesh.core.test", "qualname": "run_tests", "kind": "function", "doc": "<p>Create a test suite of ModelTest objects and run it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_test_metadata:</strong>  A list of ModelTestMetadata named tuples.</li>\n<li><strong>snapshots:</strong>  All snapshots to use for expansion and mapping of physical locations.</li>\n<li><strong>engine_adapter:</strong>  The engine adapter to use.</li>\n<li><strong>patterns:</strong>  A list of patterns to match against.</li>\n<li><strong>verbosity:</strong>  The verbosity level.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_test_metadata</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">ModelTestMetadata</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">verbosity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">TestResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.get_all_model_tests", "modulename": "sqlmesh.core.test", "qualname": "get_all_model_tests", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">patterns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_patterns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">ModelTestMetadata</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.run_all_model_tests", "modulename": "sqlmesh.core.test", "qualname": "run_all_model_tests", "kind": "function", "doc": "<p>Discover and run all model tests found in path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path:</strong>  A path to search for tests.</li>\n<li><strong>snapshots:</strong>  All snapshots to use for expansion and mapping of physical locations.</li>\n<li><strong>engine_adapter:</strong>  The engine adapter to use.</li>\n<li><strong>verbosity:</strong>  The verbosity level.</li>\n<li><strong>patterns:</strong>  A list of patterns to match against.</li>\n<li><strong>ignore_patterns:</strong>  An optional list of patterns to ignore.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">verbosity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">patterns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_patterns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">TestResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.test.run_model_tests", "modulename": "sqlmesh.core.test", "qualname": "run_model_tests", "kind": "function", "doc": "<p>Load and run tests.</p>\n\n<p>Args\n    tests: A list of tests to run, e.g. [tests/test_orders.yaml::test_single_order]\n    snapshots: All snapshots to use for expansion and mapping of physical locations.\n    engine_adapter: The engine adapter to use.\n    patterns: A list of patterns to match against.\n    verbosity: The verbosity level.\n    ignore_patterns: An optional list of patterns to ignore.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tests</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">verbosity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">patterns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_patterns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">TestResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.core.user", "modulename": "sqlmesh.core.user", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.core.user.UserRole", "modulename": "sqlmesh.core.user", "qualname": "UserRole", "kind": "class", "doc": "<p>A role to associate the user with</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.core.user.UserRole.GATEKEEPER", "modulename": "sqlmesh.core.user", "qualname": "UserRole.GATEKEEPER", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;UserRole.GATEKEEPER: &#x27;gatekeeper&#x27;&gt;"}, {"fullname": "sqlmesh.core.user.UserRole.BOT", "modulename": "sqlmesh.core.user", "qualname": "UserRole.BOT", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;UserRole.BOT: &#x27;bot&#x27;&gt;"}, {"fullname": "sqlmesh.core.user.User", "modulename": "sqlmesh.core.user", "qualname": "User", "kind": "class", "doc": "<p>SQLMesh user information that can be used for notifications</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.core.user.User.username", "modulename": "sqlmesh.core.user", "qualname": "User.username", "kind": "variable", "doc": "<p>The name to refer to the user</p>\n", "annotation": ": str"}, {"fullname": "sqlmesh.core.user.User.github_username", "modulename": "sqlmesh.core.user", "qualname": "User.github_username", "kind": "variable", "doc": "<p>The github login username</p>\n", "annotation": ": Optional[str]"}, {"fullname": "sqlmesh.core.user.User.slack_username", "modulename": "sqlmesh.core.user", "qualname": "User.slack_username", "kind": "variable", "doc": "<p>The slack username</p>\n", "annotation": ": Optional[str]"}, {"fullname": "sqlmesh.core.user.User.email", "modulename": "sqlmesh.core.user", "qualname": "User.email", "kind": "variable", "doc": "<p>The email for the user (full address)</p>\n", "annotation": ": Optional[str]"}, {"fullname": "sqlmesh.core.user.User.roles", "modulename": "sqlmesh.core.user", "qualname": "User.roles", "kind": "variable", "doc": "<p>List of roles to associate with the user</p>\n", "annotation": ": List[sqlmesh.core.user.UserRole]"}, {"fullname": "sqlmesh.core.user.User.is_gatekeeper", "modulename": "sqlmesh.core.user", "qualname": "User.is_gatekeeper", "kind": "variable", "doc": "<p>Indicates if this is a gatekeeper for PR approvals.\nTODO: Users should be able to define this on a \"per-project\" level but that requires adding the concept of\n\"projects\" to SQLMesh so making this a global config for now</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.core.user.User.is_bot", "modulename": "sqlmesh.core.user", "qualname": "User.is_bot", "kind": "variable", "doc": "<p>Indicates if this is a CI/CD bot account. There should only be one of these per project</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.dbt", "modulename": "sqlmesh.dbt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.adapter", "modulename": "sqlmesh.dbt.adapter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.get_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.get_relation", "kind": "function", "doc": "<p>Returns a single relation that matches the provided path.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.list_relations", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.list_relations", "kind": "function", "doc": "<p>Gets all relations in a given schema and optionally database.</p>\n\n<p>TODO: Add caching functionality to avoid repeat visits to DB</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.list_relations_without_caching", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.list_relations_without_caching", "kind": "function", "doc": "<p>Using the engine adapter, gets all the relations that match the given schema grain relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.get_columns_in_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.get_columns_in_relation", "kind": "function", "doc": "<p>Returns the columns for a given table grained relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.get_missing_columns", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.get_missing_columns", "kind": "function", "doc": "<p>Returns the columns in from_relation missing from to_relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">from_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span>,</span><span class=\"param\">\t<span class=\"n\">to_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.create_schema", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.create_schema", "kind": "function", "doc": "<p>Creates a schema in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.drop_schema", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.drop_schema", "kind": "function", "doc": "<p>Drops a schema in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.drop_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.drop_relation", "kind": "function", "doc": "<p>Drops a relation (table) in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.execute", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.execute", "kind": "function", "doc": "<p>Executes the given SQL statement and returns the results as an agate table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auto_begin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fetch</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">contracts</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">AdapterResponse</span><span class=\"p\">,</span> <span class=\"n\">agate</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.quote", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.quote", "kind": "function", "doc": "<p>Returns a quoted identifeir.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.BaseAdapter.dispatch", "modulename": "sqlmesh.dbt.adapter", "qualname": "BaseAdapter.dispatch", "kind": "function", "doc": "<p>Returns a dialect-specific version of a macro with the given name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "BaseAdapter"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.get_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.get_relation", "kind": "function", "doc": "<p>Returns a single relation that matches the provided path.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.list_relations", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.list_relations", "kind": "function", "doc": "<p>Gets all relations in a given schema and optionally database.</p>\n\n<p>TODO: Add caching functionality to avoid repeat visits to DB</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.list_relations_without_caching", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.list_relations_without_caching", "kind": "function", "doc": "<p>Using the engine adapter, gets all the relations that match the given schema grain relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.get_columns_in_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.get_columns_in_relation", "kind": "function", "doc": "<p>Returns the columns for a given table grained relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.get_missing_columns", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.get_missing_columns", "kind": "function", "doc": "<p>Returns the columns in from_relation missing from to_relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">from_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span>,</span><span class=\"param\">\t<span class=\"n\">to_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.create_schema", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.create_schema", "kind": "function", "doc": "<p>Creates a schema in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.drop_schema", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.drop_schema", "kind": "function", "doc": "<p>Drops a schema in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.drop_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.drop_relation", "kind": "function", "doc": "<p>Drops a relation (table) in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.execute", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.execute", "kind": "function", "doc": "<p>Executes the given SQL statement and returns the results as an agate table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auto_begin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fetch</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">contracts</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">AdapterResponse</span><span class=\"p\">,</span> <span class=\"n\">agate</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.ParsetimeAdapter.quote", "modulename": "sqlmesh.dbt.adapter", "qualname": "ParsetimeAdapter.quote", "kind": "function", "doc": "<p>Returns a quoted identifeir.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "BaseAdapter"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.__init__", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span>,</span><span class=\"param\">\t<span class=\"n\">jinja_macros</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">JinjaMacroRegistry</span>,</span><span class=\"param\">\t<span class=\"n\">jinja_globals</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.get_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.get_relation", "kind": "function", "doc": "<p>Returns a single relation that matches the provided path.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.list_relations", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.list_relations", "kind": "function", "doc": "<p>Gets all relations in a given schema and optionally database.</p>\n\n<p>TODO: Add caching functionality to avoid repeat visits to DB</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.list_relations_without_caching", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.list_relations_without_caching", "kind": "function", "doc": "<p>Using the engine adapter, gets all the relations that match the given schema grain relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">schema_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.get_columns_in_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.get_columns_in_relation", "kind": "function", "doc": "<p>Returns the columns for a given table grained relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.get_missing_columns", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.get_missing_columns", "kind": "function", "doc": "<p>Returns the columns in from_relation missing from to_relation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">from_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span>,</span><span class=\"param\">\t<span class=\"n\">to_relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.create_schema", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.create_schema", "kind": "function", "doc": "<p>Creates a schema in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.drop_schema", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.drop_schema", "kind": "function", "doc": "<p>Drops a schema in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.drop_relation", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.drop_relation", "kind": "function", "doc": "<p>Drops a relation (table) in the target database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">BaseRelation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.execute", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.execute", "kind": "function", "doc": "<p>Executes the given SQL statement and returns the results as an agate table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">auto_begin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fetch</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">contracts</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">AdapterResponse</span><span class=\"p\">,</span> <span class=\"n\">agate</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.adapter.RuntimeAdapter.quote", "modulename": "sqlmesh.dbt.adapter", "qualname": "RuntimeAdapter.quote", "kind": "function", "doc": "<p>Returns a quoted identifeir.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.basemodel", "modulename": "sqlmesh.dbt.basemodel", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.basemodel.Dependencies", "modulename": "sqlmesh.dbt.basemodel", "qualname": "Dependencies", "kind": "class", "doc": "<p>DBT dependencies for a model, macro, etc.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>macros:</strong>  The references to macros</li>\n<li><strong>sources:</strong>  The \"source_name.table_name\" for source tables used</li>\n<li><strong>refs:</strong>  The table_name for models used</li>\n<li><strong>variables:</strong>  The names of variables used, mapped to a flag that indicates whether their\ndefinition is optional or not.</li>\n</ul>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.dbt.basemodel.Dependencies.union", "modulename": "sqlmesh.dbt.basemodel", "qualname": "Dependencies.union", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">basemodel</span><span class=\"o\">.</span><span class=\"n\">Dependencies</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">basemodel</span><span class=\"o\">.</span><span class=\"n\">Dependencies</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.basemodel.Materialization", "modulename": "sqlmesh.dbt.basemodel", "qualname": "Materialization", "kind": "class", "doc": "<p>DBT model materializations</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.dbt.basemodel.Materialization.TABLE", "modulename": "sqlmesh.dbt.basemodel", "qualname": "Materialization.TABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Materialization.TABLE: &#x27;table&#x27;&gt;"}, {"fullname": "sqlmesh.dbt.basemodel.Materialization.VIEW", "modulename": "sqlmesh.dbt.basemodel", "qualname": "Materialization.VIEW", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Materialization.VIEW: &#x27;view&#x27;&gt;"}, {"fullname": "sqlmesh.dbt.basemodel.Materialization.INCREMENTAL", "modulename": "sqlmesh.dbt.basemodel", "qualname": "Materialization.INCREMENTAL", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Materialization.INCREMENTAL: &#x27;incremental&#x27;&gt;"}, {"fullname": "sqlmesh.dbt.basemodel.Materialization.EPHEMERAL", "modulename": "sqlmesh.dbt.basemodel", "qualname": "Materialization.EPHEMERAL", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Materialization.EPHEMERAL: &#x27;ephemeral&#x27;&gt;"}, {"fullname": "sqlmesh.dbt.basemodel.BaseModelConfig", "modulename": "sqlmesh.dbt.basemodel", "qualname": "BaseModelConfig", "kind": "class", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>owner:</strong>  The owner of the model.</li>\n<li><strong>stamp:</strong>  An optional arbitrary string sequence used to create new model versions without making\nchanges to any of the functional components of the definition.</li>\n<li><strong>storage_format:</strong>  The storage format used to store the physical table, only applicable in certain engines.\n(eg. 'parquet')</li>\n<li><strong>path:</strong>  The file path of the model</li>\n<li><strong>target_schema:</strong>  The schema for the profile target</li>\n<li><strong>database:</strong>  Database the model is stored in</li>\n<li><strong>schema:</strong>  Custom schema name added to the model schema name</li>\n<li><strong>alias:</strong>  Relation identifier for this model instead of the filename</li>\n<li><strong>pre-hook:</strong>  List of SQL statements to run before the model is built</li>\n<li><strong>post-hook:</strong>  List of SQL statements to run after the model is built</li>\n<li><strong>full_refresh:</strong>  Forces the model to always do a full refresh or never do a full refresh</li>\n<li><strong>grants:</strong>  Set or revoke permissions to the database object for this model</li>\n<li><strong>columns:</strong>  Column information for the model</li>\n</ul>\n", "bases": "sqlmesh.dbt.common.GeneralConfig"}, {"fullname": "sqlmesh.dbt.basemodel.BaseModelConfig.table_schema", "modulename": "sqlmesh.dbt.basemodel", "qualname": "BaseModelConfig.table_schema", "kind": "variable", "doc": "<p>Get the full schema name</p>\n", "annotation": ": str"}, {"fullname": "sqlmesh.dbt.basemodel.BaseModelConfig.table_name", "modulename": "sqlmesh.dbt.basemodel", "qualname": "BaseModelConfig.table_name", "kind": "variable", "doc": "<p>Get the table name</p>\n", "annotation": ": str"}, {"fullname": "sqlmesh.dbt.basemodel.BaseModelConfig.model_name", "modulename": "sqlmesh.dbt.basemodel", "qualname": "BaseModelConfig.model_name", "kind": "variable", "doc": "<p>Get the sqlmesh model name</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The sqlmesh model name</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqlmesh.dbt.basemodel.BaseModelConfig.sqlmesh_model_kwargs", "modulename": "sqlmesh.dbt.basemodel", "qualname": "BaseModelConfig.sqlmesh_model_kwargs", "kind": "function", "doc": "<p>Get common sqlmesh model parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.basemodel.BaseModelConfig.render_config", "modulename": "sqlmesh.dbt.basemodel", "qualname": "BaseModelConfig.render_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">BMC</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">BMC</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.basemodel.BaseModelConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.basemodel", "qualname": "BaseModelConfig.to_sqlmesh", "kind": "function", "doc": "<p>Convert DBT model into sqlmesh Model</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.basemodel.ModelSqlRenderer", "modulename": "sqlmesh.dbt.basemodel", "qualname": "ModelSqlRenderer", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "typing.Generic[~BMC]"}, {"fullname": "sqlmesh.dbt.basemodel.ModelSqlRenderer.__init__", "modulename": "sqlmesh.dbt.basemodel", "qualname": "ModelSqlRenderer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">BMC</span></span>)</span>"}, {"fullname": "sqlmesh.dbt.basemodel.ModelSqlRenderer.render", "modulename": "sqlmesh.dbt.basemodel", "qualname": "ModelSqlRenderer.render", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.basemodel.ModelSqlRenderer.TrackingAdapter", "modulename": "sqlmesh.dbt.basemodel", "qualname": "ModelSqlRenderer.TrackingAdapter", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "sqlmesh.dbt.adapter.ParsetimeAdapter"}, {"fullname": "sqlmesh.dbt.basemodel.ModelSqlRenderer.TrackingAdapter.__init__", "modulename": "sqlmesh.dbt.basemodel", "qualname": "ModelSqlRenderer.TrackingAdapter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outer_self</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">basemodel</span><span class=\"o\">.</span><span class=\"n\">ModelSqlRenderer</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqlmesh.dbt.basemodel.ModelSqlRenderer.TrackingAdapter.dispatch", "modulename": "sqlmesh.dbt.basemodel", "qualname": "ModelSqlRenderer.TrackingAdapter.dispatch", "kind": "function", "doc": "<p>Returns a dialect-specific version of a macro with the given name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin", "modulename": "sqlmesh.dbt.builtin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.builtin.Exceptions", "modulename": "sqlmesh.dbt.builtin", "qualname": "Exceptions", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.builtin.Exceptions.__init__", "modulename": "sqlmesh.dbt.builtin", "qualname": "Exceptions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.dbt.builtin.Exceptions.raise_compiler_error", "modulename": "sqlmesh.dbt.builtin", "qualname": "Exceptions.raise_compiler_error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.Exceptions.warn", "modulename": "sqlmesh.dbt.builtin", "qualname": "Exceptions.warn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.Api", "modulename": "sqlmesh.dbt.builtin", "qualname": "Api", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.builtin.Api.__init__", "modulename": "sqlmesh.dbt.builtin", "qualname": "Api.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.dbt.builtin.Flags", "modulename": "sqlmesh.dbt.builtin", "qualname": "Flags", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.builtin.Flags.__init__", "modulename": "sqlmesh.dbt.builtin", "qualname": "Flags.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.dbt.builtin.Modules", "modulename": "sqlmesh.dbt.builtin", "qualname": "Modules", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.builtin.Modules.__init__", "modulename": "sqlmesh.dbt.builtin", "qualname": "Modules.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.dbt.builtin.SQLExecution", "modulename": "sqlmesh.dbt.builtin", "qualname": "SQLExecution", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.builtin.SQLExecution.__init__", "modulename": "sqlmesh.dbt.builtin", "qualname": "SQLExecution.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adapter</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">RuntimeAdapter</span></span>)</span>"}, {"fullname": "sqlmesh.dbt.builtin.SQLExecution.store_result", "modulename": "sqlmesh.dbt.builtin", "qualname": "SQLExecution.store_result", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">agate_table</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agate</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.SQLExecution.load_result", "modulename": "sqlmesh.dbt.builtin", "qualname": "SQLExecution.load_result", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AttributeDict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.SQLExecution.run_query", "modulename": "sqlmesh.dbt.builtin", "qualname": "SQLExecution.run_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">agate</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.SQLExecution.statement", "modulename": "sqlmesh.dbt.builtin", "qualname": "SQLExecution.statement", "kind": "function", "doc": "<p>Executes the SQL that is defined within the context of the caller. Therefore caller really isn't optional\nbut we make it optional and at the end because we need to match the signature of the jinja2 macro.</p>\n\n<p>Name is the name that we store the results to which can be retrieved with <code>load_result</code>. If name is not\nprovided then the SQL is executed but the results are not stored.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fetch_result</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auto_begin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;sql&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">caller</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">Macro</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.env_var", "modulename": "sqlmesh.dbt.builtin", "qualname": "env_var", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.is_incremental", "modulename": "sqlmesh.dbt.builtin", "qualname": "is_incremental", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.log", "modulename": "sqlmesh.dbt.builtin", "qualname": "log", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.no_log", "modulename": "sqlmesh.dbt.builtin", "qualname": "no_log", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.config", "modulename": "sqlmesh.dbt.builtin", "qualname": "config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.generate_var", "modulename": "sqlmesh.dbt.builtin", "qualname": "generate_var", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.generate_ref", "modulename": "sqlmesh.dbt.builtin", "qualname": "generate_ref", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">refs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.generate_source", "modulename": "sqlmesh.dbt.builtin", "qualname": "generate_source", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sources</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.quote_policy", "modulename": "sqlmesh.dbt.builtin", "qualname": "quote_policy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">contracts</span><span class=\"o\">.</span><span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">Policy</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.return_val", "modulename": "sqlmesh.dbt.builtin", "qualname": "return_val", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.to_set", "modulename": "sqlmesh.dbt.builtin", "qualname": "to_set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.to_json", "modulename": "sqlmesh.dbt.builtin", "qualname": "to_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.from_json", "modulename": "sqlmesh.dbt.builtin", "qualname": "from_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.to_yaml", "modulename": "sqlmesh.dbt.builtin", "qualname": "to_yaml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.from_yaml", "modulename": "sqlmesh.dbt.builtin", "qualname": "from_yaml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.do_zip", "modulename": "sqlmesh.dbt.builtin", "qualname": "do_zip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.as_bool", "modulename": "sqlmesh.dbt.builtin", "qualname": "as_bool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.as_number", "modulename": "sqlmesh.dbt.builtin", "qualname": "as_number", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.create_builtin_globals", "modulename": "sqlmesh.dbt.builtin", "qualname": "create_builtin_globals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">jinja_macros</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">JinjaMacroRegistry</span>,</span><span class=\"param\">\t<span class=\"n\">jinja_globals</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.builtin.create_builtin_filters", "modulename": "sqlmesh.dbt.builtin", "qualname": "create_builtin_filters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.column", "modulename": "sqlmesh.dbt.column", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.column.yaml_to_columns", "modulename": "sqlmesh.dbt.column", "qualname": "yaml_to_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">yaml</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">ColumnConfig</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">ColumnConfig</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">ColumnConfig</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.column.column_types_to_sqlmesh", "modulename": "sqlmesh.dbt.column", "qualname": "column_types_to_sqlmesh", "kind": "function", "doc": "<p>Get the sqlmesh column types</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dict of column name to exp.DataType</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">ColumnConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlglot</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.column.column_descriptions_to_sqlmesh", "modulename": "sqlmesh.dbt.column", "qualname": "column_descriptions_to_sqlmesh", "kind": "function", "doc": "<p>Get the sqlmesh column types</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dict of column name to description</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">ColumnConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.column.ColumnConfig", "modulename": "sqlmesh.dbt.column", "qualname": "ColumnConfig", "kind": "class", "doc": "<p>Column configuration for a DBT project</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  Name of the column</li>\n<li><strong>data_type:</strong>  The column's data type</li>\n<li><strong>description:</strong>  User defined description of the column</li>\n<li><strong>meta:</strong>  Meta data associated with the column</li>\n<li><strong>quote:</strong>  Boolean flag to use quoting for the column name</li>\n<li><strong>tests:</strong>  Tests associated with this column</li>\n<li><strong>tags:</strong>  Tags associated with this column</li>\n</ul>\n", "bases": "sqlmesh.dbt.common.GeneralConfig"}, {"fullname": "sqlmesh.dbt.common", "modulename": "sqlmesh.dbt.common", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.common.load_yaml", "modulename": "sqlmesh.dbt.common", "qualname": "load_yaml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">OrderedDict</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.DbtContext", "modulename": "sqlmesh.dbt.common", "qualname": "DbtContext", "kind": "class", "doc": "<p>Context for DBT environment</p>\n"}, {"fullname": "sqlmesh.dbt.common.DbtContext.__init__", "modulename": "sqlmesh.dbt.common", "qualname": "DbtContext.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">project_root</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">target_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">project_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">profile_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">project_schema</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jinja_macros</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">JinjaMacroRegistry</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">engine_adapter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine_adapter</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">EngineAdapter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_variables</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">_models</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">ModelConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">_seeds</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"o\">.</span><span class=\"n\">SeedConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">_sources</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">SourceConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">_refs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">_target</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">TargetConfig</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_jinja_environment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.dbt.common.DbtContext.add_variables", "modulename": "sqlmesh.dbt.common", "qualname": "DbtContext.add_variables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.DbtContext.add_models", "modulename": "sqlmesh.dbt.common", "qualname": "DbtContext.add_models", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">models</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">ModelConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.DbtContext.add_seeds", "modulename": "sqlmesh.dbt.common", "qualname": "DbtContext.add_seeds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seeds</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"o\">.</span><span class=\"n\">SeedConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.DbtContext.add_sources", "modulename": "sqlmesh.dbt.common", "qualname": "DbtContext.add_sources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sources</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">SourceConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.DbtContext.render", "modulename": "sqlmesh.dbt.common", "qualname": "DbtContext.render", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.DbtContext.copy", "modulename": "sqlmesh.dbt.common", "qualname": "DbtContext.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.SqlStr", "modulename": "sqlmesh.dbt.common", "qualname": "SqlStr", "kind": "class", "doc": "<p>str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str</p>\n\n<p>Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.</p>\n", "bases": "builtins.str"}, {"fullname": "sqlmesh.dbt.common.SqlStr.__init__", "modulename": "sqlmesh.dbt.common", "qualname": "SqlStr.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.dbt.common.DbtConfig", "modulename": "sqlmesh.dbt.common", "qualname": "DbtConfig", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.dbt.common.DbtConfig.Config", "modulename": "sqlmesh.dbt.common", "qualname": "DbtConfig.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.common.DbtConfig.Config.__init__", "modulename": "sqlmesh.dbt.common", "qualname": "DbtConfig.Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.dbt.common.GeneralConfig", "modulename": "sqlmesh.dbt.common", "qualname": "GeneralConfig", "kind": "class", "doc": "<p>General DBT configuration properties for models, sources, seeds, columns, etc.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>description:</strong>  Description of element</li>\n<li><strong>tests:</strong>  Tests for the element</li>\n<li><strong>enabled:</strong>  When false, the element is ignored</li>\n<li><strong>docs:</strong>  Documentation specific configuration</li>\n<li><strong>perist_docs:</strong>  Persist resource descriptions as column and/or relation comments in the database</li>\n<li><strong>tags:</strong>  List of tags that can be used for element grouping</li>\n<li><strong>meta:</strong>  Dictionary of metadata for the element</li>\n</ul>\n", "bases": "DbtConfig, sqlmesh.core.config.base.BaseConfig"}, {"fullname": "sqlmesh.dbt.common.GeneralConfig.replace", "modulename": "sqlmesh.dbt.common", "qualname": "GeneralConfig.replace", "kind": "function", "doc": "<p>Replace the contents of this instance with the passed in instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The instance to apply to this instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.GeneralConfig.render_config", "modulename": "sqlmesh.dbt.common", "qualname": "GeneralConfig.render_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">T</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.common.parse_meta", "modulename": "sqlmesh.dbt.common", "qualname": "parse_meta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.loader", "modulename": "sqlmesh.dbt.loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.loader.sqlmesh_config", "modulename": "sqlmesh.dbt.loader", "qualname": "sqlmesh_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">project_root</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">Config</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.loader.DbtLoader", "modulename": "sqlmesh.dbt.loader", "qualname": "DbtLoader", "kind": "class", "doc": "<p>Abstract base class to load macros and models for a context</p>\n", "bases": "sqlmesh.core.loader.Loader"}, {"fullname": "sqlmesh.dbt.model", "modulename": "sqlmesh.dbt.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.model.collection_to_str", "modulename": "sqlmesh.dbt.model", "qualname": "collection_to_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">collection</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.model.ModelConfig", "modulename": "sqlmesh.dbt.model", "qualname": "ModelConfig", "kind": "class", "doc": "<p>ModelConfig contains all config parameters available to DBT models</p>\n\n<p>See <a href=\"https://docs.getdbt.com/reference/configs-and-properties\">https://docs.getdbt.com/reference/configs-and-properties</a> for\na more detailed description of each config parameter under the\nGeneral propreties, General configs, and For models sections.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql:</strong>  The model sql</li>\n<li><strong>time_column:</strong>  The name of the time column</li>\n<li><strong>partitioned_by:</strong>  List of columns to partition by. time_column will automatically be\nincluded, if specified.</li>\n<li><strong>cron:</strong>  A cron string specifying how often the model should be refreshed, leveraging the\n<a href=\"https://github.com/kiorky/croniter\">croniter</a> library.</li>\n<li><strong>dialect:</strong>  The SQL dialect that the model's query is written in. By default,\nthis is assumed to be the dialect of the context.</li>\n<li><strong>batch_size:</strong>  The maximum number of intervals that can be run per backfill job. If this is None,\nthen backfilling this model will do all of history in one job. If this is set, a model's backfill\nwill be chunked such that each individual job will only contain jobs with max <code>batch_size</code> intervals.</li>\n<li><strong>start:</strong>  The earliest date that the model will be backfilled for</li>\n<li><strong>cluster_by:</strong>  Field(s) to use for clustering in data warehouses that support clustering</li>\n<li><strong>incremental_strategy:</strong>  Strategy used to build the incremental model</li>\n<li><strong>materialized:</strong>  How the model will be materialized in the database</li>\n<li><strong>sql_header:</strong>  SQL statement to inject above create table/view as</li>\n<li><strong>unique_key:</strong>  List of columns that define row uniqueness for the model</li>\n</ul>\n", "bases": "sqlmesh.dbt.basemodel.BaseModelConfig"}, {"fullname": "sqlmesh.dbt.model.ModelConfig.model_kind", "modulename": "sqlmesh.dbt.model", "qualname": "ModelConfig.model_kind", "kind": "function", "doc": "<p>Get the sqlmesh ModelKind</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The sqlmesh ModelKind</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">TargetConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">ModelKind</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.model.ModelConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.model", "qualname": "ModelConfig.to_sqlmesh", "kind": "function", "doc": "<p>Converts the dbt model into a SQLMesh model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.package", "modulename": "sqlmesh.dbt.package", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.package.ProjectConfig", "modulename": "sqlmesh.dbt.package", "qualname": "ProjectConfig", "kind": "class", "doc": "<p>Class to contain configuration from dbt_project.yml</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.dbt.package.Package", "modulename": "sqlmesh.dbt.package", "qualname": "Package", "kind": "class", "doc": "<p>Class to contain package configuration</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.dbt.package.PackageLoader", "modulename": "sqlmesh.dbt.package", "qualname": "PackageLoader", "kind": "class", "doc": "<p>Loader for DBT packages</p>\n"}, {"fullname": "sqlmesh.dbt.package.PackageLoader.__init__", "modulename": "sqlmesh.dbt.package", "qualname": "PackageLoader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span>,</span><span class=\"param\">\t<span class=\"n\">overrides</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">package</span><span class=\"o\">.</span><span class=\"n\">ProjectConfig</span></span>)</span>"}, {"fullname": "sqlmesh.dbt.package.PackageLoader.load", "modulename": "sqlmesh.dbt.package", "qualname": "PackageLoader.load", "kind": "function", "doc": "<p>Loads the specified package.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Package containing the configuration found within this package</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">package</span><span class=\"o\">.</span><span class=\"n\">Package</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.profile", "modulename": "sqlmesh.dbt.profile", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.profile.Profile", "modulename": "sqlmesh.dbt.profile", "qualname": "Profile", "kind": "class", "doc": "<p>A class to read DBT profiles and obtain the project's target data warehouse configuration</p>\n"}, {"fullname": "sqlmesh.dbt.profile.Profile.__init__", "modulename": "sqlmesh.dbt.profile", "qualname": "Profile.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path:</strong>  Path to the profile file</li>\n<li><strong>targets:</strong>  Dict of targets defined for the project</li>\n<li><strong>default_target:</strong>  Name of the default target for the proejct</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">TargetConfig</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">default_target</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "sqlmesh.dbt.profile.Profile.load", "modulename": "sqlmesh.dbt.profile", "qualname": "Profile.load", "kind": "function", "doc": "<p>Loads the profile for the specified project</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  DBT context for this profile</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The Profile for the specified project</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">Profile</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.profile.Profile.to_sqlmesh", "modulename": "sqlmesh.dbt.profile", "qualname": "Profile.to_sqlmesh", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DuckDBConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">SnowflakeConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSQLConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSparkSessionConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">BigQueryConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RedshiftConnectionConfig</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.project", "modulename": "sqlmesh.dbt.project", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.project.Project", "modulename": "sqlmesh.dbt.project", "qualname": "Project", "kind": "class", "doc": "<p>Configuration for a DBT project</p>\n"}, {"fullname": "sqlmesh.dbt.project.Project.__init__", "modulename": "sqlmesh.dbt.project", "qualname": "Project.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  DBT context for the project</li>\n<li><strong>profile:</strong>  The profile associated with the project</li>\n<li><strong>packages:</strong>  The packages in this project. The project should be included\nwith the project name as the key</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span>,</span><span class=\"param\">\t<span class=\"n\">profile</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">Profile</span>,</span><span class=\"param\">\t<span class=\"n\">packages</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">package</span><span class=\"o\">.</span><span class=\"n\">Package</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "sqlmesh.dbt.project.Project.load", "modulename": "sqlmesh.dbt.project", "qualname": "Project.load", "kind": "function", "doc": "<p>Loads the configuration for the specified DBT project</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  DBT context for this project</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Project instance for the specified DBT project</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">Project</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.seed", "modulename": "sqlmesh.dbt.seed", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.seed.SeedConfig", "modulename": "sqlmesh.dbt.seed", "qualname": "SeedConfig", "kind": "class", "doc": "<p>seedConfig contains all config parameters available to DBT seeds</p>\n\n<p>See <a href=\"https://docs.getdbt.com/reference/configs-and-properties\">https://docs.getdbt.com/reference/configs-and-properties</a> for\na more detailed description of each config parameter under the\nGeneral propreties, General configs, and For seeds sections.</p>\n", "bases": "sqlmesh.dbt.basemodel.BaseModelConfig"}, {"fullname": "sqlmesh.dbt.seed.SeedConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.seed", "qualname": "SeedConfig.to_sqlmesh", "kind": "function", "doc": "<p>Converts the dbt seed into a SQLMesh model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">DbtContext</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SqlModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SeedModel</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PythonModel</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;source_type&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.source", "modulename": "sqlmesh.dbt.source", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.source.SourceConfig", "modulename": "sqlmesh.dbt.source", "qualname": "SourceConfig", "kind": "class", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config_name:</strong>  The schema.table_name names declared in source config</li>\n<li><strong>name:</strong>  The name of the source or table</li>\n<li><strong>database:</strong>  Name of the database where the table is stored. By default, the project's target database is used.</li>\n<li><strong>schema:</strong>  The scehma name as stored in the database. If not specified, the source name is used.</li>\n<li><strong>identifier:</strong>  The table name as stored in the database. If not specified, the source table name is used</li>\n<li><strong>loader:</strong>  Describes the tool that loads the source into the warehouse</li>\n<li><strong>overrides:</strong>  Override a source defined in the specified package</li>\n<li><strong>freshness:</strong>  Dictionary specifying maximum time, since the most recent record, to consider the source fresh</li>\n<li><strong>loaded_at_field:</strong>  Column name or expression that returns a timestamp indicating freshness</li>\n<li><strong>quoting:</strong>  Dictionary of what to quote (database, schema, identifier) when resolving the source() method</li>\n<li><strong>external:</strong>  Dictionary of metadata properties specific to sources that point to external tables</li>\n<li><strong>columns:</strong>  Columns within the source</li>\n</ul>\n", "bases": "sqlmesh.dbt.common.GeneralConfig"}, {"fullname": "sqlmesh.dbt.target", "modulename": "sqlmesh.dbt.target", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.target.TargetConfig", "modulename": "sqlmesh.dbt.target", "qualname": "TargetConfig", "kind": "class", "doc": "<p>Configuration for DBT profile target</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The name of this target</li>\n<li><strong>type:</strong>  The type of the data warehouse</li>\n<li><strong>schema_:</strong>  The target schema for this project</li>\n<li><strong>threads:</strong>  The number of threads to run on</li>\n</ul>\n", "bases": "abc.ABC, sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.dbt.target.TargetConfig.load", "modulename": "sqlmesh.dbt.target", "qualname": "TargetConfig.load", "kind": "function", "doc": "<p>Loads the configuration from the yaml provided for a profile target</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  The yaml for the project's target output</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The configuration of the provided profile target</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">dbt</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">TargetConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.TargetConfig.default_incremental_strategy", "modulename": "sqlmesh.dbt.target", "qualname": "TargetConfig.default_incremental_strategy", "kind": "function", "doc": "<p>The default incremental strategy for the db</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByUniqueKeyKind</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByTimeRangeKind</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.TargetConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.target", "qualname": "TargetConfig.to_sqlmesh", "kind": "function", "doc": "<p>Converts target config to SQLMesh connection config</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DuckDBConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">SnowflakeConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSQLConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSparkSessionConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">BigQueryConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RedshiftConnectionConfig</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.TargetConfig.target_jinja", "modulename": "sqlmesh.dbt.target", "qualname": "TargetConfig.target_jinja", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">profile_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AttributeDict</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.DuckDbConfig", "modulename": "sqlmesh.dbt.target", "qualname": "DuckDbConfig", "kind": "class", "doc": "<p>Connection config for DuckDb target</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path:</strong>  Location of the database file. If not specified, an in memory database is used.</li>\n</ul>\n", "bases": "TargetConfig"}, {"fullname": "sqlmesh.dbt.target.DuckDbConfig.default_incremental_strategy", "modulename": "sqlmesh.dbt.target", "qualname": "DuckDbConfig.default_incremental_strategy", "kind": "function", "doc": "<p>The default incremental strategy for the db</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByUniqueKeyKind</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByTimeRangeKind</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.DuckDbConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.target", "qualname": "DuckDbConfig.to_sqlmesh", "kind": "function", "doc": "<p>Converts target config to SQLMesh connection config</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DuckDBConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">SnowflakeConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSQLConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSparkSessionConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">BigQueryConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RedshiftConnectionConfig</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.SnowflakeConfig", "modulename": "sqlmesh.dbt.target", "qualname": "SnowflakeConfig", "kind": "class", "doc": "<p>Project connection and operational configuration for the Snowflake target</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>account:</strong>  Snowflake account</li>\n<li><strong>warehouse:</strong>  Name of the warehouse</li>\n<li><strong>database:</strong>  Name of the database</li>\n<li><strong>user:</strong>  Name of the user</li>\n<li><strong>password:</strong>  User's password</li>\n<li><strong>role:</strong>  Role of the user</li>\n<li><strong>client_session_keep_alive:</strong>  A boolean flag to extend the duration of the Snowflake session beyond 4 hours</li>\n<li><strong>query_tag:</strong>  tag for the query in Snowflake</li>\n<li><strong>connect_retries:</strong>  Number of times to retry if the Snowflake connector encounters an error</li>\n<li><strong>connect_timeout:</strong>  Number of seconds to wait between failed attempts</li>\n<li><strong>retry_on_database_errors:</strong>  A boolean flag to retry if a Snowflake connector Database error is encountered</li>\n<li><strong>retry_all:</strong>  A boolean flag to retry on all Snowflake connector errors</li>\n</ul>\n", "bases": "TargetConfig"}, {"fullname": "sqlmesh.dbt.target.SnowflakeConfig.default_incremental_strategy", "modulename": "sqlmesh.dbt.target", "qualname": "SnowflakeConfig.default_incremental_strategy", "kind": "function", "doc": "<p>The default incremental strategy for the db</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByUniqueKeyKind</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByTimeRangeKind</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.SnowflakeConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.target", "qualname": "SnowflakeConfig.to_sqlmesh", "kind": "function", "doc": "<p>Converts target config to SQLMesh connection config</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DuckDBConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">SnowflakeConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSQLConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSparkSessionConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">BigQueryConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RedshiftConnectionConfig</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.PostgresConfig", "modulename": "sqlmesh.dbt.target", "qualname": "PostgresConfig", "kind": "class", "doc": "<p>Project connection and operational configuration for the Postgres target</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host:</strong>  The Postgres host to connect to</li>\n<li><strong>user:</strong>  Name of the user</li>\n<li><strong>password:</strong>  User's password</li>\n<li><strong>port:</strong>  The port to connect to</li>\n<li><strong>dbname:</strong>  Name of the database</li>\n<li><strong>keepalives_idle:</strong>  Seconds between TCP keepalive packets</li>\n<li><strong>connect_timeout:</strong>  Number of seconds to wait between failed attempts</li>\n<li><strong>retries:</strong>  Number of times to retry if the Postgres connector encounters an error</li>\n<li><strong>search_path:</strong>  Overrides the default search path</li>\n<li><strong>role:</strong>  Role of the user</li>\n<li><strong>sslmode:</strong>  SSL Mode used to connect to the database</li>\n</ul>\n", "bases": "TargetConfig"}, {"fullname": "sqlmesh.dbt.target.PostgresConfig.default_incremental_strategy", "modulename": "sqlmesh.dbt.target", "qualname": "PostgresConfig.default_incremental_strategy", "kind": "function", "doc": "<p>The default incremental strategy for the db</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByUniqueKeyKind</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByTimeRangeKind</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.PostgresConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.target", "qualname": "PostgresConfig.to_sqlmesh", "kind": "function", "doc": "<p>Converts target config to SQLMesh connection config</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DuckDBConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">SnowflakeConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSQLConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSparkSessionConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">BigQueryConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RedshiftConnectionConfig</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.RedshiftConfig", "modulename": "sqlmesh.dbt.target", "qualname": "RedshiftConfig", "kind": "class", "doc": "<p>Project connection and operational configuration for the Redshift target</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host:</strong>  The Redshift host to connect to</li>\n<li><strong>user:</strong>  Name of the user</li>\n<li><strong>password:</strong>  User's password</li>\n<li><strong>port:</strong>  The port to connect to</li>\n<li><strong>dbname:</strong>  Name of the database</li>\n<li><strong>keepalives_idle:</strong>  Seconds between TCP keepalive packets</li>\n<li><strong>connect_timeout:</strong>  Number of seconds to wait between failed attempts</li>\n<li><strong>ra3_node:</strong>  Enables cross-database sources</li>\n<li><strong>search_path:</strong>  Overrides the default search path</li>\n<li><strong>sslmode:</strong>  SSL Mode used to connect to the database</li>\n</ul>\n", "bases": "TargetConfig"}, {"fullname": "sqlmesh.dbt.target.RedshiftConfig.default_incremental_strategy", "modulename": "sqlmesh.dbt.target", "qualname": "RedshiftConfig.default_incremental_strategy", "kind": "function", "doc": "<p>The default incremental strategy for the db</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByUniqueKeyKind</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByTimeRangeKind</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.RedshiftConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.target", "qualname": "RedshiftConfig.to_sqlmesh", "kind": "function", "doc": "<p>Converts target config to SQLMesh connection config</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DuckDBConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">SnowflakeConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSQLConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSparkSessionConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">BigQueryConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RedshiftConnectionConfig</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.DatabricksConfig", "modulename": "sqlmesh.dbt.target", "qualname": "DatabricksConfig", "kind": "class", "doc": "<p>Project connection and operational configuration for the Databricks target</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>catalog:</strong>  Catalog name to use for Unity Catalog</li>\n<li><strong>host:</strong>  The Databricks host to connect to</li>\n<li><strong>http_path:</strong>  The Databricks compute resources URL</li>\n<li><strong>token:</strong>  Personal access token</li>\n</ul>\n", "bases": "TargetConfig"}, {"fullname": "sqlmesh.dbt.target.DatabricksConfig.default_incremental_strategy", "modulename": "sqlmesh.dbt.target", "qualname": "DatabricksConfig.default_incremental_strategy", "kind": "function", "doc": "<p>The default incremental strategy for the db</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByUniqueKeyKind</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">IncrementalByTimeRangeKind</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.target.DatabricksConfig.to_sqlmesh", "modulename": "sqlmesh.dbt.target", "qualname": "DatabricksConfig.to_sqlmesh", "kind": "function", "doc": "<p>Converts target config to SQLMesh connection config</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DuckDBConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">SnowflakeConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSQLConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksSparkSessionConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DatabricksConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">BigQueryConnectionConfig</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RedshiftConnectionConfig</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.dbt.util", "modulename": "sqlmesh.dbt.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.dbt.util.pandas_to_agate", "modulename": "sqlmesh.dbt.util", "qualname": "pandas_to_agate", "kind": "function", "doc": "<p>Converts a Pandas DataFrame to an Agate Table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">agate</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines", "modulename": "sqlmesh.engines", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.commands", "modulename": "sqlmesh.engines.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.commands.CommandType", "modulename": "sqlmesh.engines.commands", "qualname": "CommandType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.engines.commands.CommandType.EVALUATE", "modulename": "sqlmesh.engines.commands", "qualname": "CommandType.EVALUATE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CommandType.EVALUATE: &#x27;evaluate&#x27;&gt;"}, {"fullname": "sqlmesh.engines.commands.CommandType.PROMOTE", "modulename": "sqlmesh.engines.commands", "qualname": "CommandType.PROMOTE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CommandType.PROMOTE: &#x27;promote&#x27;&gt;"}, {"fullname": "sqlmesh.engines.commands.CommandType.DEMOTE", "modulename": "sqlmesh.engines.commands", "qualname": "CommandType.DEMOTE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CommandType.DEMOTE: &#x27;demote&#x27;&gt;"}, {"fullname": "sqlmesh.engines.commands.CommandType.CLEANUP", "modulename": "sqlmesh.engines.commands", "qualname": "CommandType.CLEANUP", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CommandType.CLEANUP: &#x27;cleanup&#x27;&gt;"}, {"fullname": "sqlmesh.engines.commands.CommandType.CREATE_TABLES", "modulename": "sqlmesh.engines.commands", "qualname": "CommandType.CREATE_TABLES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CommandType.CREATE_TABLES: &#x27;create_tables&#x27;&gt;"}, {"fullname": "sqlmesh.engines.commands.CommandType.MIGRATE_TABLES", "modulename": "sqlmesh.engines.commands", "qualname": "CommandType.MIGRATE_TABLES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;CommandType.MIGRATE_TABLES: &#x27;migrate_tables&#x27;&gt;"}, {"fullname": "sqlmesh.engines.commands.EvaluateCommandPayload", "modulename": "sqlmesh.engines.commands", "qualname": "EvaluateCommandPayload", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.engines.commands.PromoteCommandPayload", "modulename": "sqlmesh.engines.commands", "qualname": "PromoteCommandPayload", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.engines.commands.DemoteCommandPayload", "modulename": "sqlmesh.engines.commands", "qualname": "DemoteCommandPayload", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.engines.commands.CleanupCommandPayload", "modulename": "sqlmesh.engines.commands", "qualname": "CleanupCommandPayload", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.engines.commands.CreateTablesCommandPayload", "modulename": "sqlmesh.engines.commands", "qualname": "CreateTablesCommandPayload", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.engines.commands.MigrateTablesCommandPayload", "modulename": "sqlmesh.engines.commands", "qualname": "MigrateTablesCommandPayload", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.engines.commands.evaluate", "modulename": "sqlmesh.engines.commands", "qualname": "evaluate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">SnapshotEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">command_payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">EvaluateCommandPayload</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.commands.promote", "modulename": "sqlmesh.engines.commands", "qualname": "promote", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">SnapshotEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">command_payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">PromoteCommandPayload</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.commands.demote", "modulename": "sqlmesh.engines.commands", "qualname": "demote", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">SnapshotEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">command_payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">DemoteCommandPayload</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.commands.cleanup", "modulename": "sqlmesh.engines.commands", "qualname": "cleanup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">SnapshotEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">command_payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">CleanupCommandPayload</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.commands.create_tables", "modulename": "sqlmesh.engines.commands", "qualname": "create_tables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">SnapshotEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">command_payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">CreateTablesCommandPayload</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.commands.migrate_tables", "modulename": "sqlmesh.engines.commands", "qualname": "migrate_tables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">evaluator</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">SnapshotEvaluator</span>,</span><span class=\"param\">\t<span class=\"n\">command_payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">MigrateTablesCommandPayload</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark", "modulename": "sqlmesh.engines.spark", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.spark.app", "modulename": "sqlmesh.engines.spark.app", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.spark.app.get_or_create_spark_session", "modulename": "sqlmesh.engines.spark.app", "qualname": "get_or_create_spark_session", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">SparkSession</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.app.main", "modulename": "sqlmesh.engines.spark.app", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">command_type</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">CommandType</span>,</span><span class=\"param\">\t<span class=\"n\">ddl_concurrent_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">payload_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api", "modulename": "sqlmesh.engines.spark.db_api", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.spark.db_api.errors", "modulename": "sqlmesh.engines.spark.db_api.errors", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.spark.db_api.errors.SparkDbApiError", "modulename": "sqlmesh.engines.spark.db_api.errors", "qualname": "SparkDbApiError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "sqlmesh.engines.spark.db_api.errors.NotSupportedError", "modulename": "sqlmesh.engines.spark.db_api.errors", "qualname": "NotSupportedError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SparkDbApiError"}, {"fullname": "sqlmesh.engines.spark.db_api.errors.ProgrammingError", "modulename": "sqlmesh.engines.spark.db_api.errors", "qualname": "ProgrammingError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SparkDbApiError"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionCursor", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionCursor", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionCursor.__init__", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionCursor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spark</span><span class=\"p\">:</span> <span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">SparkSession</span></span>)</span>"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionCursor.execute", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionCursor.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionCursor.fetchone", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionCursor.fetchone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionCursor.fetchmany", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionCursor.fetchmany", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionCursor.fetchall", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionCursor.fetchall", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionCursor.close", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionCursor.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionCursor.fetchdf", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionCursor.fetchdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionConnection", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionConnection", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionConnection.__init__", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionConnection.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spark</span><span class=\"p\">:</span> <span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">SparkSession</span></span>)</span>"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionConnection.cursor", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionConnection.cursor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">spark</span><span class=\"o\">.</span><span class=\"n\">db_api</span><span class=\"o\">.</span><span class=\"n\">spark_session</span><span class=\"o\">.</span><span class=\"n\">SparkSessionCursor</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionConnection.commit", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionConnection.commit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionConnection.rollback", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionConnection.rollback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.SparkSessionConnection.close", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "SparkSessionConnection.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.engines.spark.db_api.spark_session.connection", "modulename": "sqlmesh.engines.spark.db_api.spark_session", "qualname": "connection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spark</span><span class=\"p\">:</span> <span class=\"n\">pyspark</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">SparkSession</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">spark</span><span class=\"o\">.</span><span class=\"n\">db_api</span><span class=\"o\">.</span><span class=\"n\">spark_session</span><span class=\"o\">.</span><span class=\"n\">SparkSessionConnection</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.integrations", "modulename": "sqlmesh.integrations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.integrations.github", "modulename": "sqlmesh.integrations.github", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.integrations.github.notification_operator_provider", "modulename": "sqlmesh.integrations.github.notification_operator_provider", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.integrations.github.notification_operator_provider.GithubNotificationOperatorProvider", "modulename": "sqlmesh.integrations.github.notification_operator_provider", "qualname": "GithubNotificationOperatorProvider", "kind": "class", "doc": "<p>Github Notification Operator for Airflow.</p>\n", "bases": "sqlmesh.schedulers.airflow.operators.notification.BaseNotificationOperatorProvider[sqlmesh.integrations.github.notification_target.GithubNotificationTarget]"}, {"fullname": "sqlmesh.integrations.github.notification_operator_provider.GithubNotificationOperatorProvider.__init__", "modulename": "sqlmesh.integrations.github.notification_operator_provider", "qualname": "GithubNotificationOperatorProvider.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.integrations.github.notification_operator_provider.GithubNotificationOperatorProvider.operator", "modulename": "sqlmesh.integrations.github.notification_operator_provider", "qualname": "GithubNotificationOperatorProvider.operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">integrations</span><span class=\"o\">.</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">GithubNotificationTarget</span>,</span><span class=\"param\">\t<span class=\"n\">plan_status</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PlanStatus</span>,</span><span class=\"param\">\t<span class=\"n\">plan_dag_spec</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">PlanDagSpec</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">dag_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">MagicMock</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;6049944224&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.integrations.github.notification_target", "modulename": "sqlmesh.integrations.github.notification_target", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.integrations.github.notification_target.GithubNotificationTarget", "modulename": "sqlmesh.integrations.github.notification_target", "qualname": "GithubNotificationTarget", "kind": "class", "doc": "<p>Github Notification Target that sends notifications to pull requests</p>\n", "bases": "sqlmesh.core.notification_target.BaseNotificationTarget"}, {"fullname": "sqlmesh.integrations.github.notification_target.GithubNotificationTarget.send", "modulename": "sqlmesh.integrations.github.notification_target", "qualname": "GithubNotificationTarget.send", "kind": "function", "doc": "<p>Sends notification with the provided message. Currently only used by the built-in scheduler.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">notification_status</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">NotificationStatus</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">user_to_append_to</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.integrations.github.shared", "modulename": "sqlmesh.integrations.github.shared", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.integrations.github.shared.PullRequestInfo", "modulename": "sqlmesh.integrations.github.shared", "qualname": "PullRequestInfo", "kind": "class", "doc": "<p>Contains information related to a pull request that can be used to construct other objects/URLs</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.integrations.github.shared.PullRequestInfo.create_from_pull_request_url", "modulename": "sqlmesh.integrations.github.shared", "qualname": "PullRequestInfo.create_from_pull_request_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">pull_request_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">integrations</span><span class=\"o\">.</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"n\">PullRequestInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.integrations.github.shared.add_comment_to_pr", "modulename": "sqlmesh.integrations.github.shared", "qualname": "add_comment_to_pr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">Repository</span><span class=\"o\">.</span><span class=\"n\">Repository</span>,</span><span class=\"param\">\t<span class=\"n\">pull_request_info</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">integrations</span><span class=\"o\">.</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"n\">PullRequestInfo</span>,</span><span class=\"param\">\t<span class=\"n\">notification_status</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">NotificationStatus</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">user_to_append_to</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics", "modulename": "sqlmesh.magics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.magics.SQLMeshMagics", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics", "kind": "class", "doc": "<p>Base class for implementing magic functions.</p>\n\n<p>Shell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg <code>%cd ../</code>\nvs. <code>%cd(\"../\")</code></p>\n\n<p>Classes providing magic functions need to subclass this class, and they\nMUST:</p>\n\n<ul>\n<li><p>Use the method decorators <code>@line_magic</code> and <code>@cell_magic</code> to decorate\nindividual methods as magic functions, AND</p></li>\n<li><p>Use the class decorator <code>@magics_class</code> to ensure that the magic\nmethods are properly registered at the instance level upon instance\ninitialization.</p></li>\n</ul>\n\n<p>See <code>magic_functions</code> for examples of actual implementation classes.</p>\n", "bases": "IPython.core.magic.Magics"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.context", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.context", "kind": "function", "doc": "<p>Sets the context in the user namespace.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.model", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.model", "kind": "function", "doc": "<p>Renders the model and automatically fills in an editable cell with the model definition.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.test", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.test", "kind": "function", "doc": "<p>Allow the user to list tests for a model, output a specific test, and then write their changes back</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">test_def_raw</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.plan", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.plan", "kind": "function", "doc": "<p>Goes through a set of prompts to both establish a plan and apply it</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.run_dag", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.run_dag", "kind": "function", "doc": "<p>Evaluate the DAG of models using the built-in scheduler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.evaluate", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.evaluate", "kind": "function", "doc": "<p>Evaluate a model query and fetches a dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.render", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.render", "kind": "function", "doc": "<p>Renders a model's query, optionally expanding referenced models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.fetchdf", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.fetchdf", "kind": "function", "doc": "<p>Fetches a dataframe from sql, optionally storing it in a variable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.SQLMeshMagics.dag", "modulename": "sqlmesh.magics", "qualname": "SQLMeshMagics.dag", "kind": "function", "doc": "<p>Displays the dag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.magics.register_magics", "modulename": "sqlmesh.magics", "qualname": "register_magics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers", "modulename": "sqlmesh.schedulers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow", "modulename": "sqlmesh.schedulers.airflow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.api", "modulename": "sqlmesh.schedulers.airflow.api", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.api.check_authentication", "modulename": "sqlmesh.schedulers.airflow.api", "qualname": "check_authentication", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.api.apply_plan", "modulename": "sqlmesh.schedulers.airflow.api", "qualname": "apply_plan", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.api.get_environment", "modulename": "sqlmesh.schedulers.airflow.api", "qualname": "get_environment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.api.get_environments", "modulename": "sqlmesh.schedulers.airflow.api", "qualname": "get_environments", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.api.get_snapshots", "modulename": "sqlmesh.schedulers.airflow.api", "qualname": "get_snapshots", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client", "modulename": "sqlmesh.schedulers.airflow.client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.__init__", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">sessions</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">airflow_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.apply_plan", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.apply_plan", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">no_gaps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">skip_backfill</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">restatements</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">notification_targets</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">ConsoleNotificationTarget</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">integrations</span><span class=\"o\">.</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">notification_target</span><span class=\"o\">.</span><span class=\"n\">GithubNotificationTarget</span><span class=\"p\">],</span> <span class=\"n\">FieldInfo</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">PydanticUndefined</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span><span class=\"o\">=</span><span class=\"s1\">&#39;type_&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{})]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">backfill_concurrent_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ddl_concurrent_tasks</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_dev</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.get_snapshots", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.get_snapshots", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.snapshots_exist", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.snapshots_exist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.get_snapshots_with_same_version", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.get_snapshots_with_same_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_name_versions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotNameVersion</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.get_environment", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.get_environment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.get_environments", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.get_environments", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.get_dag_run_state", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.get_dag_run_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dag_run_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.get_janitor_dag", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.get_janitor_dag", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.get_snapshot_dag", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.get_snapshot_dag", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.get_all_dags", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.get_all_dags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.wait_for_dag_run_completion", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.wait_for_dag_run_completion", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dag_run_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">poll_interval_secs</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.wait_for_first_dag_run", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.wait_for_first_dag_run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">poll_interval_secs</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">max_retries</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.print_tracking_url", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.print_tracking_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dag_run_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">op_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.dag_run_tracking_url", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.dag_run_tracking_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dag_run_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.client.AirflowClient.close", "modulename": "sqlmesh.schedulers.airflow.client", "qualname": "AirflowClient.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common", "modulename": "sqlmesh.schedulers.airflow.common", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.common.PlanApplicationRequest", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "PlanApplicationRequest", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.common.BackfillIntervalsPerSnapshot", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "BackfillIntervalsPerSnapshot", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.common.PlanDagSpec", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "PlanDagSpec", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.common.EnvironmentsResponse", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "EnvironmentsResponse", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.common.SnapshotsResponse", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "SnapshotsResponse", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.common.SnapshotIdsResponse", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "SnapshotIdsResponse", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.common.snapshot_key", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "snapshot_key", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snapshot</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.snapshot_key_from_name_identifier", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "snapshot_key_from_name_identifier", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.snapshot_version_key", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "snapshot_version_key", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.name_from_snapshot_version_key", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "name_from_snapshot_version_key", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.dag_id_for_snapshot_info", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "dag_id_for_snapshot_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.dag_id_for_name_version", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "dag_id_for_name_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.plan_application_dag_id", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "plan_application_dag_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.environment_key", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "environment_key", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.plan_dag_spec_key", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "plan_dag_spec_key", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.common.plan_dag_spec_key_from_dag_id", "modulename": "sqlmesh.schedulers.airflow.common", "qualname": "plan_dag_spec_key_from_dag_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.dag_generator", "modulename": "sqlmesh.schedulers.airflow.dag_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.dag_generator.SnapshotDagGenerator", "modulename": "sqlmesh.schedulers.airflow.dag_generator", "qualname": "SnapshotDagGenerator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.dag_generator.SnapshotDagGenerator.__init__", "modulename": "sqlmesh.schedulers.airflow.dag_generator", "qualname": "SnapshotDagGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine_operator</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">baseoperator</span><span class=\"o\">.</span><span class=\"n\">BaseOperator</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">engine_operator_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">ddl_engine_operator</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">baseoperator</span><span class=\"o\">.</span><span class=\"n\">BaseOperator</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ddl_engine_operator_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "sqlmesh.schedulers.airflow.dag_generator.SnapshotDagGenerator.generate_cadence_dags", "modulename": "sqlmesh.schedulers.airflow.dag_generator", "qualname": "SnapshotDagGenerator.generate_cadence_dags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.dag_generator.SnapshotDagGenerator.generate_plan_application_dag", "modulename": "sqlmesh.schedulers.airflow.dag_generator", "qualname": "SnapshotDagGenerator.generate_plan_application_dag", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">spec</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">PlanDagSpec</span></span><span class=\"return-annotation\">) -> <span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.dag_generator.creation_update_state_task", "modulename": "sqlmesh.schedulers.airflow.dag_generator", "qualname": "creation_update_state_task", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">new_snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.dag_generator.promotion_update_state_task", "modulename": "sqlmesh.schedulers.airflow.dag_generator", "qualname": "promotion_update_state_task", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">environment_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">unpaused_dt</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">no_gaps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">plan_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">previous_plan_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">environment_expiration_ts</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.hooks", "modulename": "sqlmesh.schedulers.airflow.hooks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.hooks.bigquery", "modulename": "sqlmesh.schedulers.airflow.hooks.bigquery", "kind": "module", "doc": "<p>MagicMock is a subclass of Mock with default implementations\nof most of the magic methods. You can use MagicMock without having to\nconfigure the magic methods yourself.</p>\n\n<p>If you use the <code>spec</code> or <code>spec_set</code> arguments then <em>only</em> magic\nmethods that exist in the spec will be created.</p>\n\n<p>Attributes and the return value of a <code>MagicMock</code> will also be <code>MagicMocks</code>.</p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.hooks.redshift", "modulename": "sqlmesh.schedulers.airflow.hooks.redshift", "kind": "module", "doc": "<p>MagicMock is a subclass of Mock with default implementations\nof most of the magic methods. You can use MagicMock without having to\nconfigure the magic methods yourself.</p>\n\n<p>If you use the <code>spec</code> or <code>spec_set</code> arguments then <em>only</em> magic\nmethods that exist in the spec will be created.</p>\n\n<p>Attributes and the return value of a <code>MagicMock</code> will also be <code>MagicMocks</code>.</p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.integration", "modulename": "sqlmesh.schedulers.airflow.integration", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.integration.SQLMeshAirflow", "modulename": "sqlmesh.schedulers.airflow.integration", "qualname": "SQLMeshAirflow", "kind": "class", "doc": "<p>The entry point for the SQLMesh integration with Airflow.</p>\n\n<p>The instance of this class should be created in a module that is part of the\nAirflow DAGs folder. Its primary purpose is to create DAG objects for the operational\nneeds of the platform, as well as for model evaluation and backfills.</p>\n\n<p>Please note that the user must pass created DAGs into the\nAirflow scheduler. See the example below:</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>Create a new python module in the Airflow DAGs folder called \"sqlmesh_integration.py\"\n  with the following content:</p>\n\n<pre><code>from sqlmesh.schedulers.airflow.integration import SQLMeshAirflow\n\nfor dag in SQLMeshAirflow(\"spark\").dags:\n    globals()[dag.dag_id] = dag\n</code></pre>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>engine_operator:</strong>  The type of the Airflow operator that will be used for model evaluation.\nIf a string value is passed, an automatic operator discovery is attempted based\non the engine name specified in the string.</li>\n<li><strong>engine_operator_args:</strong>  The dictionary of arguments that will be passed into the evaluate engine\noperator during its construction.\nThis can be used to customize parameters such as connection ID.</li>\n<li><strong>ddl_engine_operator:</strong>  The type of the Airflow operator that will be used for environment management.\nThese operations are SQL only.\nIf a string value is passed, an automatic operator discovery is attempted based\non the engine name specified in the string.</li>\n<li><strong>ddl_engine_operator_args:</strong>  Args to be passed into just the environment management operator.\nThis can be used to customize parameters such as connection ID.\nIf not specified, and the operator is the same as <code>engine_operator</code>, falls back to using <code>engine_operator_args</code>.</li>\n<li><strong>janitor_interval:</strong>  Defines how often the janitor DAG runs.\nThe janitor DAG removes platform-managed DAG instances that are pending\ndeletion from Airflow. Default: 1 hour.</li>\n<li><strong>plan_application_dag_ttl:</strong>  Determines the time-to-live period for finished plan application DAGs.\nOnce this period is exceeded, finished plan application DAGs are deleted by the janitor. Default: 2 days.</li>\n</ul>\n"}, {"fullname": "sqlmesh.schedulers.airflow.integration.SQLMeshAirflow.__init__", "modulename": "sqlmesh.schedulers.airflow.integration", "qualname": "SQLMeshAirflow.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine_operator</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">baseoperator</span><span class=\"o\">.</span><span class=\"n\">BaseOperator</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">engine_operator_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ddl_engine_operator</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">baseoperator</span><span class=\"o\">.</span><span class=\"n\">BaseOperator</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ddl_engine_operator_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">janitor_interval</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">3600</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">plan_application_dag_ttl</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "sqlmesh.schedulers.airflow.integration.SQLMeshAirflow.dags", "modulename": "sqlmesh.schedulers.airflow.integration", "qualname": "SQLMeshAirflow.dags", "kind": "variable", "doc": "<p>Returns all DAG instances that must be registered with the Airflow scheduler\nfor the integration to work.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of DAG instances managed by the platform.</p>\n</blockquote>\n", "annotation": ": List[airflow.models.dag.DAG]"}, {"fullname": "sqlmesh.schedulers.airflow.operators", "modulename": "sqlmesh.schedulers.airflow.operators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.bigquery", "modulename": "sqlmesh.schedulers.airflow.operators.bigquery", "kind": "module", "doc": "<p>MagicMock is a subclass of Mock with default implementations\nof most of the magic methods. You can use MagicMock without having to\nconfigure the magic methods yourself.</p>\n\n<p>If you use the <code>spec</code> or <code>spec_set</code> arguments then <em>only</em> magic\nmethods that exist in the spec will be created.</p>\n\n<p>Attributes and the return value of a <code>MagicMock</code> will also be <code>MagicMocks</code>.</p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.databricks", "modulename": "sqlmesh.schedulers.airflow.operators.databricks", "kind": "module", "doc": "<p>MagicMock is a subclass of Mock with default implementations\nof most of the magic methods. You can use MagicMock without having to\nconfigure the magic methods yourself.</p>\n\n<p>If you use the <code>spec</code> or <code>spec_set</code> arguments then <em>only</em> magic\nmethods that exist in the spec will be created.</p>\n\n<p>Attributes and the return value of a <code>MagicMock</code> will also be <code>MagicMocks</code>.</p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.hwm_sensor", "modulename": "sqlmesh.schedulers.airflow.operators.hwm_sensor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.hwm_sensor.HighWaterMarkSensor", "modulename": "sqlmesh.schedulers.airflow.operators.hwm_sensor", "qualname": "HighWaterMarkSensor", "kind": "class", "doc": "<p>Sensor operators are derived from this class and inherit these attributes.</p>\n\n<p>Sensor operators keep executing at a time interval and succeed when\na criteria is met and fail if and when they time out.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>soft_fail</strong>:  Set to true to mark the task as SKIPPED on failure</li>\n<li><strong>poke_interval</strong>:  Time in seconds that the job should wait in\nbetween each tries</li>\n<li><strong>timeout</strong>:  Time, in seconds before the task times out and fails.</li>\n<li><strong>mode</strong>:  How the sensor operates.\nOptions are: <code>{ poke | reschedule }</code>, default is <code>poke</code>.\nWhen set to <code>poke</code> the sensor is taking up a worker slot for its\nwhole execution time and sleeps between pokes. Use this mode if the\nexpected runtime of the sensor is short or if a short poke interval\nis required. Note that the sensor will hold onto a worker slot and\na pool slot for the duration of the sensor's runtime in this mode.\nWhen set to <code>reschedule</code> the sensor task frees the worker slot when\nthe criteria is not yet met and it's rescheduled at a later time. Use\nthis mode if the time before the criteria is met is expected to be\nquite long. The poke interval should be more than one minute to\nprevent too much load on the scheduler.</li>\n<li><strong>exponential_backoff</strong>:  allow progressive longer waits between\npokes by using exponential backoff algorithm</li>\n</ul>\n", "bases": "airflow.sensors.base.BaseSensorOperator"}, {"fullname": "sqlmesh.schedulers.airflow.operators.hwm_sensor.HighWaterMarkSensor.__init__", "modulename": "sqlmesh.schedulers.airflow.operators.hwm_sensor", "qualname": "HighWaterMarkSensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target_snapshot_info</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span>,</span><span class=\"param\">\t<span class=\"n\">this_snapshot</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span>,</span><span class=\"param\">\t<span class=\"n\">poke_interval</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">60.0</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">604800.0</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;reschedule&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqlmesh.schedulers.airflow.operators.hwm_sensor.HighWaterMarkSensor.poke", "modulename": "sqlmesh.schedulers.airflow.operators.hwm_sensor", "qualname": "HighWaterMarkSensor.poke", "kind": "function", "doc": "<p>Function that the sensors defined while deriving this class should\noverride.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.notification", "modulename": "sqlmesh.schedulers.airflow.operators.notification", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.notification.BaseNotificationOperatorProvider", "modulename": "sqlmesh.schedulers.airflow.operators.notification", "qualname": "BaseNotificationOperatorProvider", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC, typing.Generic[~NT]"}, {"fullname": "sqlmesh.schedulers.airflow.operators.notification.BaseNotificationOperatorProvider.operator", "modulename": "sqlmesh.schedulers.airflow.operators.notification", "qualname": "BaseNotificationOperatorProvider.operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">NT</span>,</span><span class=\"param\">\t<span class=\"n\">plan_status</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PlanStatus</span>,</span><span class=\"param\">\t<span class=\"n\">plan_dag_spec</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">PlanDagSpec</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">dag_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">baseoperator</span><span class=\"o\">.</span><span class=\"n\">BaseOperator</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.notification.BaseNotificationOperatorProvider.get_trigger_rule", "modulename": "sqlmesh.schedulers.airflow.operators.notification", "qualname": "BaseNotificationOperatorProvider.get_trigger_rule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plan_status</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PlanStatus</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.notification.BaseNotificationOperatorProvider.get_task_id", "modulename": "sqlmesh.schedulers.airflow.operators.notification", "qualname": "BaseNotificationOperatorProvider.get_task_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">NT</span>,</span><span class=\"param\">\t<span class=\"n\">plan_status</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plan</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">PlanStatus</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.redshift", "modulename": "sqlmesh.schedulers.airflow.operators.redshift", "kind": "module", "doc": "<p>MagicMock is a subclass of Mock with default implementations\nof most of the magic methods. You can use MagicMock without having to\nconfigure the magic methods yourself.</p>\n\n<p>If you use the <code>spec</code> or <code>spec_set</code> arguments then <em>only</em> magic\nmethods that exist in the spec will be created.</p>\n\n<p>Attributes and the return value of a <code>MagicMock</code> will also be <code>MagicMocks</code>.</p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.snowflake", "modulename": "sqlmesh.schedulers.airflow.operators.snowflake", "kind": "module", "doc": "<p>MagicMock is a subclass of Mock with default implementations\nof most of the magic methods. You can use MagicMock without having to\nconfigure the magic methods yourself.</p>\n\n<p>If you use the <code>spec</code> or <code>spec_set</code> arguments then <em>only</em> magic\nmethods that exist in the spec will be created.</p>\n\n<p>Attributes and the return value of a <code>MagicMock</code> will also be <code>MagicMocks</code>.</p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.spark_submit", "modulename": "sqlmesh.schedulers.airflow.operators.spark_submit", "kind": "module", "doc": "<p>MagicMock is a subclass of Mock with default implementations\nof most of the magic methods. You can use MagicMock without having to\nconfigure the magic methods yourself.</p>\n\n<p>If you use the <code>spec</code> or <code>spec_set</code> arguments then <em>only</em> magic\nmethods that exist in the spec will be created.</p>\n\n<p>Attributes and the return value of a <code>MagicMock</code> will also be <code>MagicMocks</code>.</p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "BaseTarget", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC, typing.Generic[~CP]"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget.serialized_command_payload", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "BaseTarget.serialized_command_payload", "kind": "function", "doc": "<p>Returns the serialized command payload for the Spark application.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  Airflow task context.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The serialized command payload.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget.execute", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "BaseTarget.execute", "kind": "function", "doc": "<p>Executes this target.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  Airflow task context.</li>\n<li><strong>connection_factory:</strong>  a callable which produces a new Database API compliant\nconnection on every call.</li>\n<li><strong>dialect:</strong>  The dialect with which this adapter is associated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span>,</span><span class=\"param\">\t<span class=\"n\">connection_factory</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget.post_hook", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "BaseTarget.post_hook", "kind": "function", "doc": "<p>The hook that should be invoked once the processing of this target\nis complete.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  Airflow task context.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.SnapshotEvaluationTarget", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "SnapshotEvaluationTarget", "kind": "class", "doc": "<p>The target which contains attributes necessary to evaluate a given snapshot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot:</strong>  The snapshot which should be evaluated.</li>\n<li><strong>parent_snapshots:</strong>  All upstream snapshots (by model name) to use for expansion and mapping of physical locations.</li>\n<li><strong>start:</strong>  The start of the interval to evaluate.</li>\n<li><strong>end:</strong>  The end of the interval to evaluate.</li>\n<li><strong>latest:</strong>  The latest time used for non incremental datasets.</li>\n<li><strong>is_dev:</strong>  Indicates whether the evaluation happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n</ul>\n", "bases": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget[sqlmesh.engines.commands.EvaluateCommandPayload], sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.SnapshotEvaluationTarget.post_hook", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "SnapshotEvaluationTarget.post_hook", "kind": "function", "doc": "<p>The hook that should be invoked once the processing of this target\nis complete.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  Airflow task context.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.SnapshotPromotionTarget", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "SnapshotPromotionTarget", "kind": "class", "doc": "<p>The target which contains attributes necessary to perform snapshot promotion in a given environment.</p>\n\n<p>The promotion means creation of views associated with the environment which target physical tables\nassociated with the given list of snapshots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  The list of snapshots that should be promoted in the target environment.</li>\n<li><strong>environment:</strong>  The target environment.</li>\n<li><strong>ddl_concurrent_tasks:</strong>  The number of concurrent tasks used for DDL\noperations (table / view creation, deletion, etc). Default: 1.</li>\n<li><strong>is_dev:</strong>  Indicates whether the promotion happens in the development mode and temporary\ntables / table clones should be used where applicable.</li>\n</ul>\n", "bases": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget[sqlmesh.engines.commands.PromoteCommandPayload], sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.SnapshotDemotionTarget", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "SnapshotDemotionTarget", "kind": "class", "doc": "<p>The target which contains attributes necessary to perform snapshot demotion in a given environment.</p>\n\n<p>The demotion means deletion of views that match names of provided snapshots in the target environment.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  The list of snapshots that should be demoted in the target environment.</li>\n<li><strong>environment:</strong>  The target environment.</li>\n</ul>\n", "bases": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget[sqlmesh.engines.commands.DemoteCommandPayload], sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.SnapshotCleanupTarget", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "SnapshotCleanupTarget", "kind": "class", "doc": "<p>The target which contains attributes necessary to perform table cleanup of expired snapshots</p>\n", "bases": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget[sqlmesh.engines.commands.CleanupCommandPayload], sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.SnapshotCleanupTarget.post_hook", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "SnapshotCleanupTarget.post_hook", "kind": "function", "doc": "<p>The hook that should be invoked once the processing of this target\nis complete.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context:</strong>  Airflow task context.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.SnapshotCreateTablesTarget", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "SnapshotCreateTablesTarget", "kind": "class", "doc": "<p>The target which creates physical tables for the given set of new snapshots.</p>\n", "bases": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget[sqlmesh.engines.commands.CreateTablesCommandPayload], sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.operators.targets.SnapshotMigrateTablesTarget", "modulename": "sqlmesh.schedulers.airflow.operators.targets", "qualname": "SnapshotMigrateTablesTarget", "kind": "class", "doc": "<p>The target which updates schemas of existing physical tables to bring them in correspondance\nwith schemas of target snapshots.</p>\n", "bases": "sqlmesh.schedulers.airflow.operators.targets.BaseTarget[sqlmesh.engines.commands.MigrateTablesCommandPayload], sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.schedulers.airflow.plan", "modulename": "sqlmesh.schedulers.airflow.plan", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.plan.create_plan_dag_spec", "modulename": "sqlmesh.schedulers.airflow.plan", "qualname": "create_plan_dag_spec", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">PlanApplicationRequest</span>,</span><span class=\"param\">\t<span class=\"n\">state_sync</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_sync</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StateSync</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">PlanDagSpec</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.plugin", "modulename": "sqlmesh.schedulers.airflow.plugin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.plugin.SqlmeshAirflowPlugin", "modulename": "sqlmesh.schedulers.airflow.plugin", "qualname": "SqlmeshAirflowPlugin", "kind": "class", "doc": "<p>Class used to define AirflowPlugin.</p>\n", "bases": "airflow.plugins_manager.AirflowPlugin"}, {"fullname": "sqlmesh.schedulers.airflow.plugin.SqlmeshAirflowPlugin.__init__", "modulename": "sqlmesh.schedulers.airflow.plugin", "qualname": "SqlmeshAirflowPlugin.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.schedulers.airflow.plugin.SqlmeshAirflowPlugin.on_load", "modulename": "sqlmesh.schedulers.airflow.plugin", "qualname": "SqlmeshAirflowPlugin.on_load", "kind": "function", "doc": "<p>Executed when the plugin is loaded.\nThis method is only called once during runtime.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  If future arguments are passed in on call.</li>\n<li><strong>kwargs</strong>:  If future arguments are passed in on call.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync", "modulename": "sqlmesh.schedulers.airflow.state_sync", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync.HttpStateReader", "modulename": "sqlmesh.schedulers.airflow.state_sync", "qualname": "HttpStateReader", "kind": "class", "doc": "<p>Reads state of models and snapshot through the Airflow REST API.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>airflow_url:</strong>  URL pointing to the airflow rest api.</li>\n<li><strong>username:</strong>  Username for Airflow.</li>\n<li><strong>password:</strong>  Password for Airflow.</li>\n<li><strong>blocking_updates:</strong>  Indicates whether calls that cause state updates should be blocking.</li>\n<li><strong>dag_run_poll_interval_secs:</strong>  Determines how frequently the state of a DAG run should be checked.\nUsed to block on calls that update the state.</li>\n<li><strong>console:</strong>  Used to print out tracking URLs.</li>\n</ul>\n", "bases": "sqlmesh.core.state_sync.base.StateReader"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync.HttpStateReader.__init__", "modulename": "sqlmesh.schedulers.airflow.state_sync", "qualname": "HttpStateReader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">schedulers</span><span class=\"o\">.</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">AirflowClient</span>,</span><span class=\"param\">\t<span class=\"n\">blocking_updates</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dag_run_poll_interval_secs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync.HttpStateReader.get_environment", "modulename": "sqlmesh.schedulers.airflow.state_sync", "qualname": "HttpStateReader.get_environment", "kind": "function", "doc": "<p>Fetches the environment if it exists.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>environment:</strong>  The environment</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The environment object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync.HttpStateReader.get_environments", "modulename": "sqlmesh.schedulers.airflow.state_sync", "qualname": "HttpStateReader.get_environments", "kind": "function", "doc": "<p>Fetches all environments.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of all environments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync.HttpStateReader.get_snapshots", "modulename": "sqlmesh.schedulers.airflow.state_sync", "qualname": "HttpStateReader.get_snapshots", "kind": "function", "doc": "<p>Gets multiple snapshots from the rest api.</p>\n\n<p>Because of the limitations of the Airflow API, this method is inherently inefficient.\nIt's impossible to bulkfetch the snapshots and thus every snapshot needs to make an individual\ncall to the rest api. Multiple threads can be used, but it could possibly have detrimental effects\non the production server.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync.HttpStateReader.snapshots_exist", "modulename": "sqlmesh.schedulers.airflow.state_sync", "qualname": "HttpStateReader.snapshots_exist", "kind": "function", "doc": "<p>Checks if multiple snapshots exist in the state sync.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshot_ids:</strong>  Iterable of snapshot ids to bulk check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A set of existing snapshot IDs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_ids</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync.HttpStateReader.get_snapshots_with_same_version", "modulename": "sqlmesh.schedulers.airflow.state_sync", "qualname": "HttpStateReader.get_snapshots_with_same_version", "kind": "function", "doc": "<p>Fetches all snapshots that share the same version as the snapshots.</p>\n\n<p>The output includes the snapshots with the specified version.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  The collection of target name / version pairs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of Snapshot objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotNameVersion</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotTableInfo</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.state_sync.HttpStateReader.get_snapshots_by_models", "modulename": "sqlmesh.schedulers.airflow.state_sync", "qualname": "HttpStateReader.get_snapshots_by_models", "kind": "function", "doc": "<p>Get all snapshots by model name.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The list of snapshots.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">Snapshot</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.util", "modulename": "sqlmesh.schedulers.airflow.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.schedulers.airflow.util.scoped_state_sync", "modulename": "sqlmesh.schedulers.airflow.util", "qualname": "scoped_state_sync", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_sync</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StateSync</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.util.get_snapshot_dag_ids", "modulename": "sqlmesh.schedulers.airflow.util", "qualname": "get_snapshot_dag_ids", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.util.get_finished_plan_application_dag_ids", "modulename": "sqlmesh.schedulers.airflow.util", "qualname": "get_finished_plan_application_dag_ids", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ttl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.util.delete_dags", "modulename": "sqlmesh.schedulers.airflow.util", "qualname": "delete_dags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dag_ids</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.util.delete_xcoms", "modulename": "sqlmesh.schedulers.airflow.util", "qualname": "delete_xcoms", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dag_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.util.delete_variables", "modulename": "sqlmesh.schedulers.airflow.util", "qualname": "delete_variables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.schedulers.airflow.util.discover_engine_operator", "modulename": "sqlmesh.schedulers.airflow.util", "qualname": "discover_engine_operator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sql_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">airflow</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">baseoperator</span><span class=\"o\">.</span><span class=\"n\">BaseOperator</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils", "modulename": "sqlmesh.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.optional_import", "modulename": "sqlmesh.utils", "qualname": "optional_import", "kind": "function", "doc": "<p>Optionally import a module.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The name of the module to import.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The module if it is installed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">module</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.unique", "modulename": "sqlmesh.utils", "qualname": "unique", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.random_id", "modulename": "sqlmesh.utils", "qualname": "random_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.UniqueKeyDict", "modulename": "sqlmesh.utils", "qualname": "UniqueKeyDict", "kind": "class", "doc": "<p>Dict that raises when a duplicate key is set.</p>\n", "bases": "builtins.dict, typing.Mapping[~KEY, ~VALUE]"}, {"fullname": "sqlmesh.utils.AttributeDict", "modulename": "sqlmesh.utils", "qualname": "AttributeDict", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict, typing.Mapping[~KEY, ~VALUE]"}, {"fullname": "sqlmesh.utils.registry_decorator", "modulename": "sqlmesh.utils", "qualname": "registry_decorator", "kind": "class", "doc": "<p>A decorator that registers itself.</p>\n"}, {"fullname": "sqlmesh.utils.registry_decorator.__init__", "modulename": "sqlmesh.utils", "qualname": "registry_decorator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "sqlmesh.utils.registry_decorator.registry", "modulename": "sqlmesh.utils", "qualname": "registry_decorator.registry", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.registry_decorator.get_registry", "modulename": "sqlmesh.utils", "qualname": "registry_decorator.get_registry", "kind": "function", "doc": "<p>Get a copy of the registry</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.registry_decorator.set_registry", "modulename": "sqlmesh.utils", "qualname": "registry_decorator.set_registry", "kind": "function", "doc": "<p>Set the registry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">registry</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">UniqueKeyDict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.sys_path", "modulename": "sqlmesh.utils", "qualname": "sys_path", "kind": "function", "doc": "<p>A context manager to temporarily add a path to 'sys.path'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.format_exception", "modulename": "sqlmesh.utils", "qualname": "format_exception", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"ne\">BaseException</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.word_characters_only", "modulename": "sqlmesh.utils", "qualname": "word_characters_only", "kind": "function", "doc": "<p>Replace all non-word characters in string with the replacement character.\nReference SO: <a href=\"https://stackoverflow.com/questions/1276764/stripping-everything-but-alphanumeric-chars-from-a-string-in-python/70310018#70310018\">https://stackoverflow.com/questions/1276764/stripping-everything-but-alphanumeric-chars-from-a-string-in-python/70310018#70310018</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">word_characters_only</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello, world!&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Hello__world_&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">word_characters_only</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello, world! 123&quot;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Helloworld123&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">replacement_char</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.double_escape", "modulename": "sqlmesh.utils", "qualname": "double_escape", "kind": "function", "doc": "<p>Replace backslashes with another backslash.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.nullsafe_join", "modulename": "sqlmesh.utils", "qualname": "nullsafe_join", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">join_char</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.concurrency", "modulename": "sqlmesh.utils.concurrency", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.concurrency.NodeExecutionFailedError", "modulename": "sqlmesh.utils.concurrency", "qualname": "NodeExecutionFailedError", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "typing.Generic[~H], sqlmesh.utils.errors.SQLMeshError"}, {"fullname": "sqlmesh.utils.concurrency.NodeExecutionFailedError.__init__", "modulename": "sqlmesh.utils.concurrency", "qualname": "NodeExecutionFailedError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">H</span></span>)</span>"}, {"fullname": "sqlmesh.utils.concurrency.ConcurrentDAGExecutor", "modulename": "sqlmesh.utils.concurrency", "qualname": "ConcurrentDAGExecutor", "kind": "class", "doc": "<p>Concurrently traverses the given DAG in topological order while applying a function to each node.</p>\n\n<p>If <code>raise_on_error</code> is set to False maintains a state of execution errors as well as of skipped nodes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag:</strong>  The target DAG.</li>\n<li><strong>fn:</strong>  The function that will be applied concurrently to each snapshot.</li>\n<li><strong>tasks_num:</strong>  The number of concurrent tasks.</li>\n<li><strong>raise_on_error:</strong>  If set to True raises an exception on a first encountered error,\notherwises returns a tuple which contains a list of failed nodes and a list of\nskipped nodes.</li>\n</ul>\n", "bases": "typing.Generic[~H]"}, {"fullname": "sqlmesh.utils.concurrency.ConcurrentDAGExecutor.__init__", "modulename": "sqlmesh.utils.concurrency", "qualname": "ConcurrentDAGExecutor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dag</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tasks_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">raise_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "sqlmesh.utils.concurrency.ConcurrentDAGExecutor.run", "modulename": "sqlmesh.utils.concurrency", "qualname": "ConcurrentDAGExecutor.run", "kind": "function", "doc": "<p>Runs the executor.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>NodeExecutionFailedError if <code>raise_on_error</code> was set to True and execution fails for any snapshot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A pair which contains a list of node errors and a list of skipped nodes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">concurrency</span><span class=\"o\">.</span><span class=\"n\">NodeExecutionFailedError</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.concurrency.concurrent_apply_to_snapshots", "modulename": "sqlmesh.utils.concurrency", "qualname": "concurrent_apply_to_snapshots", "kind": "function", "doc": "<p>Applies a function to the given collection of snapshots concurrently while\npreserving the topological order between snapshots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>snapshots:</strong>  Target snapshots.</li>\n<li><strong>fn:</strong>  The function that will be applied concurrently to each snapshot.</li>\n<li><strong>tasks_num:</strong>  The number of concurrent tasks.</li>\n<li><strong>reverse_order:</strong>  Whether the order should be reversed. Default: False.</li>\n<li><strong>raise_on_error:</strong>  If set to True raises an exception on a first encountered error,\notherwises returns a tuple which contains a list of failed nodes and a list of\nskipped nodes.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>NodeExecutionFailedError if <code>raise_on_error</code> is set to True and execution fails for any snapshot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A pair which contains a list of errors and a list of skipped snapshot IDs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snapshots</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">S</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">S</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tasks_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">reverse_order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">raise_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">concurrency</span><span class=\"o\">.</span><span class=\"n\">NodeExecutionFailedError</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">definition</span><span class=\"o\">.</span><span class=\"n\">SnapshotId</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.concurrency.concurrent_apply_to_dag", "modulename": "sqlmesh.utils.concurrency", "qualname": "concurrent_apply_to_dag", "kind": "function", "doc": "<p>Applies a function to the given DAG concurrently while preserving the topological\norder between snapshots.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dag:</strong>  The target DAG.</li>\n<li><strong>fn:</strong>  The function that will be applied concurrently to each snapshot.</li>\n<li><strong>tasks_num:</strong>  The number of concurrent tasks.</li>\n<li><strong>raise_on_error:</strong>  If set to True raises an exception on a first encountered error,\notherwises returns a tuple which contains a list of failed nodes and a list of\nskipped nodes.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>NodeExecutionFailedError if <code>raise_on_error</code> is set to True and execution fails for any snapshot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A pair which contains a list of node errors and a list of skipped nodes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dag</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tasks_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">raise_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">concurrency</span><span class=\"o\">.</span><span class=\"n\">NodeExecutionFailedError</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.concurrency.sequential_apply_to_dag", "modulename": "sqlmesh.utils.concurrency", "qualname": "sequential_apply_to_dag", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dag</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">raise_on_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">concurrency</span><span class=\"o\">.</span><span class=\"n\">NodeExecutionFailedError</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">H</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool", "modulename": "sqlmesh.utils.connection_pool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.get_cursor", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.get_cursor", "kind": "function", "doc": "<p>Returns cached cursor instance.</p>\n\n<p>Automatically creates a new instance if one is not available.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A cursor instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.get", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.get", "kind": "function", "doc": "<p>Returns cached connection instance.</p>\n\n<p>Automatically opens a new connection if one is not available.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A connection instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.begin", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.begin", "kind": "function", "doc": "<p>Starts a new transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.commit", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.commit", "kind": "function", "doc": "<p>Commits the current transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.rollback", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.rollback", "kind": "function", "doc": "<p>Rolls back the current transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.is_transaction_active", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.is_transaction_active", "kind": "variable", "doc": "<p>Returns True if there is an active transaction and False otherwise.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.close_cursor", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.close_cursor", "kind": "function", "doc": "<p>Closes the current cursor instance if exists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.close", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.close", "kind": "function", "doc": "<p>Closes the current connection instance if exists.</p>\n\n<p>Note: if there is a cursor instance available it will be closed as well.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ConnectionPool.close_all", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ConnectionPool.close_all", "kind": "function", "doc": "<p>Closes all cached cursors and connections.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exclude_calling_thread:</strong>  If set to True excludes cursors and connections associated\nwith the calling thread.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exclude_calling_thread</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "_TransactionManagementMixin"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.__init__", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">connection_factory</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.get_cursor", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.get_cursor", "kind": "function", "doc": "<p>Returns cached cursor instance.</p>\n\n<p>Automatically creates a new instance if one is not available.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A cursor instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.get", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.get", "kind": "function", "doc": "<p>Returns cached connection instance.</p>\n\n<p>Automatically opens a new connection if one is not available.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A connection instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.begin", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.begin", "kind": "function", "doc": "<p>Starts a new transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.commit", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.commit", "kind": "function", "doc": "<p>Commits the current transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.rollback", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.rollback", "kind": "function", "doc": "<p>Rolls back the current transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.is_transaction_active", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.is_transaction_active", "kind": "variable", "doc": "<p>Returns True if there is an active transaction and False otherwise.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.close_cursor", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.close_cursor", "kind": "function", "doc": "<p>Closes the current cursor instance if exists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.close", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.close", "kind": "function", "doc": "<p>Closes the current connection instance if exists.</p>\n\n<p>Note: if there is a cursor instance available it will be closed as well.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.ThreadLocalConnectionPool.close_all", "modulename": "sqlmesh.utils.connection_pool", "qualname": "ThreadLocalConnectionPool.close_all", "kind": "function", "doc": "<p>Closes all cached cursors and connections.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exclude_calling_thread:</strong>  If set to True excludes cursors and connections associated\nwith the calling thread.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exclude_calling_thread</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "_TransactionManagementMixin"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.__init__", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">connection_factory</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.get_cursor", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.get_cursor", "kind": "function", "doc": "<p>Returns cached cursor instance.</p>\n\n<p>Automatically creates a new instance if one is not available.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A cursor instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.get", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.get", "kind": "function", "doc": "<p>Returns cached connection instance.</p>\n\n<p>Automatically opens a new connection if one is not available.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A connection instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.begin", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.begin", "kind": "function", "doc": "<p>Starts a new transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.commit", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.commit", "kind": "function", "doc": "<p>Commits the current transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.rollback", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.rollback", "kind": "function", "doc": "<p>Rolls back the current transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.is_transaction_active", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.is_transaction_active", "kind": "variable", "doc": "<p>Returns True if there is an active transaction and False otherwise.</p>\n", "annotation": ": bool"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.close_cursor", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.close_cursor", "kind": "function", "doc": "<p>Closes the current cursor instance if exists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.close", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.close", "kind": "function", "doc": "<p>Closes the current connection instance if exists.</p>\n\n<p>Note: if there is a cursor instance available it will be closed as well.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.SingletonConnectionPool.close_all", "modulename": "sqlmesh.utils.connection_pool", "qualname": "SingletonConnectionPool.close_all", "kind": "function", "doc": "<p>Closes all cached cursors and connections.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exclude_calling_thread:</strong>  If set to True excludes cursors and connections associated\nwith the calling thread.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exclude_calling_thread</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.connection_pool.create_connection_pool", "modulename": "sqlmesh.utils.connection_pool", "qualname": "create_connection_pool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection_factory</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">multithreaded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">connection_pool</span><span class=\"o\">.</span><span class=\"n\">ConnectionPool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.conversions", "modulename": "sqlmesh.utils.conversions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.conversions.ensure_bool", "modulename": "sqlmesh.utils.conversions", "qualname": "ensure_bool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.conversions.try_str_to_bool", "modulename": "sqlmesh.utils.conversions", "qualname": "try_str_to_bool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.dag", "modulename": "sqlmesh.utils.dag", "kind": "module", "doc": "<h1 id=\"dag\">DAG</h1>\n\n<p>A DAG, or directed acyclic graph, is a graph where the edges are directional and there are no cycles with\nall the edges pointing in the same direction. SQLMesh uses a DAG to keep track of a project's models. This\nallows SQLMesh to easily determine a model's lineage and to identify upstream and downstream dependencies.</p>\n"}, {"fullname": "sqlmesh.utils.dag.DAG", "modulename": "sqlmesh.utils.dag", "qualname": "DAG", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "typing.Generic[~T]"}, {"fullname": "sqlmesh.utils.dag.DAG.__init__", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.utils.dag.DAG.add", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.add", "kind": "function", "doc": "<p>Add a node to the graph with an optional upstream dependency.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>node:</strong>  The node to add.</li>\n<li><strong>dependencies:</strong>  Optional dependencies to add to the node.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">dependencies</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.dag.DAG.reversed", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.reversed", "kind": "variable", "doc": "<p>Returns a copy of this DAG with all its edges reversed.</p>\n", "annotation": ": sqlmesh.utils.dag.DAG[~T]"}, {"fullname": "sqlmesh.utils.dag.DAG.subdag", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.subdag", "kind": "function", "doc": "<p>Create a new subdag given node(s).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nodes:</strong>  The nodes of the new subdag.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new dag consisting of the specified nodes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">nodes</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.dag.DAG.upstream", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.upstream", "kind": "function", "doc": "<p>Returns all upstream dependencies in topologically sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.dag.DAG.leaves", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.leaves", "kind": "variable", "doc": "<p>Returns all nodes in the graph without any upstream dependencies.</p>\n", "annotation": ": Set[~T]"}, {"fullname": "sqlmesh.utils.dag.DAG.sorted", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.sorted", "kind": "function", "doc": "<p>Returns a list of nodes sorted in topological order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.dag.DAG.downstream", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.downstream", "kind": "function", "doc": "<p>Get all nodes that have the input node as an upstream dependency.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>node:</strong>  The ancestor node.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of descendant nodes sorted in topological order.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.dag.DAG.lineage", "modulename": "sqlmesh.utils.dag", "qualname": "DAG.lineage", "kind": "function", "doc": "<p>Get a dag of the node and its upstream dependencies and downstream dependents.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>node:</strong>  The node used to determine lineage.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new dag consisting of the dependent and descendant nodes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">DAG</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date", "modulename": "sqlmesh.utils.date", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.date.now", "modulename": "sqlmesh.utils.date", "qualname": "now", "kind": "function", "doc": "<p>Current utc datetime.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A datetime object with tz utc.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.now_timestamp", "modulename": "sqlmesh.utils.date", "qualname": "now_timestamp", "kind": "function", "doc": "<p>Current utc timestamp.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UTC epoch millis timestamp</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.now_ds", "modulename": "sqlmesh.utils.date", "qualname": "now_ds", "kind": "function", "doc": "<p>Current utc ds.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Today's ds string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.yesterday", "modulename": "sqlmesh.utils.date", "qualname": "yesterday", "kind": "function", "doc": "<p>Yesterday utc datetime.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A datetime object with tz utc representing yesterday's date</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.yesterday_ds", "modulename": "sqlmesh.utils.date", "qualname": "yesterday_ds", "kind": "function", "doc": "<p>Yesterday utc ds.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Yesterday's ds string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.yesterday_timestamp", "modulename": "sqlmesh.utils.date", "qualname": "yesterday_timestamp", "kind": "function", "doc": "<p>Yesterday utc timestamp.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UTC epoch millis timestamp of yesterday</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.to_timestamp", "modulename": "sqlmesh.utils.date", "qualname": "to_timestamp", "kind": "function", "doc": "<p>Converts a value into an epoch millis timestamp.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  A variety of date formats. If value is a string, it must be in iso format.</li>\n<li><strong>relative_base:</strong>  The datetime to reference for time expressions that are using relative terms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Epoch millis timestamp.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">relative_base</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.to_datetime", "modulename": "sqlmesh.utils.date", "qualname": "to_datetime", "kind": "function", "doc": "<p>Converts a value into a UTC datetime object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  A variety of date formats. If the value is number-like, it is assumed to be millisecond epochs</li>\n<li>if it is larger than MILLIS_THRESHOLD.</li>\n<li><strong>relative_base:</strong>  The datetime to reference for time expressions that are using relative terms</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>ValueError if value cannot be converted to a datetime.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A datetime object with tz utc.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">relative_base</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.to_date", "modulename": "sqlmesh.utils.date", "qualname": "to_date", "kind": "function", "doc": "<p>Converts a value into a UTC date object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  A variety of date formats. If the value is number-like, it is assumed to be millisecond epochs</li>\n<li>if it is larger than MILLIS_THRESHOLD.</li>\n<li><strong>relative_base:</strong>  The datetime to reference for time expressions that are using relative terms</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li>ValueError if value cannot be converted to a date.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A date object with tz utc.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">relative_base</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.date_dict", "modulename": "sqlmesh.utils.date", "qualname": "date_dict", "kind": "function", "doc": "<p>Creates a kwarg dictionary of datetime variables for use in SQL Contexts.</p>\n\n<p>Keys are like start_date, start_ds, end_date, end_ds...</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  Start time.</li>\n<li><strong>end:</strong>  End time.</li>\n<li><strong>latest:</strong>  Latest time.</li>\n<li><strong>only_latest:</strong>  Only the latest timestamps will be returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictionary with various keys pointing to datetime formats.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">latest</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">only_latest</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.to_ds", "modulename": "sqlmesh.utils.date", "qualname": "to_ds", "kind": "function", "doc": "<p>Converts a TimeLike object into YYYY-MM-DD formatted string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.is_date", "modulename": "sqlmesh.utils.date", "qualname": "is_date", "kind": "function", "doc": "<p>Checks if a TimeLike object should be treated like a date.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.make_inclusive", "modulename": "sqlmesh.utils.date", "qualname": "make_inclusive", "kind": "function", "doc": "<p>Adjust start and end times to to become inclusive datetimes.</p>\n\n<p>SQLMesh treats start and end times as inclusive so that filters can be written as</p>\n\n<p>SELECT * FROM x WHERE ds BETWEEN @start_ds AND @end_ds.\nSELECT * FROM x WHERE ts BETWEEN @start_ts AND @end_ts.</p>\n\n<p>In the ds ('2020-01-01') case, because start_ds and end_ds are categorical, between works even if\nstart_ds and end_ds are equivalent. However, when we move to ts ('2022-01-01 12:00:00'), because timestamps\nare numeric, using simple equality doesn't make sense. When the end is not a categorical date, then it is\ntreated as an exclusive range and converted to inclusive by subtracting 1 millisecond.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  Start timelike object.</li>\n<li><strong>end:</strong>  End timelike object.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">make_inclusive</span><span class=\"p\">(</span><span class=\"s2\">&quot;2020-01-01&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2020-01-01&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">(datetime.datetime(2020, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), datetime.datetime(2020, 1, 1, 23, 59, 59, 999000, tzinfo=datetime.timezone.utc))</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple of inclusive datetime objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.preserve_time_like_kind", "modulename": "sqlmesh.utils.date", "qualname": "preserve_time_like_kind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">output_value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.date.validate_date_range", "modulename": "sqlmesh.utils.date", "qualname": "validate_date_range", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.errors", "modulename": "sqlmesh.utils.errors", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.errors.ErrorLevel", "modulename": "sqlmesh.utils.errors", "qualname": "ErrorLevel", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "sqlglot.helper.AutoName"}, {"fullname": "sqlmesh.utils.errors.ErrorLevel.IGNORE", "modulename": "sqlmesh.utils.errors", "qualname": "ErrorLevel.IGNORE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ErrorLevel.IGNORE: &#x27;IGNORE&#x27;&gt;"}, {"fullname": "sqlmesh.utils.errors.ErrorLevel.WARN", "modulename": "sqlmesh.utils.errors", "qualname": "ErrorLevel.WARN", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ErrorLevel.WARN: &#x27;WARN&#x27;&gt;"}, {"fullname": "sqlmesh.utils.errors.ErrorLevel.RAISE", "modulename": "sqlmesh.utils.errors", "qualname": "ErrorLevel.RAISE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ErrorLevel.RAISE: &#x27;RAISE&#x27;&gt;"}, {"fullname": "sqlmesh.utils.errors.SQLMeshError", "modulename": "sqlmesh.utils.errors", "qualname": "SQLMeshError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "sqlmesh.utils.errors.ConfigError", "modulename": "sqlmesh.utils.errors", "qualname": "ConfigError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.MissingDependencyError", "modulename": "sqlmesh.utils.errors", "qualname": "MissingDependencyError", "kind": "class", "doc": "<p>Local environment is missing a required dependency for the given operation</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.MacroEvalError", "modulename": "sqlmesh.utils.errors", "qualname": "MacroEvalError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.PlanError", "modulename": "sqlmesh.utils.errors", "qualname": "PlanError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.MissingContextException", "modulename": "sqlmesh.utils.errors", "qualname": "MissingContextException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "sqlmesh.utils.errors.SnapshotVersionError", "modulename": "sqlmesh.utils.errors", "qualname": "SnapshotVersionError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.MagicError", "modulename": "sqlmesh.utils.errors", "qualname": "MagicError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.AuditConfigError", "modulename": "sqlmesh.utils.errors", "qualname": "AuditConfigError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "ConfigError"}, {"fullname": "sqlmesh.utils.errors.AuditError", "modulename": "sqlmesh.utils.errors", "qualname": "AuditError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.NotificationTargetError", "modulename": "sqlmesh.utils.errors", "qualname": "NotificationTargetError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.ApiError", "modulename": "sqlmesh.utils.errors", "qualname": "ApiError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "SQLMeshError"}, {"fullname": "sqlmesh.utils.errors.ApiClientError", "modulename": "sqlmesh.utils.errors", "qualname": "ApiClientError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "ApiError"}, {"fullname": "sqlmesh.utils.errors.ApiServerError", "modulename": "sqlmesh.utils.errors", "qualname": "ApiServerError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "ApiError"}, {"fullname": "sqlmesh.utils.errors.NotFoundError", "modulename": "sqlmesh.utils.errors", "qualname": "NotFoundError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "ApiClientError"}, {"fullname": "sqlmesh.utils.errors.raise_config_error", "modulename": "sqlmesh.utils.errors", "qualname": "raise_config_error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\terror_type: Type[sqlmesh.utils.errors.ConfigError] = &lt;class &#x27;sqlmesh.utils.errors.ConfigError&#x27;&gt;</span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja", "modulename": "sqlmesh.utils.jinja", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.jinja.environment", "modulename": "sqlmesh.utils.jinja", "qualname": "environment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.MacroReference", "modulename": "sqlmesh.utils.jinja", "qualname": "MacroReference", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.utils.jinja.MacroInfo", "modulename": "sqlmesh.utils.jinja", "qualname": "MacroInfo", "kind": "class", "doc": "<p>Class to hold macro and its calls</p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.utils.jinja.MacroReturnVal", "modulename": "sqlmesh.utils.jinja", "qualname": "MacroReturnVal", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "sqlmesh.utils.jinja.MacroReturnVal.__init__", "modulename": "sqlmesh.utils.jinja", "qualname": "MacroReturnVal.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqlmesh.utils.jinja.macro_return", "modulename": "sqlmesh.utils.jinja", "qualname": "macro_return", "kind": "function", "doc": "<p>Decorator to pass data back to the caller</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">macro</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.MacroExtractor", "modulename": "sqlmesh.utils.jinja", "qualname": "MacroExtractor", "kind": "class", "doc": "<p>Parser consumes a list of tokens produced by the <code>sqlglot.tokens.Tokenizer</code> and produces\na parsed syntax tree.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>error_level:</strong>  the desired error level.\nDefault: ErrorLevel.RAISE</li>\n<li><strong>error_message_context:</strong>  determines the amount of context to capture from a\nquery string when displaying the error message (in number of characters).\nDefault: 50.</li>\n<li><strong>index_offset:</strong>  Index offset for arrays eg ARRAY[0] vs ARRAY[1] as the head of a list.\nDefault: 0</li>\n<li><strong>alias_post_tablesample:</strong>  If the table alias comes after tablesample.\nDefault: False</li>\n<li><strong>max_errors:</strong>  Maximum number of error messages to include in a raised ParseError.\nThis is only relevant if error_level is ErrorLevel.RAISE.\nDefault: 3</li>\n<li><strong>null_ordering:</strong>  Indicates the default null ordering method to use if not explicitly set.\nOptions are \"nulls_are_small\", \"nulls_are_large\", \"nulls_are_last\".\nDefault: \"nulls_are_small\"</li>\n</ul>\n", "bases": "sqlglot.parser.Parser"}, {"fullname": "sqlmesh.utils.jinja.MacroExtractor.extract", "modulename": "sqlmesh.utils.jinja", "qualname": "MacroExtractor.extract", "kind": "function", "doc": "<p>Extract a dictionary of macro definitions from a jinja string.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>jinja:</strong>  The jinja string to extract from.</li>\n<li><strong>dialect:</strong>  The dialect of SQL.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictionary of macro name to macro definition.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">jinja</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">MacroInfo</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.call_name", "modulename": "sqlmesh.utils.jinja", "qualname": "call_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">Expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.render_jinja", "modulename": "sqlmesh.utils.jinja", "qualname": "render_jinja", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">methods</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.find_call_names", "modulename": "sqlmesh.utils.jinja", "qualname": "find_call_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">Node</span>,</span><span class=\"param\">\t<span class=\"n\">vars_in_scope</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.extract_call_names", "modulename": "sqlmesh.utils.jinja", "qualname": "extract_call_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">jinja_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.extract_macro_references", "modulename": "sqlmesh.utils.jinja", "qualname": "extract_macro_references", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">jinja_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">MacroReference</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.JinjaMacroRegistry", "modulename": "sqlmesh.utils.jinja", "qualname": "JinjaMacroRegistry", "kind": "class", "doc": "<p>Registry for Jinja macros.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>packages:</strong>  The mapping from package name to a collection of macro definitions.</li>\n<li><strong>root_macros:</strong>  The collection of top-level macro definitions.</li>\n<li><strong>global_objs:</strong>  The global objects.</li>\n<li><strong>create_builtins_module:</strong>  The name of a module which defines the <code>create_builtins</code> factory\nfunction that will be used to construct builtin variables and functions.</li>\n</ul>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.utils.jinja.JinjaMacroRegistry.add_macros", "modulename": "sqlmesh.utils.jinja", "qualname": "JinjaMacroRegistry.add_macros", "kind": "function", "doc": "<p>Adds macros to the target package.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>macros:</strong>  Macros that should be added.</li>\n<li><strong>package:</strong>  The name of the package the given macros belong to. If not specified, the provided</li>\n<li>macros will be added to the root namespace.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">macros</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">MacroInfo</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.JinjaMacroRegistry.build_macro", "modulename": "sqlmesh.utils.jinja", "qualname": "JinjaMacroRegistry.build_macro", "kind": "function", "doc": "<p>Builds a Python callable for a macro with the given reference.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>reference:</strong>  The macro reference.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The macro as a Python callable or None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">MacroReference</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.JinjaMacroRegistry.build_environment", "modulename": "sqlmesh.utils.jinja", "qualname": "JinjaMacroRegistry.build_environment", "kind": "function", "doc": "<p>Builds a new Jinja environment based on this registry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.JinjaMacroRegistry.trim", "modulename": "sqlmesh.utils.jinja", "qualname": "JinjaMacroRegistry.trim", "kind": "function", "doc": "<p>Trims the registry by keeping only macros with given references and their transitive dependencies.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dependencies:</strong>  References to macros that should be kept.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new trimmed registry.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dependencies</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">MacroReference</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">JinjaMacroRegistry</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.jinja.JinjaMacroRegistry.merge", "modulename": "sqlmesh.utils.jinja", "qualname": "JinjaMacroRegistry.merge", "kind": "function", "doc": "<p>Returns a copy of the registry which contains macros from both this and <code>other</code> instances.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  The other registry instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new merged registry.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">JinjaMacroRegistry</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">JinjaMacroRegistry</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming", "modulename": "sqlmesh.utils.metaprogramming", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.metaprogramming.func_globals", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "func_globals", "kind": "function", "doc": "<p>Finds all global references and closures in a function and nested functions.</p>\n\n<p>This function treats closures as global variables, which could cause problems in the future.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  The function to introspect</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictionary of all global references.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.ClassFoundException", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "ClassFoundException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "sqlmesh.utils.metaprogramming.getsource", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "getsource", "kind": "function", "doc": "<p>Get the source of a function or class.</p>\n\n<p>inspect.getsource doesn't find decorators in python &lt; 3.9\n<a href=\"https://github.com/python/cpython/commit/696136b993e11b37c4f34d729a0375e5ad544ade\">https://github.com/python/cpython/commit/696136b993e11b37c4f34d729a0375e5ad544ade</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.parse_source", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "parse_source", "kind": "function", "doc": "<p>Parse a function and returns an ast node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Module</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.decorators", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "decorators", "kind": "function", "doc": "<p>Finds a list of all the decorators of a callable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.normalize_source", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "normalize_source", "kind": "function", "doc": "<p>Rewrites an object's source with formatting and doc strings removed by using Python ast.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  The object to fetch source from and convert to a string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A string representation of the normalized function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.build_env", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "build_env", "kind": "function", "doc": "<p>Fills in env dictionary with all globals needed to execute the object.</p>\n\n<p>Recursively traverse classes and functions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  Any python object.</li>\n<li><strong>env:</strong>  Dictionary to store the env.</li>\n<li><strong>name:</strong>  Name of the object in the env.</li>\n<li><strong>path:</strong>  The module path to serialize. Other modules will not be walked and treated as imports.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.ExecutableKind", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "ExecutableKind", "kind": "class", "doc": "<p>The kind of of executable. The order of the members is used when serializing the python model to text.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "sqlmesh.utils.metaprogramming.ExecutableKind.IMPORT", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "ExecutableKind.IMPORT", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ExecutableKind.IMPORT: &#x27;import&#x27;&gt;"}, {"fullname": "sqlmesh.utils.metaprogramming.ExecutableKind.VALUE", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "ExecutableKind.VALUE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ExecutableKind.VALUE: &#x27;value&#x27;&gt;"}, {"fullname": "sqlmesh.utils.metaprogramming.ExecutableKind.DEFINITION", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "ExecutableKind.DEFINITION", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ExecutableKind.DEFINITION: &#x27;definition&#x27;&gt;"}, {"fullname": "sqlmesh.utils.metaprogramming.ExecutableKind.STATEMENT", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "ExecutableKind.STATEMENT", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;ExecutableKind.STATEMENT: &#x27;statement&#x27;&gt;"}, {"fullname": "sqlmesh.utils.metaprogramming.Executable", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "Executable", "kind": "class", "doc": "<p></p>\n", "bases": "sqlmesh.utils.pydantic.PydanticModel"}, {"fullname": "sqlmesh.utils.metaprogramming.serialize_env", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "serialize_env", "kind": "function", "doc": "<p>Serializes a python function into a self contained dictionary.</p>\n\n<p>Recursively walks a function's globals to store all other references inside of env.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>env:</strong>  Dictionary to store the env.</li>\n<li><strong>path:</strong>  The root path to seralize. Other modules will not be walked and treated as imports.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.prepare_env", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "prepare_env", "kind": "function", "doc": "<p>Prepare a python env by hydrating and executing functions.</p>\n\n<p>The Python ENV is stored in a json serializable format.\nFunctions and imports are stored as a special data class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>python_env:</strong>  The dictionary containing the serialized python environment.</li>\n<li><strong>env:</strong>  The dictionary to execute code in.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The prepared environment with hydrated functions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">python_env</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.print_exception", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "print_exception", "kind": "function", "doc": "<p>Formats exceptions that occur from evaled code.</p>\n\n<p>Stack traces generated by evaled code lose code context and are difficult to debug.\nThis intercepts the default stack trace and tries to make it debuggable.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exception:</strong>  The exception to print the stack trace for.</li>\n<li><strong>python_env:</strong>  The environment containing stringified python code.</li>\n<li><strong>out:</strong>  The output stream to write to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span>,</span><span class=\"param\">\t<span class=\"n\">python_env</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">metaprogramming</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">]</span>,</span><span class=\"param\">\tout: &lt;class &#x27;TextIO&#x27;&gt; = &lt;_io.TextIOWrapper name=&#x27;&lt;stderr&gt;&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf-8&#x27;&gt;</span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.metaprogramming.import_python_file", "modulename": "sqlmesh.utils.metaprogramming", "qualname": "import_python_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">relative_base</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">module</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.pandas", "modulename": "sqlmesh.utils.pandas", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.pandas.filter_df_by_timelike", "modulename": "sqlmesh.utils.pandas", "qualname": "filter_df_by_timelike", "kind": "function", "doc": "<p>Inclusively filters a DataFrame by a column that is a datetime-like type. This is done by converting the DF column\nto a string and having it match the format of the start and end dates.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">col_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.pydantic", "modulename": "sqlmesh.utils.pydantic", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel", "kind": "class", "doc": "<p></p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel.Config", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel.Config.__init__", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel.Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel.dict", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel.dict", "kind": "function", "doc": "<p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel.json", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel.json", "kind": "function", "doc": "<p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p>\n\n<p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel.missing_required_fields", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel.missing_required_fields", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">PydanticModel</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">provided_fields</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel.extra_fields", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel.extra_fields", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">PydanticModel</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">provided_fields</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel.all_fields", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel.all_fields", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">PydanticModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.pydantic.PydanticModel.required_fields", "modulename": "sqlmesh.utils.pydantic", "qualname": "PydanticModel.required_fields", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlmesh</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">PydanticModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.rich", "modulename": "sqlmesh.utils.rich", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.rich.SchedulerBatchColumn", "modulename": "sqlmesh.utils.rich", "qualname": "SchedulerBatchColumn", "kind": "class", "doc": "<p>Renders completed count/total, \"pending\".</p>\n\n<p>Space pads the completed count so that progress length does not change as task progresses\npast powers of 10.</p>\n\n<p>Source: <a href=\"https://rich.readthedocs.io/en/stable/reference/progress.html#rich.progress.MofNCompleteColumn\">https://rich.readthedocs.io/en/stable/reference/progress.html#rich.progress.MofNCompleteColumn</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>separator (str, optional):</strong>  Text to separate completed and total values. Defaults to \"/\".</li>\n</ul>\n", "bases": "rich.progress.ProgressColumn"}, {"fullname": "sqlmesh.utils.rich.SchedulerBatchColumn.__init__", "modulename": "sqlmesh.utils.rich", "qualname": "SchedulerBatchColumn.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">separator</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">table_column</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqlmesh.utils.rich.SchedulerBatchColumn.render", "modulename": "sqlmesh.utils.rich", "qualname": "SchedulerBatchColumn.render", "kind": "function", "doc": "<p>Show completed count/total, \"pending\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">progress</span><span class=\"o\">.</span><span class=\"n\">Task</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.yaml", "modulename": "sqlmesh.utils.yaml", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqlmesh.utils.yaml.load", "modulename": "sqlmesh.utils.yaml", "qualname": "load", "kind": "function", "doc": "<p>Loads a YAML object from either a raw string or a file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">raise_if_empty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">render_jinja</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">OrderedDict</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqlmesh.utils.yaml.dumps", "modulename": "sqlmesh.utils.yaml", "qualname": "dumps", "kind": "function", "doc": "<p>Dumps a ruamel.yaml loaded object and converts it into a string</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">ruamel</span><span class=\"o\">.</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">CommentedMap</span> <span class=\"o\">|</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">OrderedDict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();